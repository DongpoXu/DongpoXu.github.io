<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>距离不是问题</title>
      <link href="/posts/caa4f3de/"/>
      <url>/posts/caa4f3de/</url>
      
        <content type="html"><![CDATA[<blockquote><p>距离不是问题，相向而行才是关键</p></blockquote><p style="text-align: right">—— 《人民日报》</p><p>我很喜欢读书，尤其喜欢看到书中有些温柔而又铿锵有力的句子，要大声读出来。</p><p>读的时候，刚一开口，便嗓子发紧，像公鸭子在叫，然后骤然停止，悄悄左顾右盼，像做亏心事一般。</p><p>等发现左右无人，便坐的板正，伸直喉咙，将声音从肺里一吐而出，震得脑袋嗡嗡作响，汗毛竖起，感觉甚是奇妙，好像有人从耳朵，从天灵盖，从毛孔中给我注入力量一般。</p><p>我是个矛盾的人，可能和90后这一代人一样，也许不一样。</p><a id="more"></a><p>时而自谦，自卑，时而自信，自大。而这些态度好像不定态一样，你不知道它是高还是低。</p><p>自卑的时候，不敢说话，和人大声说话都要心突突地跳。自大的时候，站在台上呵斥也毫不畏惧。听起来是比较离谱的了。</p><p>友情这个东西对我来说更是一种好奇的、渴求的奢侈品。</p><p>小学在一个地方，初中在一个地方，高中还好，在初中隔壁，生活的地方也都是在变化。也许是变化的生活导致了我的发展路径上出现了一些错误？</p><p>记得有个很好的朋友以前说过，是我没把他们当朋友，我一直在想，几乎每周或者隔两三天就要想起。</p><p>我不知道怎么做，不知道怎么办，生活的条条框框太多，表露自己的喜爱和偏爱就要被冠以圈子所不能容忍的名头。于是便想做一个打破条条框框的人，对不愿意接受的说不，不想做的说不，不喜欢的说不。将生活一下子搅得支离破碎，索性一概不理，我行我素。</p><p>慢慢的了解到君子慎独，稍有感悟。</p><p>为君子：即使独自一人，也要严于律己。是为慎独。</p><p>我努力的学习优秀的人，模仿他们，做好我该做的，累倒也不累，就是感觉不像是自己。</p><p>不知道自己所付出的是否正确，所做出的努力好像没有更接近和自己想成为的样子。</p><p>人生的过程就好像是在这一遍遍，破而后立，立而后破中，慢慢的成长，像小草，用稚嫩的芽顶出土壤，经历了多少次的破而后立呢。</p><p>至今也不知道自己的努力是否正确是否有用。</p><p>不过幸好。越来越近。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>心情随记</title>
      <link href="/posts/67c745b8/"/>
      <url>/posts/67c745b8/</url>
      
        <content type="html"><![CDATA[<p>没有过生日，也什么都没有发生，只是每天的骑行的过程中，注意力很集中，心好像很静，要知道，平静的心总是会暗流汹涌。</p><p>想到很多事情，实在也没时间写。</p><p>前几天宝贝问过我后悔不，当然她问的是感情啥的，那些我没有想过，因为我拥有着幸福生活，不会去想，也不想去想。</p><p>我不是个懒惰的勤奋者，但我一定是个勤奋的怯懦者。只能在无人的时候放声歌唱，只会躲在屏幕后面谈吐风声。</p><p>所幸，这一年的经历，让我见识了生命的不同，让我看到了更多的世界，明白我做纠结，所拧巴，所局限的生活不过是一片角落的阴影。</p><p>做了很久的决定，不错，也许我依旧是个自私的人，可我有认真的想着身边的每个人。</p><p>或许是这些迷茫，让我一心努力赚钱？？？哈哈哈，要真是这样，那可太难了。</p><p>现在这个岁数已经马上要度过那个多愁善感，情感丰富的时段了。</p><p>希望可以重整心情，披荆斩棘。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于CAN通信的一些记录</title>
      <link href="/posts/71b9eff4/"/>
      <url>/posts/71b9eff4/</url>
      
        <content type="html"><![CDATA[<p>昨天设计了电源板，今天要设计通信板，想到几点记录一下。</p><p>CAN模块的功能是处理所有CAN总线上的报文接收和发送。报文发送时，首先将报文装载到正确的报文缓冲器和控制寄存器中。通过SPI接口设置控制寄存器中相应位或使用发送使能引脚可启动发送操作。通过读取相应的寄存器可以检查通讯状态和错误。会对在CAN总线上检测到的任何报文进行错误检查，然后与用户定义的滤波器进行匹配，以确定是否将报文移到两个接收缓冲器中的一个。</p><p>常见的一些MCU，如AVR，STM等单片机都继承了CAN控制器，所以只需要外接一个CAN收发器即可完成功能。</p><a id="more"></a><p>对于一些本身并不支持CAN总线的设备，需要使用SPI接口或者一些其他通讯接口，接一个CAN控制器。（例如树莓派本身不支持CAN总线，就需要使用SPI接口的MCP2515作为CAN控制器）</p><p>一些关于CAN的基础知识：</p><p>首先时CAN的全称：Controller Aera Network，翻译过来就是控制局域网络。</p><p>最早被设计出来用于汽车电子，当然现在也是主要用在汽车，工业，医疗，船舶，航天等领域。</p><p>例如汽车上，各种部件都由CAN总线连在一起，空调、车门、发动机、气囊、网关等。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAN通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>预答辩前小记</title>
      <link href="/posts/73170163/"/>
      <url>/posts/73170163/</url>
      
        <content type="html"><![CDATA[<p>老板今天打电话通知，6月27日预答辩，后来可能觉得时间太紧，推到了7月3日。6月底需要提交所有材料。</p><p>对我来说压力还是很大的。因为论文并没有百分之百结束，最近工作也很忙，有个项目要3个月结束。只能强行不加班，提高一下平时的工作效率了。</p><p>孟子云：</p><p>天将降大任于是人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，所以动心忍性，曾益其所不能。</p><p>希望如此，身心俱疲，但是依旧要努力向前。</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客数据保存</title>
      <link href="/posts/e173a2ff/"/>
      <url>/posts/e173a2ff/</url>
      
        <content type="html"><![CDATA[<p>简单记录一下，master分支，现在已经改为main</p><p>在github的master分支，放置，静态html文件。用于展示，不过，已经有个人网站了，用不着这个，聊胜于无，万一个人网站停了，也有个操作。</p><p>在hexo分支，保存所有文件。方便多平台编写。拉取，写完上传即可。</p><p>明天进行部分测试。</p><p>完成这里面的内容。</p><p>是可以的。</p><p>现在用的是gitee，因为github在国外，好多时候连不上，就很难受。</p><p>咱就是说，难不成我不会pull？<br>再试一试呢。</p><p>已经熟练的掌握了git的commit、pull、push。</p><p>push，将本地的推上去。pull将远端的拉下来。commit，将改变的内容提交到分支。</p><p>pull的时候，如果没啥变化，直接pull取，减少分支提交，如果有变化一定先commit，然后再pull。避免改动没了。git不知道你改了。</p><p>push的话，就是把提交的分支推上去。不知道有啥要注意的。暂时就这样，我这小博客的这些功能就够了。还是本着，用啥学啥吧，不然要学的太多啦。</p><p>set-ExecutionPolicy RemoteSigned</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTEzODk1L2FydGljbGUvZGV0YWlscy8xMjAwMjMyMzQ=" title="https://blog.csdn.net/qq_51513895/article/details/120023234">https://blog.csdn.net/qq_51513895/article/details/120023234<i class="fa fa-external-link"></i></span></p><p>这段是在单位写的，回家pull一下哟。么么~</p><p>pull完了，都ok了。</p><p>关于，提交之后出来一串乱码的问题，就很烦，明明是deploy done，然后识别不了，bash自己的窗口又可以识别，直接用了cmd。问题不大。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> frpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派部署博客</title>
      <link href="/posts/e173a2fd/"/>
      <url>/posts/e173a2fd/</url>
      
        <content type="html"><![CDATA[<blockquote><p>00 年代如同梦呓，10 年代就在昨日。<br>趁大家都在纪念着 10 年代的结束，我是不是可以偷偷的原谅自己不太满意的过去。<br>希望过往所有的遗憾都是未来惊喜的铺垫。</p></blockquote><p>生活从未偏爱过谁，可我能听懂你的歌，这也许就是你我生存下去的意义。</p><p style="text-align: right">—— 佚名</p><p>最近很忙，嗯，字面意义上的很忙。早上7点左右起来骑行9km，忙一天晚上再骑行回来。首先还得感谢电子学会的小伙伴王鹏，鹏总给了我这个机会，救人于水火了属于是。</p><p>在写汇报的时候忽然想起了我的个人博客，服务器自从到期后，续费动辄几百上千，没有收入买的话实在有些肉疼。磨叽好久，忽然想到我域名没到期。家里还有个之前玩着用的树莓派，这不简单折腾一下，把系统搭建起来。</p><a id="more"></a><h1 id="系统框架"><a href="#系统框架" class="headerlink" title="系统框架"></a>系统框架</h1><p>搭建整个系统，先对框架进行了解：</p><img src="系统框架.png" width="700"><p>系统主要分为四个模块：</p><ol><li>一台本地PC，用作用户端，进行文字的编辑，并通过Hexo框架的指令生成静态网页代码（一堆文件，以及index.html）。并且可以将生成的代码通过Git上传到服务器；</li><li>一台树莓派，作为服务器，用于存放本地PC上传的代码。存放的代码需要通过Nginx服务器，将网页通过内网IP进行展示；</li><li>内网穿透（内网穿透方式有很多种，我选择的是Sakura frp，怎么说呢，龙族迷，一眼真），用于将外网的端口映射到内网的IP上，这样，就可以通过frp供应商提供的IP端口进行内网访问了；</li><li>一个域名（这个域名可有可无其实，我正好有个阿里云没到期的，且之前实名认证+备案过的闲置域名），用作外部访问的入口，通过DNS解析到外网的IP端口或者域名即可大功告成。</li></ol><h2 id="本地PC"><a href="#本地PC" class="headerlink" title="本地PC"></a>本地PC</h2><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>关于Hexo，我之前的文章也有讲过。<br><span class="exturl" data-url="aHR0cHM6Ly94dWRvbmdwby5jbi9wb3N0cy8xNzhjMGQyYy8=" title="https://xudongpo.cn/posts/178c0d2c/">Hexo搭建博客<i class="fa fa-external-link"></i></span></p><p>当然在此重新简单的搭建一波：</p><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>下载nodejs并安装，建议安装node12 Latest版，因为新版的node可能会导致一些警告。</p><p><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkL3JlbGVhc2Vz" title="https://nodejs.org/en/download/releases">NodeJS下载地址<i class="fa fa-external-link"></i></span></p><p>安装即可，安装之后，打开系统cmd命令行，依次输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>返回正确的版本信息即安装完成（先不要关闭，还要用命令行工具）。</p><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>使用nodejs的npm包管理器安装hexo，在cmd命令行中，输入安装指令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>根据返回的版本号，确定是否安装成功。</p><h4 id="Hexo生成网页"><a href="#Hexo生成网页" class="headerlink" title="Hexo生成网页"></a>Hexo生成网页</h4><p>创建任意文件夹。在文件夹位置打开cmd命令行，输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init test-Blog   # hexo初始化</span><br></pre></td></tr></table></figure><p>再次查看文件夹，就会有Hexo框架的源代码了。</p><p>接下来进入文件夹，依次输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd test-Blog    # 进入文件夹</span><br><span class="line">hexo g          # hexo生成静态网页</span><br><span class="line">hexo s          # hexo开启本地端口</span><br></pre></td></tr></table></figure><p>此时，访问 <span class="exturl" data-url="bG9jYWxob3N0OjQwMDA=" title="localhost:4000">localhost:4000<i class="fa fa-external-link"></i></span></localhost:4000> 即可从本地PC上访问Hexo生成的静态网页了。</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>本地的网页需要上传至服务器，采用Git方案。需要去Git官网下载：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRmb3J3aW5kb3dzLm9yZy8=" title="https://gitforwindows.org/">Git下载地址<i class="fa fa-external-link"></i></span></p><p>正常默认安装即可。</p><h4 id="生成ssh公钥"><a href="#生成ssh公钥" class="headerlink" title="生成ssh公钥"></a>生成ssh公钥</h4><p>在命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>一直回车即可，公钥一般会被保存在 <strong>C:\Users\用户名\.ssh</strong> 下，当服务器搭建起来之后，需要将公钥放在服务器端，方便访问。</p><p>本地PC端的设置到此基本完成。</p><h2 id="树莓派"><a href="#树莓派" class="headerlink" title="树莓派"></a>树莓派</h2><p>树莓派系统安装在此就不多说了。正常安装了树莓派系统的，应该都可以ssh连接。就从ssh连接之后开讲。</p><h3 id="配置树莓派"><a href="#配置树莓派" class="headerlink" title="配置树莓派"></a>配置树莓派</h3><h4 id="树莓派更换源"><a href="#树莓派更换源" class="headerlink" title="树莓派更换源"></a>树莓派更换源</h4><ul><li>打开树莓派镜像列表sources.list</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><ul><li>将内容替换为清华大学源</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br></pre></td></tr></table></figure><ul><li>更新源</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="配置远程仓库"><a href="#配置远程仓库" class="headerlink" title="配置远程仓库"></a>配置远程仓库</h3><h4 id="树莓派安装GIT"><a href="#树莓派安装GIT" class="headerlink" title="树莓派安装GIT"></a>树莓派安装GIT</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><p>回复正确的版本号即安装完成。</p><h4 id="建立Git远程仓库"><a href="#建立Git远程仓库" class="headerlink" title="建立Git远程仓库"></a>建立Git远程仓库</h4><p>我的目标是将树莓派用作个人服务器，搭建在自己家中，和台式机在一个内网中。<br>所以需要在树莓派端用Git建立一个远程仓库，本地PC通过Git提交本地网页代码至远程仓库。</p><p><em>注意</em>：这种方法适用于各类云服务器，我这里树莓派相当于替代了云服务器。（所以我的本地PC要求在树莓派的局域网内）</p><p>建立步骤：</p><ul><li>创建文件夹</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /var/repo/                 # 创建一个文件夹</span><br><span class="line">sudo chown -R $USER:$USER /var/repo/  # 分到用户组</span><br><span class="line">sudo chmod -R 755 /var/repo/          # 改变文件夹权限（含义请百度）</span><br></pre></td></tr></table></figure><ul><li>进入文件夹，创建Git仓库，名称为XXXXX。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/repo/</span><br><span class="line">git init --bare XXXXX.git</span><br></pre></td></tr></table></figure><ul><li>仓库映射(这几步很重要)</li><li>创建文件夹作为nginx根目录，之后nginx配置root就是配置这个文件夹。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/www/hexo</span><br></pre></td></tr></table></figure><ul><li>修改目录权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $USER:$USER /var/www/hexo</span><br><span class="line">sudo chmod -R 755 /var/www/hexo</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">- 在仓库XXXXX下创建钩子文件（直接vi即可，vi建议学一下哟，还是很常用的），将网站文件传送到刚才创建的文件夹/var/www/hexo下。(记得改XXXXX)</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">sudo vim /var/repo/XXXXX.git/hooks/post-receive</span><br><span class="line"></span><br><span class="line">在文件中，写入以下内容：</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/XXXXX.git checkout -f</span><br></pre></td></tr></table></figure><p>保存退出，改变文件权限，让文件变为可执行文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /var/repo/XXXXX.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>这样远程Git仓库也搞定了。接下来安装&amp;配置nginx。</p><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p>安装返回正确版本号即可。</p><h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><p>打开nginx默认配置项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p>将root值修改为我们建立的根目录 /var/www/hexo，我们也能看到，nginx此时只开启了80端口，即http端口，之后我们会再配置https的443端口。</p><p>保存退出，重启nginx服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><p>此时通过内网已经可以访问树莓派的nginx了，在浏览器输入树莓派IP地址回车即可。</p><h4 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥"></a>添加公钥</h4><p>在前面安装完PC端Git之后，我们生成了一段公钥，这时候就要把这个公钥添加在树莓派中，让树莓派不会拒绝我们的代码提交。在.ssh文件夹中打开终端上传公钥即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -p 22 树莓派用户名@树莓派IP</span><br></pre></td></tr></table></figure><p>安装完毕，配置PC端hexo的_config.yml文件，填写deploy:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 树莓派用户名@树莓派IP地址:/var/repo/XXXXX</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>都修改完之后，本地 <strong>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</strong> 即可。</p><p>再次访问树莓派IP地址，网站出现，整体工作完成一半。</p><h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><p>关于内网穿透的一些细解就不多讲了，主要是我自己也不是很懂，就直接上我的路线吧，如遇到有缘人和我的路线一样，能帮一把是一把，如果不一样，个人主页，也可以联系我，知无不言。</p><p>需要先验条件：有备案的域名，以及1元钱（实名认证用，调用的支付宝或者微信的接口）。</p><p>我的内网穿透是用工具SakuraFrp完成的，这里上链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cubmF0ZnJwLmNvbS8=" title="https://www.natfrp.com/">SakuraFrp<i class="fa fa-external-link"></i></span>，进入之后，注册一个用户即可，看个人资金程度哈，我用的是免费用户，想办会员当然也可以。</p><p>有官方<span class="exturl" data-url="aHR0cHM6Ly9kb2MubmF0ZnJwLmNvbS8=" title="https://doc.natfrp.com/">帮助文档<i class="fa fa-external-link"></i></span>，建议细看，基本所有的问题都可解决。</p><p>接下来我的步骤：</p><ul><li>点击服务</li><li>点击隧道列表</li><li>创建隧道</li><li>选择可建站</li><li>选择普通节点(内地)</li></ul><p>挑选一个不满载的创建隧道。需要创建两个：</p><ol><li><em>名称</em>、<em>HTTP</em>、<em>80端口</em>、<em>自己的域名</em>；</li><li><em>名称</em>、<em>HTTPS</em>、<em>443端口</em>、<em>自己的域名</em>；</li></ol><p>这里为什么开两个隧道的原因我给解释一下：最开始我是开了80端口，可以http访问，然后配置了ssl，改为了https+443，发现http端口不能用了。以为是重定向的问题，改了很久nginx的配置。</p><p>后来发现这种方式用的是隧道方式，和重定向没关系，强制重定向没有用。所以在Sakura frpc上又开了一个80的隧道。解决问题。</p><p>隧道配置完，需要在树莓派端输入：<strong>frpc -f wdnmdtoken666666:12345</strong></p><p>这些在基本指南里面都有，傻瓜式输入命令行即可，没啥好搞的了。</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>域名这个东西我自己本身就有，阿里云，直接域名解析DNS，到frp的地址即可。</p><p>隔了几天写的，忘了想写啥了。</p><p>今天听到有个外包软件的大叔，在跟两个经理讲软件相关的东西。按我的认知对个百分之65吧。</p><p>也是一顿瞎说哈哈。不过说到一句老话还是认同的，高级工程师高级在什么地方，在于掌握一门技术。身边人做不了的那种。</p><p>这就像我本科时候，我老大（杨深圳）跟我讲的一句话，在任何地方都要做到无可替代，别人没法替代你的工作，你就算在当前的岗位成功了。</p><p>我还差得远，共勉。即使当了老师，也不能懈怠，不论生活，亦是工作，都要努力做到最好。</p><p>君子慎独。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> frpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《百年孤独》读后感</title>
      <link href="/posts/e173a2fb/"/>
      <url>/posts/e173a2fb/</url>
      
        <content type="html"><![CDATA[<p>什么才是这个世界沉默的大多数</p><p>不曾见惯生死，一直自诩铁石心肠。<br>却看不得世间疾苦。</p><p>你好，树先生，你好，秋儿。</p><p>我们走进了新时代，不想把他们留在旧时光。我想这才是教员那个年代的人改革的真谛。</p><p>世界上只有一种真正的英雄主义，那就是认识生活的真相后依然爱它。</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 百年孤独 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对成长的思考</title>
      <link href="/posts/2aab7b5a/"/>
      <url>/posts/2aab7b5a/</url>
      
        <content type="html"><![CDATA[<p>今天在看论文，忽然间对成长有了些思考，这些思考也仅仅适用于我自己，因为我觉得每个人对成长的理解也大不相同。</p><p>之前因为好奇了解了嵌入式，虽然做不到熟练精通，但是应该也可以上手就做东西了。</p><p>论文要看，一定要看，并且开始看开始写。就忽然想到，很多时候无法静下心来学习，或许就是不够成熟的表现呢？</p><p>并不是说没有自制力就是没有成长，毕竟很多小朋友的自制力比我强多了，不可能说他已经成长了。就单单对我个人来说，从小到大虽然也吃过些苦，但永远都是父母在我前面帮我顶着，本身自制力在我来说就是欠缺的技能。所以在这方面做出的蜕变是否就是成长？</p><p>这也侧面验证了，成长就是自己对自己的提高。自己对于自己的蜕变。</p><p>算不上灵感枯竭，但是心有所系，生活繁杂。</p><a id="more"></a><p>《活的通透的人，往往坚持这三条法则》bilibili，视频搬运：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWZNNHkxMzdVQj9zcG1faWRfZnJvbT0zMzMuODUxLmJfNzI2NTYzNmY2ZDZkNjU2ZTY0LjQ=" title="https://www.bilibili.com/video/BV1fM4y137UB?spm_id_from=333.851.b_7265636f6d6d656e64.4">https://www.bilibili.com/video/BV1fM4y137UB?spm_id_from=333.851.b_7265636f6d6d656e64.4<i class="fa fa-external-link"></i></span></p><p>最近很喜欢看这种标题小文章，小视频。给自己打打气，聊胜于无。</p><ul><li>第一：沿着阻力最大的路径前进</li></ul><p>很显然，这不是一个绝对的情况，但不是说没事找事。毕竟只要正常人，都会有抵触情绪。</p><p>这里主要指的是，当要考虑做一些建设性的事情时，一些会以某种方式推动你的生活向前发展的事情时，你所感受到的内部阻力，比如写一封已经关注很久的工作的求职信，或者清理一下早就一团糟的车库。当想要做这些事情时，所感受到的内在阻力，同时也会让你感觉到充满力量去克服它。</p><p>打破舒适区</p><p>如果我们屈服于它，就会逐渐变得麻痹。但是如果我们能学会不回避这种感觉。而是向他靠近，就会发现，我们的生活将会迅速改善。</p><p>因为生活中最有价值的东西，总是隐藏在不安或者阻力的背后。</p><p>我们通过暂时的不适来换取我们生活中长久的秩序和成功。</p><p>如果我们能够意识到这种融入现实世界脉络的特别的小交易，我们就可以利用它成为我们的优势。</p><p>我们可以放心尽可能多地进行这种交易，而我注意到的一件事是，当我们能够更愿意靠近这种令我们不适的行动，一段时间后，我们就会开始享受这种阻力的感觉。</p><p>很奇怪吧，这种不舒服的感觉会让我们兴奋和充满力量。我认为这是因为再我们克服阻力之后，它就成为了力量的来源。因此我们足够频繁的经历战胜它的过程，我们的大脑就会示意我们，这种不适会带给我们力量。我们就会对克服障碍和挑战感到兴奋。</p><p>记住这条规则，<strong>当我们在克服阻力时，其实是在吸收它的力量。</strong>阻力越强，力量越大。</p><ul><li>第二：不要停止做那些让你摆脱困境的事情</li></ul><p>大部分时候我们都知道自己需要做些什么来停止感觉自己是个废物。</p><p>就像我们总是把自己搞得一团糟，玩更多电子游戏，吃垃圾食品。我们根本没有照顾好自己。</p><p>我们沉溺在这种消极的心态中，这种自我厌恶的漩涡中。</p><p>当这样的时间长时间持续后，我们就会厌倦这样的生活。我们会要改变现状，去健身房，吃的更健康，工作不拖沓，早上洗澡。穿得体的衣服。</p><p>当我们做这些事情的时候，就会感觉到越来越好，我们开始感觉到更加自信，开始感到更有活力、更积极。但是奇怪的是，通常会发生这样一些事情。</p><p>由于我们不再有那种消极的诱因来激励自己摆脱困境。我们就会忘掉一些事情，例如：为什么我们要照顾好自己的初衷。所以我们开始变差。偷工减料，开始有一天没去健身房，然后两天，一周。</p><p>最终我们沿着滑溜溜的斜坡又回到了原点。但是有没有想过，如果你坚持做那些让你摆脱困境的事情。你的生活会变成什么样子？</p><p>因为在现实生活中，成功并没有什么秘诀。成功不需要你去做一些耗资巨大、非常了不起的事情，比如一夜之间就可以写完一本书。也不是去健身房拼命健身一天就可以获得好的身材。不可能一蹴而就。</p><p>成功是通过做那些能让我们走出困境的事情，但是需要坚持做，每天做，长时间做。关键的是要把这些事件坚持的足够久，使他们成为一种习惯。习惯意味着，做比不做要容易。因为这就是长期完成这些事情得到的结果。他们最后会成为身体的一部分。</p><ul><li>第三，记录所有事。</li></ul><p>行为与感受之间存在联系，最具有性价比的习惯，就是记录你的想法。</p><p>例如？：深夜嗓子疼醒了，2、3、4点估计都醒了，4点起来根本无法下咽，过于疼痛，吃了一粒布洛芬。</p><p>1.做那些让你感到内在阻力最大的事情，（约等于打破舒适区）<br>2.不要停止做那些能够摆脱困境、改善你生活的事情（日拱一卒，不要停下来啊，希望之花）<br>3.记录生活，如实发生了什么，你感觉如何，每日记录，可逐渐发现自己的行为与感受之间的联系</p><h3 id="随便记录"><a href="#随便记录" class="headerlink" title="随便记录"></a>随便记录</h3><p>你太急切的想要一个答案了。想要风光的学位，瞬间的博学，想要意气风发，想闪着金光走向喜欢的人。</p><p>但现实告诉我，操之过急便会败北，他要我等，要我耐得住不断延长的时间线，要我交付出足够的努力堆砌在沉闷、晦涩的时光里，才肯将一切“我想要”一点一点送至我手里。</p><p>“我知道你最近很累，是那种看不见的，身体上和精神上的疲惫感，但请你一定要坚持下去。就算无人问津也好，技不如人也罢，千万别让烦恼和焦虑毁了你本就不多的热情和定力。别贪心，我们不可能什么都有，别担心，我们不可能什么都没有。”</p><p>“不要再这样下去，一晚一晚的熬。想东想西，实在是矫情，真的该关掉手机，断了一些没必要的联系，扔掉所有负能量，认认真真的生活，再去做一些正儿八经的事情。”</p><p>“你要留点精力去读书去运动去爱人，去奔赴你想要的生活，不应该把精力浪费再痛苦的社交讨厌的人那里，看起来可以挽回的事情，仔细想想一点都不值得，贪恋过去的快乐注定走不远，过去的就让他过去吧，在热爱生活的同时快乐的小事情。”</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小周记</title>
      <link href="/posts/40248a3e/"/>
      <url>/posts/40248a3e/</url>
      
        <content type="html"><![CDATA[<p>以后 tag 标签添加记录标签，减少人生，我觉得我还不懂什么是人生，不应该整天人生挂在嘴边。</p><p>这两天就开学了，开学前和宝贝还小吵了几次，具体因为啥也记不住了，主要是我自己脾气不好，嘿嘿，幸好想到了解决办法。希望和宝贝可以长长久久。</p><p>因为太久不写东西，都不知道从何处开始，那就像最开始一样吧。写些流水账，记录一下生活。</p><a id="more"></a><p>来了个新室友，理学院研一的小伙子，比我小一岁，理学的名头勾起了我对往事的回忆聊的多了些。小伙子人很不错。无奈夜里呼噜声太大了。白天协商了一下，我给阿姨买了点水果，然后调换了一下寝室。还是跟帆哥，命嘉住一起。毕竟最近好不容易调整好的作息，不想打乱。（PS：严重怀疑脾气不好是内分泌失调。）</p><p>之前学了 I.MX6ULL 的开发板，虽然是跟着教程走，但是总有不一样的需要配置的，导致解决问题用了很久很久。</p><p>不过所幸全部搞定了，也顺便记录一下：</p><p>主要设备：台式机，路由器，交换机，I.MX6ULL 开发板，网线两根。</p><p>实验室网线进屋进入交换机，分出一堆 10.11.x.x 的 IP 地址，其中一根接入路由器，分出 192.168.1.x 的 IP 地址。</p><p>接线方法，台式机接交换机，同时用 WIFI 模块连接路由器，同时有两个 IP 地址；I.MX6ULL 开发板接入路由器（因为不知道为什么，开始接入交换机一直不能 NFS 挂载文件系统，无法进行之后的驱动开发）；虚拟机设置为固定 IP，设置到 192.168.1 的范围内，这样虚拟机和主机可以互相 ping 通，主机和开发板可以互相 ping 通，虚拟机和开发板可以互相 ping 通，且用自己的 uboot，linux_kernel，rootfs 可以正常运行系统（问题是再 tftp 下载时，因为是主机的 192.168.1.x 的 IP 地址是 wifi 连接，所以延迟时间过长，之后烧录到emmc中应该会好很多）（PS：不将主机连接到路由器是因为想要很快的网速，路由器太慢啦！！！）额外一提，因为还有个树莓派接在交换机上，这样正好我还可以接续连接树莓派搞事情。传输速度快才是王道。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这些年</title>
      <link href="/posts/f9a09f12/"/>
      <url>/posts/f9a09f12/</url>
      
        <content type="html"><![CDATA[<h2 id="工作随记"><a href="#工作随记" class="headerlink" title="工作随记"></a>工作随记</h2><p>最近老婆要毕业找工作了，我寻思也整理下最近这些年做的项目，很多已经记不清了，这样子等到我毕业怕是要忘光了。</p><p>本科：<br>大学四年时光匆匆，恍然如隔世。<br>2013 年 9 月开学，我参加了院篮球队，也是在 10 月社团纳新的时候和室友们一起接触了电子学会，大家都是不懂，抱着了解下的心态去随便看看，不曾想 12 月份因为积极进入了学会的实验室，坐在 116 屋子最里面的角落，老大（深圳哥）给了我一本书，一个 pdf 图，书红彤彤的，郭天祥这个名字深深的烙入我的心里，从此每日早出晚归。我比较笨，身边的小伙伴（涵哥等大佬）流星灯都做好了，我一个流水灯还迷糊着。老大就每天给我从模电讲，好多次记得 22 点半，我们要关门熄灯了。老大也不回就跟我讲。然后就开始熬夜了，从此一发不可收拾。然后熬夜加班就伴随了我至今 8 年。</p><a id="more"></a><p>后来大二当上了学会会长，参加各种比赛，一时风云让我迷失双眼，觉得自己无所不能，在最好的年华因为骄傲失去了自己曾追求的顶点。<br>总之年华已逝，怀念该怀念的，由衷祝福当年身边的小伙伴们生活无忧，开心快乐。</p><p>我是一个生活上被动的人，没有什么主动性，也不想去选什么学校，没有动力，研究生期间去了理学院，跟着理学的几个师兄，好几个师兄还是我电子学会的师兄（米哥，胖哥，阳哥）在这里学到了很多东西，感谢王老师。虽然最后离开了您，毕竟我觉得我自己的人生我可以自己负责。毕竟人人都有私信，你我都不例外。理学这边实验室名字我记得很清楚，叫：长春理工大学固体激光与技术重点实验室 721 工作室，现在都搬南区去了，据说我们离开后，雇了个外面的团队进来。</p><p>说说都干了些啥吧，毕竟这个最后想总结出简历来着，不是来回忆的。</p><p>按照学习的工具和参与的项目这个顺序写吧，按照时间顺序来，也好依着文件回忆。</p><p>学习顺序：</p><ul><li>学习了 51 单片机 大一</li><li>跟着渣哥学模电 天天 220V，捣鼓变压器，（我老大说的，艺多不压身）</li><li>学 STM32 单片机，自己写底层。当时学的都是 103VB RB 这些。现在都 429 747 了。</li><li>要参加飞思卡尔了，我是种子选手，提前开始 MK60 芯片学习。好像是 MK60DN512 后面是啥忘了。</li><li>飞思卡尔搞完，还有很多电赛啥的，也就是这个时候很多和我一样的小伙伴陷入了迷茫期，不知道该学习什么。我学了 C++，MFC，看了 CAD，MAYA，还画了头驴子。</li><li>学习了 SolidWorks，就会画点简单的钣金设计。</li><li>学习了 LabVIEW，可以做个差不多的项目。</li><li>后来学习了前端，觉得这东西好有意思，当时以为自己是要靠前端过生活的，其实后来才发现，我只是喜欢创造，喜欢 create，喜欢机械、电子、计算机、设计，这些东西会带给我快乐。</li><li>可惜了，那时候没有一个好的老师来辅导方向。</li><li>然后学了 Linux 嵌入式，可以移植操作系统，会裸机开发。</li><li>Python 顺手学的，搭个框架轻松，基本上实验室同学有啥问题都能解决。</li><li>shell 脚本、bat 脚本。没事写着玩。</li></ul><p>硕士：</p><ol><li>给米哥画了激光测距的机械图，做了 multisim 仿真，米哥想带我学 FPGA 来着。我确实对那个不咋感兴趣，当时在认真学 labview。</li><li>给霄哥绘制麦克风的盒子。需要用卡具来固定设备</li><li>《基于机器视觉的可触摸投影仪》，这个应该属于帮谁家孩子做比赛，用 kinect 完成一个手势投影仪。</li><li>写条保，估计是个啥大项目的文件，一大堆文件，照着抄写。忽然想到现在在电信这边，老板也经常会有一些文件需要让下面的学生去写。嘿嘿。原来都是一样的哦<del>~</del></li><li>有个老师要一个 4 路触发器，让米哥用 FPGA 设计了个，我这边设计了盒子，零部件、工程图、PCB 图。</li><li>师兄的项目需要驱动 LCD，完成 74HC245 的驱动程序。说白了就是个放大器。电机驱动里面用的那玩意。</li><li>LabVIEW 学的不错，自己做了一些小玩意，实验室老师不咋待见，但是别的老师有需要，参与了一个设备的研制，主要负责步进电机上位机的编写。嘿嘿小赚一点。</li><li>参与了同步触发器项目，就是上面那个 4 路触发器的完成版本。说白了也是个小项目。就是做的更像样了，做了很多的要求，4 路频率范围，每一路的脉宽周期可调互不影响等等。然后设计图纸定制壳子，激光打标。感谢师兄们一路带我。辛苦啦。</li><li>完成了 Labview-32 下载器（金龙），上海一个开公司的师兄要搞一个 32 下载器，用 LabVIEW。这种事情对我一个新手来说是有些懵的。不过在咨询过各位大佬之后，整体方案有了思路。通过计算机的 cmd 指令，将编译好的 bin 文件下载到 STM32 中即可。不错不错。之后学了 linux 后才对整个下载流程以及单片机的运行流程了解的更透彻。</li><li>自动焊接机项目，实验室有个小伙子机械的，很六，基本上我画结构图都是他不愿意画的边角料。带着我一起做了个自动焊接机的设计。后来他考研去了。我就自己搞了。幸好我的大神船还是 2060super 的显卡。贼六。</li><li>激光清障系统项目，搞了个大点的项目，电网那边的，要用激光清除电塔等高空处的障碍物，一般都是些塑料袋啥的。设计了结构，完成了上位机的设计，以及通讯。网络控制激光，串口控制天文转台。出差去了几波天津。小赚一笔，美滋滋。但是说实在的这个项目其实挺让我难过。实验室本来还有个小伙学 labview，是老师的嫡传，啥活都让他锻炼，这小伙假期请一周假跑日本玩了俩月，活没人干了，才让我顶上，顶上的时候让我一晚上出初稿，我从下午知道这个事情，开始查资料，老师从晚上八点跟我唠叨凌晨两点，然后回去睡觉了，我一直干到早上 10 点多，在大老板检查前干完了，睡了不到俩小时，老师电话打过来说你这什么玩意。我一脸懵。发消息给你都汇报了。感情你休息好了，能考虑下学生么？？我这不是电赛做比赛要搞个 4 天 3 夜，我搞比赛，我老大小弟都一个劲劝我休息。这倒好。</li><li>还是上一个项目，要写个专利，画一堆零件图，渲染。又是一晚，各种喷。其实我现在慢慢的也理解，为了自己的利益嘛。这有啥的。也就是自己把真心拿出来跟老师说，觉得会为自己着想。太天真了。其实这时候就已经不想再待了。</li><li>帮另个实验室的师兄设计光路。完成光路的一些结构设计。</li><li>最后参与了个军演项目，北斗基站相关的。一方面涉密就不说了。另一方面也是死心了。<ol><li>研究生一年时间，其实很多很多次和师兄还有老师聊过未来，聊过怎么毕业。师兄们其实也不想待，但是他们选择了忍者，我一昧认为老师还是为我们着想的，只是太忙，就一次次找，后来才明白，不过是自己想多了。</li><li>我离开后，实验室学生都走了。想来王老师应该也挺恨我，据我师兄说，后期想搞我但是我后来的老板比较强硬，没搭理他。</li></ol></li></ol><p>博士：</p><p>博士是阴差阳错，机缘巧合，也是迫不得已，被逼无奈。但是总归是没有走错。</p><p>来这边是因为一个师兄，唉，世界很大，什么样的人未来都会遇到，所以一切我都释然了，当时还在理学，这个师兄总是找我帮他做东西，开始还好，都是问我方法，后来就都是帮我弄呗。这样的。</p><p>这里告诉大家一个道理，不要接受那些小恩小惠，莫名其妙说要对你好的人，都是图你啥的。别当傻子。</p><p>那时候小啊，拗不过，帮着做线束，自己有空了，就来他这边帮忙，看旁边的子睿师兄在做前端，还加了好友聊天。其实很简单，这个师兄说的话是真是假，山哥，子睿师兄都能为我证明。</p><ul><li>线束这个也算个项目吧。小破玩意，主要我负责，接收前面给我的所有的 1 或者 0，信号，根据我的算法计算出汽车线束的通断。实际上算法都在我的软件里面写着。那边就判断了个通断。通俗点就是判断了一下灯亮没亮。</li><li>参与了 14 所 S-X 频段光收发组件，代码我写的。不接受反驳，简单的跟屁似的，都写不出来找我。学了点啥，吹牛逼么。</li><li>XX-XXX 转发模拟器，就是上面那个玩意，项目的真正名字，跑南京句容雷测站交项目。</li><li>还是上面那个东西，还跑去洛阳 158 厂出了两次（共一个月差）</li><li>水质检测系统，老板给的活，其实就是华仔（当时研二的学生）手里的项目，搞不定了。叫着一起搞。</li><li>自动硬币分拣专利，这也算个吧，结构那个师兄说，东西我画，然后他写个专利，前期还算我，后期都给我 pass 掉了</li><li>好像这时候是博一了，开始没那么忙，可能这个老板手下的人干活慢，我一来咔咔，没适应，这时间段我在自学前端，做了几个小项目，自己搭了博客，写了餐饮 app，待办事项 app，然后做了很多小的 demo</li><li>开学老板让我带学生去太原出差，老板想要个测试公司的资质，我带了个学生去，写了几天文档回来。那个公司好像叫西南测评测评软件中心。</li><li>重庆出了波差，重庆长客轨道一号线测试。</li><li>帮另一个老师用 labview 写了个可视化 FFT</li><li>EMC 文件审核，之前那个太原出差的文件。</li><li>赵爽老师的一个车辆后视雷达项目，驱动芯片判断车辆后方有没有物体，将 FFT 移植到 STM32 上。</li><li>桥梁 RFID 监测系统，本来是帮着那个师兄做，结果后来恶心我，不做了。师弟后来要参与做上位机，我帮着做了。so easy。</li><li>投影仪视频转换，北京 55 所的项目，这一年基本都是这个项目，小老师负责了前面，结果后来被逼急了，不干了，我接过来干完了，主要突破点在高频干扰上，还是机缘巧合。</li><li>电源项目</li><li>视频线项目</li><li>以上三个项目忙了半年。还不错，学到不少。</li><li>TWR 项目 穿墙雷达项目，也是我自己的毕业方向，55 所的一个军科委人才项目。</li><li></li><li>灾害预警</li><li>太阳能自动充放电，（并网）</li></ul><p>写不动了。再说吧。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乔迁之喜</title>
      <link href="/posts/a74872a0/"/>
      <url>/posts/a74872a0/</url>
      
        <content type="html"><![CDATA[<p>嘿嘿，尴尬，忘了要写啥。</p><a id="more"></a><p>博士年级越来越的，紧迫感如约而至，随之而来的便是早有准备却毫无防备的工作。</p><p>博客有些时日没写了，但日子却过的满满当当，白天一天实验室，晚上泡泡图书馆，过的幸福而充实。</p><p>今天是2021年3月10日，昨天和小可爱吵了架，嘿嘿，没想到她那么凶残竟然把手机摔坏了，刚下单了新手机，当赔罪，也当生日礼物了。</p><p>处于繁华之中，总是难以静心，把博客当作一种日记，心里负担小了许多。</p><p>世间万般皆有定数，不纠结，不选择困难，量力而行。</p><p>相信自己看得到的长久。</p><p>忽然有些理解美国所谓的“自由”，更像是阿德勒心理学所讲述的，分离原则。<br>所谓自由，不过就是，别人怎么看我怎么评价我，是别人的课题，我无法左右，我只需要真诚的面对自己的人生，做我自己应该做的事情。<br>即 人生的真理。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新测试</title>
      <link href="/posts/d893fb7/"/>
      <url>/posts/d893fb7/</url>
      
        <content type="html"><![CDATA[<p>在 hexo 提交过程中，提示：</p><blockquote><blockquote><p>warning: LF will be replaced by CRLF in tags/树莓派/index.html.</p></blockquote></blockquote><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>windows 中的换行符为 <strong>CRLF</strong>，而在 Linux 下的换行符为 <strong>LF</strong>，所以在执行 add . 时出现提示<br>工作区的文件都应该用 <strong>CRLF</strong> 来换行。如果改动文件时引入了 <strong>LF</strong>,提交改动时，git 会警告你哪些文件不是纯 <strong>CRLF</strong> 文件，但 git 不会擅自修改工作区的那些文件，而是对暂存区（我们对工作区的改动）进行修改。也因此，当我们进行 git add 的操作时，只要 git 发现改动的内容里有 <strong>LF</strong> 换行符，就还会出现这个警告。</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>git config -&zwnj;-global core.autocrlf false</p><p>也可不做任何操作，只是会不停提示你而已，对代码提交没有影响。</p><p>ssl过期，重新安装，nginx reload /etc/init.d/nginx start</p><a id="more"></a><p>最痛苦的人是什么人？是我们。</p><p>我们读了一点书，懂了一些道理，却太片面，活在自己的世界里面，还要指责老天指责上苍，怒骂这个社会为什么不是我们想象的这个样子；</p><p>我们看到了一些问题，想到了一些解决办法，却太幼稚，总想着用简单的世界观和方法论去解释和解决复杂多变的现实世界，最后悻悻而归，认为自己活了二三十年一事无成；</p><p>我们有了一些成绩，取得了一些成果，却太少，我们一边困于自己的欲望得不到满足，一边又困于我们的心态不够豁达和开朗，最后活的特别拧巴，时而自卑时而膨胀，最后终归于焦虑；</p><p>我们做不到愚者“不知”的乐，我们也感受不到智者“知之”的乐，最后我们最不快乐；</p><p>民工们很快乐，因为他们只活在当下，不知道何谓“生活”；我姥爷也很快乐，因为他看透了人生，觉得“生活就是如此”；我们最不快乐，我们还在问，“生活为什么会是这个样子”所以，怎么获取快乐呢？其实很简单你是不可能自费武功的，学都学了，明白都明白了，还不如继续勇猛精进下去，总有一天，你的经历和你的知识会融汇贯通，成就你自己的一套方法论和世界观，让你知道你是谁，你能做什么，你的生活是什么样子的那个时候，你该有的都有了，不该你有的，你也不惦记了而在这个过程当中，别想太多，莽就对了，活在当下，当个无知的人阶级固化，经济形势，行业动向，中年危机……这是个啥？我不知道，我也不想知道，更何况我知道了也没啥用用愚者的莽夫劲儿，勇猛精进的学习下去，最后，当一个生活的智者上了生活的贼船，那就干他娘的，学他娘的，当一个快乐的海盗。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《外婆的道歉信》读后感</title>
      <link href="/posts/923dfd9f/"/>
      <url>/posts/923dfd9f/</url>
      
        <content type="html"><![CDATA[<p>“每一个小孩都该有一位超级英雄。”</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 外婆的道歉信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新搭建博客</title>
      <link href="/posts/b5ca5ff7/"/>
      <url>/posts/b5ca5ff7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>阿里云到期了，本来学生计划答题还可以再白嫖 6 个月，结果基础太差，80 分白嫖失败。这就很尴尬了，于是咬咬牙，自费购买阿里云轻量应用服务器。开始以为区别挺大的，后来发现其实也还行。</p><p>买完后，可以选装系统的选项有很多，有应用镜像和系统镜像。我个人选择的是系统镜像中的 Ubuntu16，可以按照自己的喜好来购买。网上应该也有 wordpress 搭建博客的。应用镜像的系统应该是 CentOS7。</p><p>进入阿里云控制台，控制台部分没有轻量应用服务器，我进习惯了 ECS，进去找了半天愣是没找到，还以为被钓鱼网站骗了，囧~</p><a id="more"></a><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>接下来就一步步对新的服务器进行搭建。</p><p>在阿里云控制台中选择产品与服务，找到轻量应用服务器即可，进入服务器详情，在服务器概览中点击重置密码，通过手机确认后，就可以使用 ssh 进行远程连接了。</p><p>我的域名备案什么的都是之前做好的。所以直接绑定域名即可。具体要备案啥的，官网都有相关说明<span class="exturl" data-url="aHR0cHM6Ly9iZWlhbi5hbGl5dW4uY29tL3BjQ29udGFpbmVyL215b3JkZXI=" title="https://beian.aliyun.com/pcContainer/myorder">备案中心<i class="fa fa-external-link"></i></span></p><p>我最开始服务器在阿里云上，后来转移到 GithubPages 上，后来又转回到阿里云上，本地写完的博客，推的时候进行修改，在博客文件下修改_config.yml 文件中 deploy 块如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repository:</span><br><span class="line">      # github: git@github.com:DongpoXu&#x2F;DongpoXu.github.io.git</span><br><span class="line">      # coding: git@e.coding.net:DongpoXu&#x2F;dongpoxu.git</span><br><span class="line">      Blog: git@ 自己的IP :&#x2F;home&#x2F;git&#x2F;hexo.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>剩下的就是对服务器的搭建了。</p><h3 id="服务器准备工作"><a href="#服务器准备工作" class="headerlink" title="服务器准备工作"></a>服务器准备工作</h3><p>首先通过 ssh 连接服务器，如果你的系统是 windows，要提前安装 Xshell 或者 putty。我个人用的是 Xshell。</p><p>运行以下命令更新软件：</p><blockquote><p>sudo apt-get upgrade # 更新源<br>sudo apt-get update # 更新软件<br>sudo apt-get autoclean # 然后清除一下不用的软件</p></blockquote><p>接下来我们分别安装 git 和 nginx 并进行相关配置。</p><h3 id="安装-nginx-服务器"><a href="#安装-nginx-服务器" class="headerlink" title="安装 nginx 服务器"></a>安装 nginx 服务器</h3><p>hexo 本质上是一个静态网站，所以选择 nginx 做静态 http 服务器还是很合适的，加上轻量级这个服务器吧，我还不保准抗不抗压，所以就先运行 nginx 吧。</p><p>安装 nginx：</p><blockquote><p>sudo apt-get install nginx # 安装 nginx<br>nginx -v # 查看 nginx 版本<br>nginx -t # 查看 nginx 是否成功</p></blockquote><h3 id="配置-nginx-服务器"><a href="#配置-nginx-服务器" class="headerlink" title="配置 nginx 服务器"></a>配置 nginx 服务器</h3><p>对 nginx 服务器的配置网上教程很多，主要是/etc/nginx 目录下 nginx.conf 文件起作用。</p><p>我们看下 nginx.conf 文件，可以看到，最后有写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;_.conf;</span><br><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;_;</span><br></pre></td></tr></table></figure><p>其中 /etc/nginx 目录下包含 sites-available 和 sites-enabled 目录，sites-enabled 只是 sites-available 的一个软链接。我最后选择的就是直接改 sites-enabled 中的 default 文件。默认 index.html 位置在 /var/www/html 文件夹下。</p><p>此时访问<a href="http://www.xudongpo.cn">http://www.xudongpo.cn</a> 就可以看到 Welcome Nginx 了。</p><h3 id="安装和配置-git"><a href="#安装和配置-git" class="headerlink" title="安装和配置 git"></a>安装和配置 git</h3><p>最后文章需要通过 git 进行提交。<br>首先通过 sudo apt-get install git 安装 git 命令，并配置好全局 git 的用户名和邮箱，如下：</p><blockquote><p>git config --global user.name “your name”<br>git config --global user.email “your email”</p></blockquote><h4 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h4><p>由于本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以，需要一点设置：</p><p>创建 SSH Key。在用户主目录下，看看有没有.ssh 目录，如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开 Shell（Windows 下打开 Git Bash），创建 SSH Key：</p><blockquote><p>ssh-keygen -t rsa -C “<span class="exturl" data-url="bWFpbHRvOnlvdXJlbWFpbEBleGFtcGxlLmNvbQ==" title="mailto:youremail@example.com">youremail@example.com<i class="fa fa-external-link"></i></span>“</p></blockquote><p>一路回车即可。</p><p>然后在 ~/.ssh 目录中，找到 id_rsa 和 id_rsa.pub 两个文件，其中 id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。再 Github 中添加公钥就可以 push 和 pull 了。</p><h4 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h4><p>现在我们进入 /var/www/html 中，clone 下之前托管在 GitHub 或 Coding 上的博客源代码。</p><blockquote><p>git clone <span class="exturl" data-url="bWFpbHRvOmdpdEBnaXRodWIuY29t" title="mailto:git@github.com">git@github.com<i class="fa fa-external-link"></i></span>:DongpoXu/DongpoXu.github.io.git</p></blockquote><p>修改 /etc/nginx/sites-enabled/default，将 server 下的 root 字段值修改为 clone 后的博客目录路径。</p><p>修改后，重启 nginx 服务，否则看不到效果：</p><blockquote><p>sudo nginx -s reload</p></blockquote><h2 id="集成部署"><a href="#集成部署" class="headerlink" title="集成部署"></a>集成部署</h2><p>我想要的情况是，只要我在电脑上写好博客，hexo d，会自动将网站内容更新到阿里云和树莓派的 Git 仓库中，并自动同步到/var/www//html/DongpoXu.github.io 中去，</p><p>具体做法是，创建 git 用户：</p><blockquote><p>sudo adduser git</p></blockquote><p>在 /home/git 目录下创建裸仓 hexo.git：</p><blockquote><p>cd /home/git<br>sudo git init --bare hexo.git</p></blockquote><p>修改 hexo.git 的所有者和组权限：</p><blockquote><p>sudo chown -R git:git hexo.git</p></blockquote><p>获取本地机器 SSH 的公钥：</p><blockquote><p>cat ~/.ssh/id_rsa.pub</p></blockquote><p>复制公钥，将公钥写入 github 机器的 /home/git/.ssh/authorized_keys 文件中<br>这一步之前做过了，就不重复了。</p><p>在 /home/git/hexo.git/hooks/post-receive 文件中写入如下内容，没有的话需要自己创建(touch)一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash -l # 此处要依据当前的shell填写 bash 或 sh</span><br><span class="line">GIT_REPO&#x3D;&#x2F;home&#x2F;git&#x2F;hexo.git</span><br><span class="line">TMP_GIT_CLONE&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;DongpoXu.github.io</span><br><span class="line">#PUBLIC_WWW&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;DongpoXu.github.io</span><br><span class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class="line">git clone $GIT_REPO $TMP_GIT_CLONE</span><br></pre></td></tr></table></figure><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>www 文件夹必须要可读写</p><blockquote><p>sudo chmod -R 777 /var/www (一定要记得加sudo，不然要吃大亏)</p></blockquote><p>hooks 中新建的 post-receive 文件的权限也必须注意。</p><p>新建的 post-receive 文件不显示高亮的原因，touch 文件后，所有权是 root 用户，需要将文件所有者修改为 git 用户，并且提高权限：</p><blockquote><p>sudo chown git:git post-receive<br>sudo chmod +x post-receive 即可。</p></blockquote><p>之后提交博客，就会触发这个脚本，将提交到 git 库中的文件在复制一份到 DongpoXu.github.io 文件夹中。</p><p>此时访问 IP 或者域名，就可以看到博客文章了，但是不支持 https 访问。<br>所以我们还需要开启 ssl，需要给 nginx 配置 ssl 证书，这个证书我之前已经申请过免费的了，应该是到 2021 年。所以直接在阿里云 ssl 证书管理界面，下载相应的即可。有需要可以看我之前这篇文章<a href="https://www.xudongpo.cn/posts/a4734f/">nginx 配置 https</a></p><p>将 ssl 证书下载下来，俩文件，一个 pem 一个 key，在/etc/nginx 文件夹下创建 cert 文件夹，将 ssl 证书文件放入到 cert 中。</p><p>在 nginx 配置文件中，加入如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">listen       443 ssl;</span><br><span class="line">server_name  你的网站域名;</span><br><span class="line">ssl on;</span><br><span class="line">#root html;</span><br><span class="line">#index index.html index.htm;</span><br><span class="line">ssl_certificate      cert&#x2F;a.pem; &#x2F;&#x2F;.pem文件的地址</span><br><span class="line">ssl_certificate_key  cert&#x2F;a.key;  &#x2F;&#x2F;.key文件的地址</span><br><span class="line">ssl_session_timeout  5m;</span><br><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">#ssl_ciphers  HIGH:!aNULL:!MD5;</span><br></pre></td></tr></table></figure><p>此时 https 即可访问，重定向啥的就先不做了。没啥意思，之后有需要再搞。</p><h3 id="http跳转"><a href="#http跳转" class="headerlink" title="http跳转"></a>http跳转</h3><p>这个吧，之前文章有些，直接放链接就行了，很简单。</p><p><a href="https://www.xudongpo.cn/posts/a4734f/#http-%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0-https">http重定向到https</a></p><p>太久不写前端，基本功都没了，人的精力果然是有限的。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="ssh添加眼色"><a href="#ssh添加眼色" class="headerlink" title="ssh添加眼色"></a>ssh添加眼色</h3><p>ssh 连接后，进入的是 root 用户，其实也可以一直用 root，不过很多人喜欢创建一个个人用户，避免出现误操作导致的整个系统崩溃情况出现。</p><p>大部分 root 用户在 ssh 连接时候是没有颜色的。需要在 ~/.bashrc 中修改。</p><p>vim ~/.bashrc</p><p>找到 force_color_prompt = yes，将之前的#删除。</p><p>:wq 即可。</p><p>source ~/.bashrc 使配置文件生效即可。</p><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><p>ssh 连接后，root@后面有一长串 ID 号，这个是主机的名称。</p><p>看着很不爽，通过命令 hostnamectl set-hostname 主机名 修改即可：</p><blockquote><p>hostnamectl set-hostname XDP</p></blockquote><p>然后重启服务器。</p><h3 id="自动运行命令"><a href="#自动运行命令" class="headerlink" title="自动运行命令"></a>自动运行命令</h3><p>修改 /etc/profile 文件，在文件末尾加上，sl / cmatrix / screenfetch 等命令即可。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北京短途-财务审计记录</title>
      <link href="/posts/61865253/"/>
      <url>/posts/61865253/</url>
      
        <content type="html"><![CDATA[<p>这次出差超级累，比我去重庆连轴转 6 天都累，这是一种无力，心理上的疲惫，上次这样应该是高考了吧。</p><p>13 日晚火车出发去北京，这趟也跑了好几次了，偏偏这次就忘记带耳塞，周围两个大叔的呼噜声感人。我 11 点已经睡着了，还是被震醒了。锣鼓喧天，鞭炮齐鸣。幸好带了本《外婆的道歉信》，原计划是第二天回来候车时候看的，这不提前派上用场。坐在外面看书。呼噜之大，走到另一头都躲不掉。</p><a id="more"></a><p>早上 5 点充电、上厕所、洗漱。刚收拾完，列车员叫起床。就看到我老板从最边上的屋子出来了，那发型着实可乐。本来好好的油头变成了鸡窝。假装没看见，溜了溜了。</p><p>下车老样子，麦当劳。我问老板为啥不肯德基，还便宜。（麦当劳不爱吃，有点腻）老板没搭理我，可能是表示我一个蹭饭的哪那么多话。饭后出租走起。我这个晕啊，还赶上北京早高峰。我一晚上没休息好，又恶心又困，差点饭都吐了。那也不能吐车上啊，这老板还在呢，忍着吧。辗转到所里，专家已经提前到了，直接摆开文件开始审计。因为提前准备的不够充足，结局已然注定，没有通过，整个过程不细说了。</p><p>记录这次出差主要是想要针对回来路上和老板的一些对话做一些思考。免得过些日子又忘记了。之前做项目时带了三个师弟，我是有啥说啥的那种，很多事情好坏我都直接说，让身边的人避坑，惊醒啊。项目周期长，内容确实很繁杂，做的过程中也让我偶尔会有不好的情绪，之前也都做了表述。</p><p>回来路上，老板针对实验室学生、几个小老师的问题和我闲聊。问了问我的想法，能感觉到老板对我提的意见挺看重，或者说我提的意见他其实都明白，只是忙于无暇应付。</p><p>老板问我，“你说现在这学生不愿意干活，这么懒这是咋回事呢？”<br>我说，这主要是实验室很多时候，都是几个人干活其他人不干活。给学生更多时候的感觉就是不干活的也不会有差的结果，那当然不干活了~<br>老板说话也是耿直：“我们那年代，我当时带学生，那都是我自己干，那不干活要你干啥，都踢了。”说完可能感觉自己话太冲，问我在以前实验室的情况。<br>我说：“一样，我们也是抢着干活，一能学到东西，二能有些收入。”<br>老板想了想说：“对，之后给他们研二的发些补助啥的。”</p><p>过一会又跟我聊了聊实验室其他老师的情况，说龙哥总是闷头干，不跟他交流，我说龙哥他们是尊敬您，怕事情办不好让你失望。<br>老板说，“那时间都快到了跟我说没人干，干不出来。人都分给他了。”<br>我说，“这个龙哥确实跟您聊过，咱们实验室人员分的太散了，很多重复交叉的。总有借口不干活”，“还有最开始龙哥叫干活的，都找工作，他也没好意思继续叫，等感觉找差不多了，再问，还是找工作。当老师的面子都下不来，肯定不会继续叫了啊。”<br>老板一声长叹，包含着成年人的无奈。</p><p>整个过程其实我没聊到太多有营养的，但是路程6个小时呢，睡睡醒醒总是要想些事情，对于老板说把不干活的踢出实验室我倒是没当回事。但是这值得深思。踢出实验室，如果这个实验室是公司呢？那就是踢出公司，这个公司不要，大概率其他公司也是不要的。这种情况大多都具有普适性。</p><p>为什么我们读本科研究生那时抢着干活呢？难道说现在的孩子不知道抢着干活？我回电子学会一看，大家还是抢着干，我老大的活就是我的活；实验室的活就是我的活。没有灌输思想，没有洗脑，就是大家都是为了“未来太远，只争朝夕”在努力着。现在想来，这也许就是未来的旅途上志同道合的伙伴吧。</p><p>上次在北京出差中间和朋友聚了聚，大家都变了也都没变，眼里的光少了些，眼中的温柔多了些，无奈多了些，干劲少了些。生活也都趋于稳定，都不错值得我羡慕，想想这些生活都是拼出来的，抢出来的。哪里是坐着就天上掉下来的呢？</p><p>实验室两个小师弟出差回来后就开始躲小老师干活了，大家都不傻，都能看出来。人家在社会上打拼多少年了，谁又会计较？我也分别针对性格聊了几次，总的来说就是，小聪明用错了地方。活你不愿意干、你不会干可以跟老师交涉，老师不是法西斯，但是你不能不来，躲着能躲的出未来？</p><p>我也理解，心寒了，我也寒过，而且他们还有师兄就一直躲，躲成功了。有时候吧，也是心疼他们几个，偶尔也会想，就让他们这么躲着吧，混着混着毕业得了。不也挺好的么。</p><p>看开会期间老师像小学生一样被训，我也被呼来喝去一顿呵斥，我想想，这才是社会吧。你是干了200w的活，按照合同来，错了多少，我们就扣多少钱。多少成年人经得住，经得住了，就成功了。经不住了，脸皮薄了，吵起来了，闹起来了，字签了，钱就没了。</p><p>活着，谁都不容易。人间疾苦，在人间便要体验，谁又能甘之若饴，活着本来就是一项技能。</p><p>我静静的在这里坐着，学三年技术，并不能让我在这个世界活得很好，我刚来实验室很信任一个师兄，慢慢的接触的多了，越来越讨厌，总觉得言行举止处处虚伪，给老师面前一套背后一套，后来才明白，这才是成年人。那些小老师不知道么？大老师这么大年纪，看不透他为人？？我觉得概览不大。那为什么他们都满不在乎呢？是因为确实不在乎，你一个学生的小肚鸡肠，能影响的到什么呢？老师工资？老师项目？你不做有的是人做，甚至让你做你还不能不做，你毕业？还是得挂老师名。老师为何要在乎呢？</p><p>在乎的不过是受伤的人罢了。那围坐一圈，笑逐颜开，高高挂起。不由得想起马丁·内莫勒牧师的一段话：</p><blockquote><p>当他们来抓共产党人时，我bai没有说话，因为我不是共产党人<br>当他们来抓犹太人时，我没有说话，因为我不是犹太人<br>当他们来抓天主教徒时，我没有说话，因为我不是天主教徒<br>后来，当他们来抓我的时候，已经没有人能站出来为我说话了</p></blockquote><p>在象牙塔中向外窥伺的我，常常被成年人的世界所震惊，起初因为学位压力睡不着，慢慢的却因为背后的闲言碎语了。</p><p>幸好有几位长者陪我聊聊人生，总归没有走错了人生路，和学弟聊天多半也是想结个善缘。不过还是要反思自己，闲事勿论人非，道理总是伴随着事情，免不了被捕风捉影。希望以后的创作不再随意，能更加提炼，给后来的人一些人生经验。</p><p>想留一个好的墓碑简历，并一直为之努力。</p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 出差记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问问自己什么是幸福</title>
      <link href="/posts/bd9ad1d5/"/>
      <url>/posts/bd9ad1d5/</url>
      
        <content type="html"><![CDATA[<p>做不到日三省，所以阶段性对自己进行反思。</p><p>我总是会问自己，什么是幸福？幸福是有你爱且爱你的人？幸福是成功？幸福是更多的金钱？或者更多的朋友？总觉得好像是又好像不是。那考虑下，让我们觉得不幸福的因素是什么呢？我认为是满足感。</p><p>之前在网上就幸福看到过一个哲学问题，很多哲学家喜欢问一些极端的问题，比如：“一头只知道吃喝睡觉的快乐的猪和一个思考人生的痛苦的哲学家，究竟谁更幸福？”这个问题想要表达的是，肤浅的快乐不值得一提，深刻的思考才是值得追求的。</p><a id="more"></a><p>我认为，对猪来说，它是幸福的，因为它需要的就是吃喝睡觉，它的现状无忧，即使可能面临进屠宰场的危险但不自知，是满足的；对于哲学家来说，他思索人生，甚至引领人类未来的方向，所以哲学家往往纠缠在自己心灵的种种羁绊中，向往心灵的自由却不可得，是不满足的。</p><p>并不是为了总结说，猪幸福，哲学家不幸福。而是为了得出，人们为什么会不幸福。因为人有思维，有追求，有理想。过于远大的理想和过于繁杂的思维就是会让人不幸福，这是正常的。</p><p>身边就有很多小朋友，你会觉得他们每天过的都很痛苦，或默不作声，或唉声叹气；每每有些事情稍不顺心，就会觉得天塌地陷。让心看在心里不由得想远离。每个人成年人，每个人，都承受着或多或少的痛苦，但是很少有人可以互相理解。</p><p>鲁迅先生写过：“人类的痛苦并不相通，我只觉得吵闹。”原文这样写道：</p><blockquote><p>楼下一个男人病得要死，那间壁的一家唱着留声机；对面是弄孩子。楼上有两人狂笑；还有打牌声。河中的船上有女人哭着她死去的母亲。人类的悲欢并不相通，我只觉得他们吵闹。</p></blockquote><p>这并不是鲁迅先生的冷漠，而是对整个社会的弱者怀有的一种冷峻的悲悯。“人类个体在感情之间无法做到感同身受。”夫妻，父子之间都常常无法相互理解，更何况外人。</p><p>所以，对我来说什么是幸福？</p><p>伴随着大学之后，我对知识的渴望空前之高。什么都想去了解，去探索。慢慢的眼里看到的东西越来越多，脑海中想的也越来越多。曾一度因为见识到广阔的世界而闭上心门。</p><p>慢慢的接触的事情多了，懂得的道理也多了，现在所想的幸福，不过是一种简单。</p><p>周六偶尔加半天班，下午牵着妻子孩子的手，去游乐园，或者图书馆，我们都这么爱看书，想来我们的孩子应该也是爱看书的~看累了逛逛美食街，吃点小吃，买些零食，看到新奇的玩意儿买点。周日拜访一下老人。再约几个朋友们聚聚。</p><p>可以有时间学自己喜欢的东西，学一门乐器，学一学书法。钱当然是多点好，但不强求，一家人多锻炼身体，保持乐观的心态。可以有底气对不喜欢的东西说 No，可以拒绝想拒绝的事情。</p><p>幸福的命题很大，但我想，一起并肩走过，所以，好好爱自己，好好爱家人，爱生活，还有，爱笑~~</p><p>快乐的人容易成功，而不是成功才能变得快乐。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全栈or嵌入式</title>
      <link href="/posts/16017506/"/>
      <url>/posts/16017506/</url>
      
        <content type="html"><![CDATA[<a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派-EE工程师的玩具</title>
      <link href="/posts/9def614d/"/>
      <url>/posts/9def614d/</url>
      
        <content type="html"><![CDATA[<p>树莓派的定位并不是一块用来做嵌入式开发的开发板，而是一个廉价并且高性价比的可以在一定程度取代 PC 并且硬件接口更丰富的软件开发和使用平台。有人可能会问，树莓派有 GPIO 接口，可以接很多硬件，怎么会是一个软件开发平台呢？那么我要问你 PC 有 USB 接口，可以接很多硬件，它是一个硬件开发平台吗？树莓派的 GPIO 接口，和 PC 的 USB 接口，没有本质的区别，都是用来连接硬件的，只是接口更底层一些。</p><p>那么这样看，我之前用的 arm11 开发板，是否也是软件开发平台呢？答案是否定的，这要看目标用户。我们可以把目标用户简单分为三类：硬件开发者、软件开发者和使用者。硬件开发者主要是设计、改良硬件和为新老硬件编写驱动程序等等，软件开发者主要是在现有的硬件下开发软件（通常不包括驱动程序），使用者使用现有硬件和软件而不进行开发。</p><a id="more"></a><p>我之前使用的 arm11 开发板，主要的目标用户是硬件开发者和软件开发者（可以不严谨地统称为嵌入式开发者），几乎没有使用者，因为对于没有开发经验的人，用户体验是很差的。而树莓派的主要目标用户是软件开发者（和嵌入式开发者有重叠但并不多）和使用者，用户体验很好，但几乎没有硬件开发者，因为树莓派的硬件相对比较封闭，不销售单独的 SoC 和其他芯片，硬件资料也并不是很完善，在硬件层面很难 DIY（对很底层的软件开发者也存在类似的问题）。</p><p>那么目标用户的不同，就导致树莓派虽然看起来很像其他的 arm 开发板，基本也能用和其他的 arm 开发板一样的方式使用，性质却有很大的不同。</p><p>这也解释了为什么很多嵌入式行业的软硬件开发者并不喜欢或者看好树莓派，甚至对它很不屑，而很多对嵌入式了解很少的开发者以及使用者会对树莓派趋之若鹜。</p><p>那么我为什么会对树莓派感兴趣，而对之前那块 arm 开发板无感呢？最主要的问题并不是用户体验差，而是软件方面的配套环境不完善。最重要的是 Linux 内核版本支持。官方只提供低版本的 Linux 内核（2.6 系列），如果用这个内核来配合最新的发行版使用，几乎是不可能的，会遇到许多问题，一方面是这个内核缺少很多最新发行版使用的特性，另一方面是很多硬件方面的支持不只是替换内核文件和内核模块的事情（比如有些工具也需要移植），替换起来也麻烦。如果想使用更新版本的内核，需要打各种补丁以及自行修改代码，虽然硬件的资料比较齐全，理论上可以实现，但即使是经验丰富的嵌入式开发者也很难搞定，也没有人做好了提供给别人使用。这就导致几乎只能使用官方提高的老旧 Linux 镜像（或者其他古老版本的发行版）。而这个 Linux 环境几乎毫无用户体验可言，最新版本的软件很难安装上（几乎都需要自己编译，而且容易出现编译错误），常见的 USB 外设（比如摄像头、无线网卡、蓝牙）也很难驱动起来（运气好的话，可以从其他地方找来驱动代码，修复很可能出现的编译错误）。</p><p>而树莓派的软件环境是很好的，基本可以使用最新的 Linux 内核和发行版（比如 Archlinux），并且有很多人为这个平台开发软件，用户体验有质的提升。即使是对嵌入式开发一窍不通的开发者或者使用者，也可以用树莓派做他们想做的事情。</p><p>另外我发现一个有趣的事情，折腾树莓派的人群（至少在国内），和（曾经的） Linux 桌面用户群体很相似（我曾经混迹于 Linux 桌面用户社区，很多人折腾桌面美化、系统配置、工具优化、写小脚本等等，玩 Linux 而不是用 Linux），他们主要是使用者，可能稍微会一些脚本或者其他编程语言，但并没有独立开发完整应用程序的能力和意向。这和嵌入式开发者人群是很不同的。</p><p>综上，树莓派和其他 arm 开发板的本质区别在于目标用户不同。树莓派的目标用户主要是软件开发者和使用者，而其他 arm 开发板的主要用户是硬件开发者和软件开发者。这也是树莓派能够吸引更多用户的一个重要原因。</p><p>说到树莓派，很多人喜欢把它和 Arduino 对比：前者性能高但软件结构复杂，后者性能有限但容易上手。</p><p>当要开始一个个人项目的时候，到底哪种微型计算机才合适？</p><p>首先要考虑的就是成本问题，如果真的是要做项目，那同样能实现的必定是越便宜越好，<br>Arduino 也就10 块钱，价格上满满的优势。</p><p>树莓派和Arduino看起来很相似，都是带控制器的小型电路板，但它们完全是属于两种不同的设备。</p><p>树莓派是基于微处理器的硬件平台，核心是 Broadcom ARM 架构 CPU，可以完整运行 Ubuntu、Windows 10 IoT Core 等操作系统，甚至板载了 USB、以太网和 HDMI 等输入输出设备接口，能外接键盘显示器等。</p><p>Arduino 则是基于微控制器的硬件平台，核心是工业控制领域常见的 ATmega 系列芯片，只能执行提前烧录进芯片的程序。比如常用的 Arduino UNO 采用的是 ATmega328，只有8位数据宽度，16MHz 晶振时钟。</p><p>正因为树莓派搭载了操作系统，所以它的软件复杂度要高得多。比如最简单的点亮一盏 LED 灯，在树莓派上你需要安装操作系统，安装 GPIO 程序库，编写代码，配置开机自动执行等。Arduino 上则极其简单，用官方提供的 IDE 工具编写 C 代码，通过 USB 烧录进芯片，开机即可运行。</p><p>总的来说，树莓派是全功能的卡片电脑，而 Arduino 是剪裁用于特定用途的微控器。对于一些简单的场景，这两款硬件都可以胜任，但还是有一些区别：如果有网络通信、图形图像、大计算量的需求，就只能选用树莓派；如果需要精细控制 GPIO，比如模拟 spi 协议和传感器通信等，则选用 Arduino 会更简单。</p><p>但是在掌握了一定的编程能力之后，完全可以联通两种硬件，树莓派做上位机负责管理系统，Arduino做下位机负责控制其他硬件，实现优势互补。</p><p>网上总有很多说法，树莓派没啥用，就是个玩具。没啥用我不认同，是个玩具我认同。</p><p>我拥有第一个树莓派挺晚的，刚到电信院这边实验室时候，老板给了些经费买一些学习用品，我选择了树莓派，当时有个师兄，也买了一样的，说要跑机器学习，也是个妙人。</p><p>树莓派能干啥，我最开始也一直没搞明白，我知道它能搭建博客，我就把自己的博客在树莓派上搭建了一个，一直开着，但是只能局域网访问，广域网需要花钱。正巧阿里云各种学生活动，一会免费赠一会9.9一年，我就这么断断续续一直走阿里云了，后来树莓派就作为本地云备份了。每次push时候输入密码我才想得起来它。算起来也是吃灰了。</p><p>这段时间一直忙项目，时间断断续续，文章更新也极度不稳定，健身也不稳定，不过偶然把树莓派的亚克力外壳掰折了，作为强迫症的我忍不了啊，这必须得拿出来捯饬捯饬了。</p><p>首先想到的当然是自己设计个壳子，淘宝做出来好几百，算了，自己开PCB板子，做顶盖，IO做支持，边上弄铜柱支撑，50。作为垃圾佬的我，还是自己拿个万用板焊吧。顶盖一拆，谁都不爱。<br>焊接了一个IO扩展，相当的丑了，奈何好用就行。在实验室废弃品箱子里找到一个不用的LCD1602，那不错，拿出来接上，用4bit模式，驱动代码网上现成的多的是，懒得写。代码简单，调用下os或者command，读取一下系统信息。然后显示在lcd102上。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10月项目记录</title>
      <link href="/posts/67ed42aa/"/>
      <url>/posts/67ed42aa/</url>
      
        <content type="html"><![CDATA[<a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32F4和F1有什么不同</title>
      <link href="/posts/96ec7eb0/"/>
      <url>/posts/96ec7eb0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间很宝贵，别用来伪装</title>
      <link href="/posts/781b2591/"/>
      <url>/posts/781b2591/</url>
      
        <content type="html"><![CDATA[<a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你为什么要读研呢</title>
      <link href="/posts/7cf4c599/"/>
      <url>/posts/7cf4c599/</url>
      
        <content type="html"><![CDATA[<p>博客现在是陆陆续续更一下，更多的时候是记录心情了，多数还是放在自己的小服务器里。云服务器也快到期了，又得续费了。</p><p>虽然开题完事了，休息没两天，老板就带着去北京出差，参加一个答辩会议，因为老板项目多是军口，我也没法旁听，整个出差其实就是当了回拎包仔。</p><a id="more"></a><p>正巧三哥前段时间来长春出差，叫上大哥，带着女朋友一起吃了个饭，大嫂没来挺遗憾~</p><p>吃饭期间大家也是聊聊过去，聊聊现在。三哥说，准备换个工作，现在这个工作待遇挺好，也是国企，就是出差太多，想求个稳定。大哥倒是看得洒脱，大嫂条件不错，也不嫌弃他，生活一如既往规律。不过言语里都是对学校的向往，我呢则是对校外充满向往。</p><p>算算在这学校也 7 年了，我今年 24 岁，接近 1/3 是在这里度过的。</p><p>假期时候在家也总和爸妈说，早知道互联网这几年发展这么迅速，当年毕业就应该去工作呀，那现在可不得深圳付个首付了。爸妈也是边听边附和，大概现在的我在他们眼里，已经是一个很有主见，可以很让他们放心的孩子了。</p><p>读研有没有用？<br>还用问么，读研当然有用，读博也有用，读博士后更是了。</p><p>但是要读么？？？</p><p>不知道什么时候，我开始和父母产生距离感。有时候也会想，这些距离感是怎么造成的？什么时候开始的？</p><p>前几年每年到家，都会听爸妈翻来覆去的唠叨好好学习之类的。也总要唠唠别家孩子，王阿姨加孩子在县里什么单位，李阿姨家闺女老公在市里什么什么的。我开始时总觉得烦躁，慢慢的便习惯了，偶尔附和两句，权当练自己的养气功夫了。爸妈可能对我这死猪不怕开水烫的状态很不满意，聊着聊着，从县里的职员慢慢的等级就高了，不是市里大官就是省里干部。聊的我面红耳赤，羞愧难当。爸妈也是久经沙场，知道温水煮青蛙的道理，旋即就是好吃好喝的一顿安慰。</p><p>以上纯属玩笑。</p><p>距离嘛，上大学时候还没有，记得清楚，刚上大一，那时候我带的还是小灵通。学校有专门的电话卡，50块钱办了一张。可以打很久很久。几乎每天回到寝室，例行公事需要跟爸妈汇报一下学校的状况，今天上了什么课呀，和室友们一起干了啥啊，食堂饭菜好不好吃等等。总是要吐槽一下东北的大米饭，表露一下对家乡面食的思念。<br>（我是爱吃面的，可不是没了面活不成，不爱吃米，吃起来也能吃三大碗。大概吃面能让我感觉，漂泊在外，却也有根。）<br>都说西北人恋家，我是不信的，电话打了半个学期，我就撒欢不知道去哪里了。本科又去实验室去的多，暑假也不回，一年回一次也没有感觉到隔阂。即便吵架了。爸妈也是说，儿子长大了。</p><p>说说人成长这件事，成长就是长大，长大其实都是经历。很喜欢郭德纲说的一段话：</p><blockquote><p>记者：活得明白是需要时间的事吧？<br>郭德纲：不需要时间，需要经历。三岁经历一件事就明白了，活到九十五还没经历这个事他也明白不了。但是，吃亏要趁早，一帆风顺不是好事。从小大伙娇生惯养，没人跟他说过什么话，六十五岁谁街上瞪他一眼，当场就猝死；从出生就挨打，一天八个嘴巴这到二十五岁，铁罗汉、活金刚一样什么都不在乎。吃亏要趁早。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在繁杂中寻一份简单</title>
      <link href="/posts/57f09250/"/>
      <url>/posts/57f09250/</url>
      
        <content type="html"><![CDATA[<p>2020年10月21日，博士开题完毕，21日休息，22日中午大龙哥让我23日帮代班，然后代班至今日。</p><p>过程中和两名小师弟聊了不少，其中一位因为心思比较敏感，也是我长久关注的对象之一。</p><p>环绕整个聊天过程，最多的就是，学习是否有用？当下的学习是否有用？我要不要换个环境去学习？怎么才能赚到钱？</p><a id="more"></a><p>针对这几个问题我做了一些思考，但是因为这几日的繁杂却也让我自己失去了些自我，有些思索并没有记录下来，今日做一下回忆。</p><p>最近在读王小波的《沉默的大多数》，初读之时其实十分晦涩，总有一种在读八十年代书籍的感觉，像是读鲁迅译文一般。<br>书中讲的道理蛮不错的，大意就是我受过这个苦，那你就不能轻易的用这个来骗我。因为文化大革命的事情主人公受过挫折，便选择不再相信，选择做沉默的大多数。<br>作者举了很多例子来论证那个时代的仁义礼智信。值得精读，之后我再找时间写一写。</p><p>单论我自己对于社会的认知，我觉得还非常匮乏，但是，我坚定的认为学习是有用的，非常有用。不说学习可以改变生活，因为这不具有普适性，也不说学习会让人感到快乐，因为也总有个例，单说人类从树上到树下，便离不开学习。</p><p>但是学习是什么呢？？？这一纸文凭？那我坚定的告诉你，学习不重要。不管这个世界是什么样的，我都要告诉你，你所认为的学习（一纸文凭）不重要，即使你因为文凭生活窘迫，即使你因为文凭晋升受阻，我只想说，那一定是你的能力不行，你的格局就在这一纸文凭中。</p><p>我认为学习是什么，我小学的时候，在我镇上上学，从家到学校15分钟路程，转两个弯，上一个坡就到了，每日跟着老师念念课文，做做数学题。考试成绩不高不低，也算不得尖子生。爸爸在隔壁县城上班，去隔壁的县城就算进城了。回想起来，我童年所能看到的就是一个被迷雾包裹住的城市，没有地图概念，没有大小，仅仅有我走到最远的边界。有时候周五下午的会跟着几个小伙伴走往上学的反方向，那是小小心灵对未知的一种窥探。也许只是我个人性格内向的问题。</p><p>学习不仅仅是为了拿文凭吧。学习可以让我们保持积极向上的心态，可以锻炼我们的思维能力。学习有太多的好处了。我们到老都离不开学习。而大学文凭，是我们人生道路上的一种用来证明自己的学习成果和学习能力的途径。相对于其他途径来说，上学是比较稳妥的一种。当然，如果你从小就在某个方面展现了特殊的天赋，完全可以往这个方面去发展。人生有很多种不同的道路可以选择，而上学拿文凭只是其中一种极具性价比的方式。即使你想在其他方面取得成功，但是很多时候也需要有受过一定的教育作为基础。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去敲幸福的门</title>
      <link href="/posts/48100e56/"/>
      <url>/posts/48100e56/</url>
      
        <content type="html"><![CDATA[<p>今天是 2020 年 09 月 29 日，是我人生中的又一个阶段性胜利，拎着沉重的东西一路上也没感觉什么，东西放下，靠在实验室的椅子上，忽然有些恍然，不知道该如何纪念，便发个文章记录一下。</p><p>忙碌过后，走在夜深人静的路上，脑海中浮现过的是电影《当幸福来敲门》。从 08-22 日下午开始，我就开始了忙碌的生活，每天压缩着自己的生活时间，也是这时才慢慢明白了什么叫疲于奔命，明白了父母的辛苦。</p><p>其实生活中很多事情都不尽人意，不是每件事情都付出有回报，写下这些，只是想让我的生活做到有迹可循。</p><blockquote><p>如果幸福不来，你就去敲幸福的门。</p></blockquote><p style="text-align: right">—— 《当幸福来敲门》</p><a id="more"></a><p>《当幸福来敲门》应该是我去年看的电影，现在回想起来，依稀只记得，奔跑、无奈、哭泣和成功。也是在这个时间段，我经历了很多我曾经意想不到的事情，结识了贵人，看到了闲人，也了解了小人。那么，在心境沉浮之时，如何能让自己坐怀不乱呢？</p><p>人的一生都是在不断成长的，B 站的一些 UP 主经常说，人要走出自己的舒适区，我最开始思考这个事情的时候，应该是在我大二第一次受到挫折的时候，第一次付出一年时间准备，在比赛没得到期待的结果之后，我整个人陷入了萎靡不振，那时候没有意识到是在成长，用近十天的颓废来缓和痛苦和压抑，所幸最后偏离人生轨迹不大，也算是有所收获。现在才明白，那是命中注定的第一次走出舒适区，去刺痛，去反思，去鞭策自己，如果当时合理利用，也许现在也可以结出让我羡慕的花朵。</p><p>老一辈人总说，吃得苦中苦，方为人上人。也有很多理念会提倡吃苦，我不这么认为。我认为如果一生可以顺丰顺水那为什么要吃苦，被动吃苦既不必要，也不重要。重要的是是主动吃苦，为什么主动吃苦，是因为很多人的一生中，一定会遇到不同的各种各样的挫折。而主动吃苦，虽然身体劳累，但是心中却明了，知道自己为什么要吃这份苦。所以吃得苦中苦，是为了让我们可以对各种挫折得心应手，不至于在挫折过来的时候被打倒。</p><p>人最重要的品质便是顽强，是永不屈服。虽源于生活，但不局限于生活。每个人都会遇到挫折、困难，能否正确对待，又能否在面对这一切时，平静的想办法，能够主动出击来打败困难呢？</p><p>那么什么是挫折呢，其实我很长时间都不明白，我一直以为挫折就是：早上上学路上摔了一跤，坐地上哭，然后上学迟到，被老师罚站，课没听进去，题不会做，下课问老师，讲了半天，没赶上食堂饭菜，饿着肚子上体育课，打篮球输了。大概我觉得生活中所有的不顺就是挫折了，知道后来高考失利，又没有那种重读的精神，我才明白，啊，这才算挫折，以前那些都是过家家。</p><p>等到了大学，我也是傻乎乎的，寝室有一堆哥惯着我，也没太接触过身边的鸡毛蒜皮、闲言碎语，觉得生活好像一直都很顺畅。就连周末一起去打工兼职，都可以轻松一天一百大洋，回想小学初中高中一路读上来也都是顺风顺水。</p><p>可是慢慢的，不知不觉的，离家时间越来越长，读了研究生，原本路上的人都各奔东西了，也有了新的朋友，生活的感觉这时候慢慢地显现出来，像是一直深埋在皮肤下面，乍一出现非常不适，久而久之却也习惯了。这样才慢慢的像生活，十几年一成不变的生活，在我考上大学的那年就该结束了，我没有意识到，晚了三年才感觉到成长，感觉到生活，感觉到变化。你的强大由你自己决定，可是却无法决定别人的目光。<strong>即使《泰坦尼克号》这样的电影，都有人会给一星，那我又有什么好奢求的呢？</strong></p><p>忽然想起之前发的说说，还有之前时间充满负面的文章，忙过之后大概才明白，这就是成长了。</p><blockquote><p>我坐在角落，看他们以夸张扭曲的姿态高谈阔论，证明着他们高尚的情操，以此慰藉他们博爱的心，继而努力奋斗，成为对这个世界有用的高端人才。<br>我在想，他们也许不曾想自己的大肆宣扬，会对他人有什么影响，看他们情绪激动，义愤填膺，用手挡在眼前，讲述着他们的所见，成就着仿若两小儿辩日的喜剧。<br>我站的地方又暗了一分，与他们圣洁的辩论桌相比显得格外的肮脏。我站起身，拍拍身上的尘土，发出了声音，他们转向我，冲我问好，冲我微笑。那目光透过手掌，穿过黑暗，幽幽的光，却炽的像火，带着风呼啸而来，意图将我吞噬。<br>我避过这道目光，不经意瞄到了身后，我急忙转身，那一瞬间，那温暖的淡淡的光将我包裹，原来我所处的不是角落，在我的身后，有很多可爱的人儿捧着蜡烛，互相照明。<br>我想，<br>若可以，我也想肆无忌惮挥起巴掌，可我却选择了做承受者，不是因为我怯懦，是因为我向他们承诺，“没事，这些事情交给我。”<br>若可以，我也想整日宣扬自己的学识，去诋毁他人的成果，可我没有，因为我知道莫见乎隐，莫显乎微，君子慎独。<br>诚其意者，勿自欺。<br>所历像极了新闻中看到的校园霸凌，以往我每每看到，都义愤填膺。曾想过如果身边真的有，我必然是第一个站出来的，所幸我也是这么做的。<br>午休时躺在床上，忽然才意识到，生活中很多事情都是你的掣肘。虽不惧，却理由颇多，无他，有心。<br>愿曾所敬之人，兼则明；愿曾所念之人，思所行；愿所思之鸿雁，能幸福安康；愿心头一株清莲，勿念勿扰终结红豆。愿那些青青红果，终如当年誓言。<br>一时感慨，记录下来，因有爱有念，便发个朋友圈。人非圣贤，又孰能无过。<br>这才渐渐懂得了成年后的无奈。也借此机会向我的父亲道歉，爸爸，对不起。<br>我非圣人，心情不佳，也总会起伏。母上大人算了卦，柒月我难熬，虽有文几许，但不便更新，铁粉几根，但请见谅。</p></blockquote><p>不过还是得说一句，生活不易，去你妈的。</p><p>当我每天准时的像个机器时，就会换来别人的青睐，奔跑，大概就是人类不屈服的证明了。<strong>眼泪是弱者的勋章，但也是强者的奖励。</strong></p><p>克里斯和儿子被房东赶出来时候，在一间公厕中，在接二连三的撞击声中度过了一晚，那时克里斯哭了。那是他作为一个父亲的委屈，懦弱。在他经历了 6 个月的考验期后，主考官对他说：“一切似乎看起来不是那么容易，是吗？”他再一次哭了，这一次是成功的哭泣，是他熬过了一切，就像马拉松一样，最终到达了重点。</p><p>在原地等着，幸福不会来找你。如果你有梦想，你就要去追，谁都不可以说不，谁说都不好使。</p><p>身边的闲言碎语，送它个桃子吃就好了。</p><p>幸福随时可能敲你的门，当面对艰难险阻时，是懒惰、无能、逃避还是仰起头迎上去。明天的成就却决于今天的积累，没有人能够侥幸成功。如果幸福不来呢？那就去敲幸福的门。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《沉默的巡游》读后感</title>
      <link href="/posts/4ecb3943/"/>
      <url>/posts/4ecb3943/</url>
      
        <content type="html"><![CDATA[<p>入校前的隔离期间，枯燥单调。早上 9 点醒来，洗漱完毕去门口的羊汤馅饼吃点早餐，然后溜达一会，回到住处学学数据结构，下午算比较有意思的了，去书店看看书，我觉得我成家之后最幸福的事情就莫过于“好书与佳人皆相伴”了。</p><p>经常有朋友问我，你喜欢的作者是谁，每到这种时候都要多想一会，好像自己的书都白看了。记得以前高中时候，每周去看书，那时候都是直奔图书大厦（应该是 3 楼）的青年文学区。大多时间都是看 <strong>@郭敬明 @落落 @笛安 @七堇年 @安妮宝贝</strong>。要么就是 <strong>@金庸 @古龙</strong>，偶尔也会看 <strong>@余华 @米兰·昆德拉</strong> 我一直是个记性比较差的人，读了好些书，有些也总是记不住情节，可能是因为太年少，遂浅尝辄止了。<a id="more"></a></p><p>上了大学，开始时都是学一些新的知识，慢慢的也会常看书，看的都是专业类的书籍。再后来找到些时间慢慢的又接触一些文学类的书籍，<strong>@村上春树 @东野圭吾 @王小波 @余华</strong>，也看过很多不同作者的代表作。但是让我非常感兴趣的作者还是东野圭吾和村上春树。</p><p>我对日本没有偏见，但是也谈不上喜欢，但是对这个民族的很多事情发自内心的敬佩。日本很多作家作品给我的感觉就是细腻，很像我初高中时看的小说那样细腻，但是却没有过度的细腻，点到即止。就像日本的影视剧中，对于普通生活的描绘往往很精细简单，但是又不会让我感觉到单调乏味。可能是某个点对上了吧。</p><p>抱歉又写了一堆题外话，怎么说呢，我都算不上是一个业余作家，只是偶尔写写博客记录一下生活，可是生活哪有我想象的那么如愿。开学前忙项目，因为博士开题愁的整日睡不着觉，总是有些琐事繁杂使得整个人如同戴着镣铐；实验室呢，又一点也不像我以前实验室的样子，一个人带领的勾心斗角真的可以让很多人崩溃，我其实不是个很想去合群的人，现在可以和同屋子的小伙伴们相处甚佳，也有几个可以交心的朋友，其实很不容易啦。也许一开始就走错了片场，但是生活就是这样，即使走错了，也只能一步步走下去。希望自己可以活得洒脱，不去在意不相关人的眼色，希望我可以随着我的努力获得相应的幸运，让自己身边人过的更好。</p><p>好啦，这又是时隔一个月的读后感。准确的说，读之后感是感了，但是没有写哈哈哈。</p><p>《沉默的迅游》，一篇我看到一半怒火中烧，想骂警察的书（就我这小暴脾气，现在生活中这些屁事真算我大度了）。</p><p><strong>书籍推荐度</strong> — 书迷：5 星，普通读者：3.5 星</p><p>正巧最近看到了罗翔老师的法律课，其中讲到：</p><blockquote><p>法律是对正义的向往，当我们厌恶黑暗的时候，那就一定有向往光明的时候。人呢就是很复杂，人有天使的一面，就也有着魔鬼的一面。所以说，君子慎独。</p></blockquote><p>我算不得书迷，只是爱看东野圭吾的书，便只简单说说感官，叙事还是多线开始，不同的人物角度进行讲述。</p><p>莲沼宽一是因为父亲是警察，经常跟他炫耀一些逼供的过程，让他了解到，只要在犯罪后保持沉默，就可以让警方无能为力。只要拖到这个案件失效即可。在这样的前提下，徐徐讲述了三起命案，前两起命案的受害人都是女性，第三起是之前案件的犯罪嫌疑人莲沼宽一。前两起案件及其相似，通过各种证据佐证，甚至是嫌疑人莲沼宽一的默认，让受害者家属都认定他就是罪犯（我也这么认为）。前两起案件的相似点：弃尸罪和毁尸罪的时效都已经过了，也没有找到杀人的物证。所以都不能给嫌疑人定罪。</p><p>第一起案件当时没能给莲沼宽一定罪，通过缄默权逃脱了法律制裁，甚至还因为“蒙冤”令他获得了一大笔的赔偿，更是给他了第二次作案的机会。看到此处我真的是很庆幸我们国内的法律。<strong>法律带给我们的是公正和正义，是这个社会所追寻的。</strong>第二起案件的死者也是一个小女孩，莲沼宽一作为嫌疑人竟然大摇大摆的跑到受害者家属面前索赔，并表示自己只要一句话不说就可以无罪释放。最终还是有人如我所想的等不及这不完善的法律的制裁了，直接替天行道了。那么到底采用了什么样的作案方式？又是什么人做的呢？这才是悬疑类小说最精彩的部分。</p><p>虽然我更喜欢的其实是书中那种细腻的描写。从多个角度去描绘事件，引起人的共鸣。一个幸福开心快乐阳光的小女孩遭到这样的毒手，作为读者的我都恨不得去手刃仇人。正如我所想的一样，小女孩的亲人朋友们一起完成了这次作案。</p><p>其实在看到第二起案件的时候，我主观上已经肯定了凶手就是莲沼宽一，甚至我知道东野写完的结局肯定不会是这样，但是就是偏执的肯定凶手的身份。<strong>因为我希望，我希望恶人终受到制裁，我希望善良的人终有幸福，我希望悲伤的人终会释怀。</strong></p><p>案件的实施过程是多人作案，对作者来说这也是一次新的挑战，缜密的时间线，毫无问题的逻辑。只是最终赔上人生的报复让我觉得不值得，受害者的遭遇让我觉得惋惜，人和人之间的不理解让我觉得痛心。</p><p>书名的“沉默”在整个热闹的巡游过程中显得别有深意，“沉默”是嫌疑犯用来逃避法律追踪的武器，被用的出神入化；“沉默”是井木的朋友圈子为了爱、为了守护、为了复仇做出的无声的抵抗，被用的辛酸且无奈。</p><p>想想也是，生活中充满了这样的情况，本可以仗义执言，却因为想要守护的，被迫所沉默。</p><p>因为写作时间的不固定，在此和寥寥无几的粉丝道个歉，还有些文章有很浓的个人情绪在里面，就不发出了。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 沉默的巡游 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表-04</title>
      <link href="/posts/5031ad27/"/>
      <url>/posts/5031ad27/</url>
      
        <content type="html"><![CDATA[<blockquote><p>声明：本文为学习记录，不做商业用途，<strong>如果有侵权内容，请联系我立即删除</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表-03</title>
      <link href="/posts/11288530/"/>
      <url>/posts/11288530/</url>
      
        <content type="html"><![CDATA[<p>首先我们从反转链表这个经典问题开始。</p><h3 id="经典问题-反转链表"><a href="#经典问题-反转链表" class="headerlink" title="经典问题 - 反转链表"></a>经典问题 - 反转链表</h3><p>解决方案是<strong>按原始顺序迭代节点</strong>，将它们<strong>逐个移动到列表的头部</strong>，用一个例子来说明这个算法。</p><h4 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h4><p>例子如下： 23 -&gt; 6 -&gt; 15 -&gt; Ø，节点 23 是原始的头节点。</p><ol><li>首先，我们将节点 6 移动到列表的头部；</li><li>然后，我们将节点 15 移动到列表的头部；</li><li>现在节点 23 的下一个节点是空。因此，我们停止这一过程并返回头节点 15。</li></ol><a id="more"></a><h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><p>在该算法中，每个节点<strong>只移动一次</strong>，因此，时间复杂度为 _O(N)_，其中 N 是链表的长度。<br>只使用了常量级的额外空间，所以空间复杂度为 _O(1)_。</p><p>这个问题是在面试中可能遇到的许多链表问题的基础。</p><blockquote><p>还有其他的解决方案，您应该熟悉至少一个解决方案并能够实现它。</p></blockquote><h3 id="题目：反转链表"><a href="#题目：反转链表" class="headerlink" title="题目：反转链表"></a>题目：反转链表</h3><p>要求反转一个单链表</p><p>示例:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><p>进阶：使用<strong>迭代或递归</strong>两种方法反转链表。</p><h4 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h4><p><strong>个人理解</strong>：<br>假设链表为 1 -&gt; 2 -&gt; 3 -&gt; Ø，我们要改成 1 &lt;- 2 &lt;- 3 &lt;- Ø<br>在遍历链表时，将当前节点的 next 指向上一个元素。由于单链表没有上一个节点，因此必须实现存储上一个节点。<br>在更改引用之前，还需要另一个指针来存储下一个节点。</p><p>代码如下(C++):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode * curr&#123;head&#125;, *prev&#123;<span class="literal">nullptr</span>&#125;;  <span class="comment">// 定义一个空的 prev 节点，以及指向头部的 curr 节点</span></span><br><span class="line">    <span class="keyword">while</span>(curr != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">      ListNode *nex = curr -&gt; next;         <span class="comment">// 定义一个临时节点，指向 curr 的 next</span></span><br><span class="line">      curr -&gt; next = prev;                  <span class="comment">// 将 curr 的 next 指向prev</span></span><br><span class="line">      prev = curr;                          <span class="comment">// 将 prev 移动到 curr</span></span><br><span class="line">      curr = nex;                           <span class="comment">// 将 curr 移动到 nex</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h4><p><strong>个人理解</strong>：</p><p>参考 <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdS9odXd0Lw==" title="https://leetcode-cn.com/u/huwt/">路漫漫我不畏<i class="fa fa-external-link"></i></span>的相关题解，写的很好。</p><ol><li>使用递归函数，一直递归到链表的最后一个节点，该节点就是反转后的头节点，记作 ret；</li><li>此后，每次函数在返回的过程中，让当前节点的下一个节点的 next 指针指向当前节点；</li><li>同时让当前节点的 next 指针指向 NULL，从而实现从链表尾部开始的局部反转；</li><li>当递归全部出栈后，链表反转完成。</li></ol><p>代码如下(C++):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head.next == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode *ret = reverseList(head -&gt; next);    <span class="comment">// 递归掉用</span></span><br><span class="line">    head -&gt; next -&gt; next = head;                  <span class="comment">// 递归方程，下一个指向前面</span></span><br><span class="line">    head -&gt; next = <span class="literal">nullptr</span>;                       <span class="comment">// 下一个指空</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：移除链表元素"><a href="#题目：移除链表元素" class="headerlink" title="题目：移除链表元素"></a>题目：移除链表元素</h3><p>删除链表中等于给定值 val 的所有节点。</p><p>示例:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6</span><br><span class="line">输出: 1-&gt;2-&gt;3-&gt;4-&gt;5</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>链表内部，等于 val 就删掉，对于链表来说，那节点值如果等于 val 则将节点前指向节点后即可。<br>关键问题在于，如何处理头和尾部，这里我们引入<strong>哨兵节点</strong>。</p><p>哨兵节点广泛应用于树和链表中，如伪头、伪尾、标记等，它们是纯功能的，通常不保存任何数据，其主要目的是使链表标准化，例如：使链表<strong>永不为空</strong>、<strong>永不无头</strong>、<strong>简化插入和删除</strong>。</p><ul><li>初始化哨兵节点为 ListNode(0)并设置其 next 指向 head</li><li>初始化 curr 和 prev 指向当前节点和前继节点</li><li>当 curr != nullptr<ul><li>比较当前节点和要删除的节点<ul><li>若是，则 prev -&gt; next = curr -&gt; next;</li><li>否则，prev = curr;</li></ul></li><li>遍历下一个元素：curr = curr -&gt; next;</li></ul></li><li>返回 sentinel -&gt; next</li></ul><p>代码如下(C++):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需要哨兵节点，也就是哑节点</span></span><br><span class="line">    ListNode *sentinel = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    sentinel -&gt; next = head;</span><br><span class="line">    ListNode *prev = sentinel, *curr = head, *toDelete = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span>(curr != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(curr -&gt; val == val)&#123;</span><br><span class="line">        prev -&gt; next = curr -&gt; next;</span><br><span class="line">        toDelete = curr;</span><br><span class="line">      &#125;<span class="keyword">else</span> prev = curr;</span><br><span class="line">      curr = curr -&gt; next;</span><br><span class="line">      <span class="keyword">if</span>(toDelete != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> toDelete;</span><br><span class="line">        toDelete = <span class="literal">nullptr</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode *ret = sentinel -&gt; next;</span><br><span class="line">    <span class="keyword">delete</span> sentinel;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：奇偶链表"><a href="#题目：奇偶链表" class="headerlink" title="题目：奇偶链表"></a>题目：奇偶链表</h3><p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。<br>请尝试使用原地算法完成。你的算法的空间复杂度应为 _O(1)_，时间复杂度应为 _O(nodes)_，nodes 为节点总数。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</span><br><span class="line"></span><br><span class="line">输入: 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL</span><br><span class="line">输出: 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure><p>说明:</p><ul><li>应当保持奇数节点和偶数节点的相对顺序。</li><li>链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。</li></ul><p><strong>个人理解</strong>：<br>设定多个指针，head 为奇指针头部，odd 为奇指针，evenHead 为偶指针头部，even 为偶指针。<br>将奇节点放在一个链表内，将偶节点放在一个列表内，最后将偶节点连接到奇节点尾部。</p><p>详解：</p><ul><li>首先 odd 和 head 指向奇头部，evenHead 和 even 指向偶头部；</li><li>修改 odd next 指针的指向，指向 odd -&gt; next -&gt; next，即 odd -&gt; next = odd -&gt; next -&gt; next；</li><li>然后将 odd 向后移动一位；</li><li>再操作 even 的 next 指针指向，如下：even -&gt; next = even -&gt; next -&gt; next；</li><li>移动 even，以 even 作为结束条件；</li><li>拼接 odd -&gt; next = evenHead。</li></ul><p>代码如下(C++):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">ListNode* <span class="title">oddEvenList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    ListNode *odd&#123;head&#125;, *evenHead&#123;head-&gt;next&#125;, *even&#123;head-&gt;next&#125;;</span><br><span class="line">    <span class="keyword">while</span>(even != <span class="literal">nullptr</span> &amp;&amp; even-&gt;next != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">      odd -&gt; next = odd -&gt; next -&gt; next;      <span class="comment">// 先修改指向</span></span><br><span class="line">      odd = odd -&gt; next;                      <span class="comment">// 再移动指针</span></span><br><span class="line">      even -&gt; next = even -&gt; next -&gt; next;    <span class="comment">// 先修改指向</span></span><br><span class="line">      even = even -&gt; next;                    <span class="comment">// 再移动指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    odd -&gt; next = evenHead;                   <span class="comment">// 拼接</span></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>test</p><h3 id="题目：回文链表"><a href="#题目：回文链表" class="headerlink" title="题目：回文链表"></a>题目：回文链表</h3><p>请判断一个链表是否为回文链表。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2</span><br><span class="line">输出: false</span><br><span class="line"></span><br><span class="line">输入: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>进阶：使用 <em>O(n)</em> 时间复杂度和 <em>O(1)</em> 空间复杂度解决此题。</p><p><strong>个人理解</strong>：<br>将链表内容复制到容器中，对容器中的内容进行循环遍历即可。</p><p>代码如下(C++):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;            <span class="comment">// 定义容器a</span></span><br><span class="line">    <span class="keyword">while</span>(head != <span class="literal">nullptr</span>)&#123;   <span class="comment">// 将链表内容复制到a中</span></span><br><span class="line">      a.push_back(head-&gt;val);</span><br><span class="line">      head = head -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size()/<span class="number">2</span>; i++)&#123;          <span class="comment">// 遍历a的前半部分</span></span><br><span class="line">      <span class="keyword">if</span>(a[i] != a[a.size()-i<span class="number">-1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">// 与后半部分做对比</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>进阶方法，官方提供了思路：<br>改变输入。将链表的后半部分反转(修改链表结构)，然后将后半部分与前半部分比较。比较之后需要将链表恢复。</p><p>算法步骤：</p><ol><li>找到前半部分链表的尾节点。</li><li>反转后半部分链表</li><li>判断是否回文</li><li>恢复链表</li></ol><p>进阶代码如下：<br>参考<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdS96ZWQtNjU1MzYv" title="https://leetcode-cn.com/u/zed-65536/">hello_pretty<i class="fa fa-external-link"></i></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head-&gt;next)      <span class="comment">// 特判</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ListNode *fast = head, *slow = head;</span><br><span class="line">    ListNode *p, *pre = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)&#123;</span><br><span class="line">      p = slow;</span><br><span class="line">      slow = slow-&gt;next;          <span class="comment">// 快慢遍历</span></span><br><span class="line">      fast = fast-&gt;next-&gt;next;</span><br><span class="line">      p-&gt;next = pre;                <span class="comment">// 翻转</span></span><br><span class="line">      pre = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fast)                              <span class="comment">// 奇数个节点时，跳过中间节点</span></span><br><span class="line">      slow = slow-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;                           <span class="comment">// 前半部分和后半部分比较</span></span><br><span class="line">      <span class="keyword">if</span>(p-&gt;val != slow-&gt;val)</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">      slow = slow-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    fast = head, slow = head;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)&#123;</span><br><span class="line">      p = slow;</span><br><span class="line">      slow = slow-&gt;next;      <span class="comment">// 快慢遍历</span></span><br><span class="line">      fast = fast-&gt;next-&gt;next;</span><br><span class="line">      p-&gt;next = pre;            <span class="comment">// 翻转</span></span><br><span class="line">      pre = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="小结-链表经典问题"><a href="#小结-链表经典问题" class="headerlink" title="小结 - 链表经典问题"></a>小结 - 链表经典问题</h3><p>通过练习可以找到一些链表问题的相似之处。</p><p>1.通过一些测试用例可以节省您的时间。</p><p>使用链表时不易调试。因此，在编写代码之前，自己尝试几个不同的示例来验证您的算法总是很有用的。</p><p>2.你可以同时使用多个指针。</p><p>有时，当你为链表问题设计算法时，可能需要同时跟踪多个结点。您应该记住需要跟踪哪些结点，并且可以自由地使用几个不同的结点指针来同时跟踪这些结点。<br>如果你使用多个指针，最好为它们指定适当的名称，以防将来必须调试或检查代码。</p><p>3.在许多情况下，你需要跟踪当前结点的前一个结点。</p><p>你无法追溯单链表中的前一个结点。因此，您不仅要存储当前结点，还要存储前一个结点。这在双链表中是不同的。</p><blockquote><p>声明：本文为学习记录，不做商业用途，<strong>如果有侵权内容，请联系我立即删除</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表-02</title>
      <link href="/posts/b9520812/"/>
      <url>/posts/b9520812/</url>
      
        <content type="html"><![CDATA[<h2 id="双指针技巧"><a href="#双指针技巧" class="headerlink" title="双指针技巧"></a>双指针技巧</h2><p>我们之前在数组中引入了双指针技巧，先做一个简要回顾，有两种使用双指针的情景：</p><ol><li>两个指针<strong>从不同位置出发</strong>：一个从头部开始，另一个从尾部开始；</li><li>两个指针<strong>以不同速度移动</strong>：一个指针快一些，另一个指针慢一些；</li></ol><p>对于单链表，由于我们只能在一个方向上遍历链表，所以第一种情景可能无法工作。但是第二种指针，即<strong>快慢指针</strong>是非常有用的技巧。</p><p>以下我们将重点讨论链表中的<strong>快慢指针</strong>问题，并告诉你如何解决这类问题。</p><a id="more"></a><h3 id="链表中的双指针"><a href="#链表中的双指针" class="headerlink" title="链表中的双指针"></a>链表中的双指针</h3><p>首先从一个经典问题开始：</p><blockquote><p>给定一个链表，判断链表中是否有环。</p></blockquote><p>熟悉哈希表的可能已经使用哈希表提出了解决方案。但是，使用双指针技巧有一个更有效的解决方案。</p><p>想象一下，有两个速度不同的跑步者。如果他们在直路上行驶，快跑者将首先到达目的地。但是，如果它们在圆形跑道上跑步，那么快跑者如果继续跑步就会追上慢跑者。</p><p>这正是在<strong>链表中</strong>使用两个速度不同的指针时会遇到的情况：</p><ol><li>如果没环，快指针将优先抵达链表尾部。</li><li>如果有环，快指针最终将会追上慢指针。</li></ol><p>所以剩下的问题是：这两个指针的适当速度应该是多少？</p><p>一个安全的选择是每次移动慢指针一步，而移动快指针两步。每一次迭代，快速指针将额外移动一步。如果环的长度为 M，经过 M 次迭代后，快指针肯定会多绕环一周，并赶上慢指针。</p><p>我们用题目来展现问题：</p><h3 id="题目：环形链表"><a href="#题目：环形链表" class="headerlink" title="题目：环形链表"></a>题目：环形链表</h3><p>给定一个链表，判断链表中是否有环。<br>为了表示给定链表中的环，我们使用整数 <strong>pos</strong> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<br>如果 <strong>pos</strong> 是 <strong>-1</strong>，则在该链表中没有环。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br><span class="line"></span><br><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br><span class="line"></span><br><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：false</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><p>进阶：使用 <strong>O(1) 内存</strong>解决此问题，即空间复杂度为<em>O(1)</em></p><p><strong>个人理解</strong>：<br>采用刚了解到的<strong>快慢指针法</strong>来判断链表中是否有环即可。<br>定义快慢指针，让快指针一次走两部，慢指针一次走一步：如果快指针抵达终点，说明链表内部没有环；如果快指针追上了慢指针，则说明链表内部有环存在。</p><p>代码如下(C++):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode *fast&#123;head&#125;, *slow&#123;head&#125;;  <span class="comment">// 定义双指针</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">// 特判</span></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">nullptr</span> &amp;&amp; fast -&gt; next != <span class="literal">nullptr</span>)&#123;  <span class="comment">// 判断是否到头</span></span><br><span class="line">            fast = fast -&gt; next -&gt; next;    <span class="comment">// 走两步</span></span><br><span class="line">            slow = slow -&gt; next;            <span class="comment">// 走一步</span></span><br><span class="line">            <span class="keyword">if</span>(fast == slow) <span class="keyword">return</span> <span class="literal">true</span>;   <span class="comment">// 相遇则为环</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;                       <span class="comment">// 否则到尽头无环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：环形链表-II"><a href="#题目：环形链表-II" class="headerlink" title="题目：环形链表 II"></a>题目：环形链表 II</h3><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 <strong>null</strong>。<br>为了表示给定链表中的环，我们使用整数 <strong>pos</strong> 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 <strong>pos</strong> 是 <strong>-1</strong>，则在该链表中没有环。</p><p>说明：不允许修改给定的链表。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：tail connects to node index 1</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br><span class="line"></span><br><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：tail connects to node index 0</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br><span class="line"></span><br><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：no cycle</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>查看示例的内容我们可以得知，这次要返回的是环的点，所以我们还是采用双指针法来解决。<br>官方称之为：<strong>Floyd 算法</strong>，如果链表中有环存在，快指针必然会追上慢指针，在此我们设定，<strong>起点为 A，环点为 B，追逐点为 C</strong>，令：<br>A-&gt;B 为 x<br>B-&gt;C 为 y<br>C-&gt;B 为 z<br>慢指针走的路线为：x + y<br>快指针走的路线为：x + y + z + y<br>又因：快指针 = 慢指针 * 2<br>可得：x = z<br>即我们想要的 B 点，其实就是 x 的长度，所以在相遇后，将慢指针放回起点，两个指针继续走，再次相遇就是 B 点相遇了。</p><p>代码如下(C++):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">    ListNode *fast&#123;head&#125;, *slow&#123;head&#125;;    <span class="comment">// 定义双指针</span></span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;   <span class="comment">// 特判</span></span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="literal">nullptr</span> &amp;&amp; fast -&gt; next != <span class="literal">nullptr</span>)&#123;  <span class="comment">// 判断是否到头</span></span><br><span class="line">      fast = fast -&gt; next -&gt; next;        <span class="comment">// 走两步</span></span><br><span class="line">      slow = slow -&gt; next;                <span class="comment">// 走一步</span></span><br><span class="line">      <span class="keyword">if</span>(fast == slow)&#123;           <span class="comment">// 相遇则为环</span></span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != slow)&#123;      <span class="comment">// 将slow放回头部，继续走</span></span><br><span class="line">          slow = slow -&gt; next;    <span class="comment">// 走一步</span></span><br><span class="line">          fast = fast -&gt; next;    <span class="comment">// 走一步</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;              <span class="comment">// 相遇返回slow即可</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;               <span class="comment">// 否则到尽头无环</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：相交链表"><a href="#题目：相交链表" class="headerlink" title="题目：相交链表"></a>题目：相交链表</h3><p>编写一个程序，找到两个单链表相交的起始节点。<br>如下两个链表：</p><div style="width:70%; margin:auto;"><img src="/posts/b9520812/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8.png" class=""></div>在节点C1开始相交。<p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">输出：Reference of the node with value = 8</span><br><span class="line">输入解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br><span class="line"></span><br><span class="line">输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</span><br><span class="line">输出：Reference of the node with value = 2</span><br><span class="line">输入解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</span><br><span class="line"></span><br><span class="line">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span><br><span class="line">输出：null</span><br><span class="line">输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。</span><br><span class="line">解释：这两个链表不相交，因此返回 null。</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>如果两个链表没有交点，返回 null.</li><li>在返回结果后，两个链表仍须保持原有的结构。</li><li>可假定整个链表结构中没有循环。</li><li>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。</li></ul><p><strong>个人理解</strong>：<br>利用两个链表总路程一样，进行遍历：<br>分别定义两个指针在两个链表头部，每次走一步，走完自己路程去走另一个链表内容，最终步数均为 x + y<br>如果相遇则结束，相遇点即为交点，最后也同时抵达结尾 null，最终返回 null。</p><p>代码如下(C++):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">    ListNode *a&#123;headA&#125;, *b&#123;headB&#125;;  <span class="comment">// 定义两个指针分别在两个链表头部</span></span><br><span class="line">    <span class="keyword">if</span>(headA == <span class="literal">nullptr</span> || headB == <span class="literal">nullptr</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;               <span class="comment">// 都为空则肯定没交点</span></span><br><span class="line">    <span class="keyword">while</span>(a != b)&#123;                  <span class="comment">// 总路程是一样的，都是 a + all + b</span></span><br><span class="line">      <span class="keyword">if</span>(a == <span class="literal">nullptr</span>)  a = headB;  <span class="comment">// a到头交换到B链表头部</span></span><br><span class="line">        <span class="keyword">else</span> a = a -&gt; next;         <span class="comment">// 走一步</span></span><br><span class="line">      <span class="keyword">if</span>(b == <span class="literal">nullptr</span>)  b = headA;  <span class="comment">// b到头交换到A链表头部</span></span><br><span class="line">        <span class="keyword">else</span> b = b -&gt; next;         <span class="comment">// 走一步</span></span><br><span class="line">    &#125;                               <span class="comment">// 两个同时到达结尾 null，结束循环，返回null</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：删除链表的倒数第-N-个节点"><a href="#题目：删除链表的倒数第-N-个节点" class="headerlink" title="题目：删除链表的倒数第 N 个节点"></a>题目：删除链表的倒数第 N 个节点</h3><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头节点 1。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2</span><br><span class="line">当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure><p>说明：给定的 n 保证是有效的</p><p>进阶：尝试使用一趟扫描实现</p><p><strong>个人理解</strong>：<br>采用双指针的另一种用法，还是<strong>同向移动</strong>，但是，一个指针先移动一定的距离，用作距离标定，随后开始步进，<strong>另一个指针联动</strong>。<br>做法如下：</p><ol><li>先定义一个哑节点放在头部</li><li>在哑节点位置定义两个指针</li><li>将一个指针先行 n+1 步</li><li>一起移动，知道先行指针到头</li><li>此时后指针就在要删除节点前</li><li>删除节点即可</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode *header = <span class="keyword">new</span> ListNode(<span class="number">0</span>);   <span class="comment">// 定义一个哑节点</span></span><br><span class="line">    header -&gt; next = head;                <span class="comment">// 将哑节点放在头部</span></span><br><span class="line">    ListNode *a&#123;header&#125;,*b&#123;header&#125;;       <span class="comment">// 在哑节点位置放置两个指针</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n+<span class="number">1</span>; i++)  b = b -&gt; next;    <span class="comment">// 将 b 指针先移动 n+1 步</span></span><br><span class="line">    <span class="keyword">while</span>(b)&#123;                                       <span class="comment">// 将 b 指针移动到头，a 指针联动</span></span><br><span class="line">      a = a -&gt; next;</span><br><span class="line">      b = b -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    a -&gt; next = a -&gt; next -&gt; next;        <span class="comment">// a 这时候位置就在要删除节点前</span></span><br><span class="line">    <span class="keyword">return</span> header -&gt; next;                <span class="comment">// 返回 header-&gt;next 即可</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="小结-链表中的双指针"><a href="#小结-链表中的双指针" class="headerlink" title="小结 - 链表中的双指针"></a>小结 - 链表中的双指针</h3><p>在这里，我们为你提供了一个模版，用于解决链表中的双指针问题。</p><p>模版如下(C++):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化快慢指针</span></span><br><span class="line">ListNode* slow = head;</span><br><span class="line">ListNode* fast = head;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据不同的问题更改条件</span></span><br><span class="line"><span class="comment"> * 注意: 记得避免空指针错误</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">while</span> (slow &amp;&amp; fast &amp;&amp; fast-&gt;next) &#123;</span><br><span class="line">    slow = slow-&gt;next;          <span class="comment">// 每次将慢指针移动一步</span></span><br><span class="line">    fast = fast-&gt;next-&gt;next;    <span class="comment">// 每次将快指针移动两步</span></span><br><span class="line">    <span class="keyword">if</span> (slow == fast) &#123;         <span class="comment">// 根据不同的问题更改条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">// 更改返回值以适合特定问题</span></span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>它与我们在数组中学到的内容类似。但它可能更棘手而且更容易出错。你应该注意以下几点：</p><p>1.在调用 next 字段之前，始终检查节点是否为空：<br>获取空节点的下一个节点将导致空指针错误。例如，在我们运行 fast = fast.next.next 之前，需要检查 fast 和 fast.next 不为空。</p><p>2.仔细定义循环的结束条件：<br>运行几个示例，以确保你的结束条件不会导致无限循环。在定义结束条件时，你必须考虑我们的第一点提示。</p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>空间复杂度分析容易。如果只使用指针，而不使用任何其他额外的空间，那么空间复杂度将是 _O(1)_。但是，时间复杂度的分析比较困难。为了得到答案，我们需要分析运行循环的次数。</p><p>在前面的查找循环示例中，假设我们每次移动较快的指针 2 步，每次移动较慢的指针 1 步。</p><p>如果没有循环，快指针需要 N/2 次才能到达链表的末尾，其中 N 是链表的长度。<br>如果存在循环，则快指针需要 M 次才能赶上慢指针，其中 M 是列表中循环的长度。<br>显然，M &lt;= N 。所以我们将循环运行 N 次。对于每次循环，我们只需要常量级的时间。因此，该算法的时间复杂度总共为 O(N)。</p><p>自己分析其他问题以提高分析能力。别忘了考虑不同的条件。如果很难对所有情况进行分析，请考虑最糟糕的情况。</p><blockquote><p>声明：本文为学习记录，不做商业用途，<strong>如果有侵权内容，请联系我立即删除</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译型语言和解释型语言的区别</title>
      <link href="/posts/539b3d3f/"/>
      <url>/posts/539b3d3f/</url>
      
        <content type="html"><![CDATA[<p>从我大一接触 C 至今有 7 年了，一个电子专业的学生，其实需要学的蛮杂的。编程语言，数电模电，建模仿真，钣金设计。一半出坑的我现在还在刷算法，编程语言到现在也学了挺多了(相对)，从 C 语言，C51，Matlab，到 LabVIEW，Python，再到 HTML-CSS-JS 三件套，再到 JAVA 和 C++，其实我自己也常常笑话自己学艺不精～但是都够我用了嘿嘿，毕竟大佬们刷题都是多种语言搞起的。</p><p>我个人非常喜欢各种编程语言，觉得在学习的过程中摸索到它们之间的规律非常兴奋。</p><p>好了闲话不多说，本文主要介绍，编译型语言和解释型语言的区别。</p><a id="more"></a><p>其实主要区别就两点：</p><ul><li>翻译时间</li><li>运行速度</li><li>开发平台</li></ul><p>首先，我们要知道，计算机是机器，无法主动的去理解我们编写的代码，我们编写的代码属于高级语言，因为代码有着自己的含义～计算机看不懂更不可能去执行了，但是计算机可以阅读它们自己的语言：某些特定的二进制指令，所以程序在真正运行之前需要将源代码转换成二进制的指令。学电子的同学应该都学过汇编语言，这就属于低级语言，它和机器语言一样，二者有着一一对应的关系。</p><p>所以我们知道，计算机要执行程序，需要将源代码翻译为二进制语言，在什么时候进行翻译，不同的语言有了规定。</p><h2 id="翻译时间"><a href="#翻译时间" class="headerlink" title="翻译时间"></a>翻译时间</h2><p>既然不同的语言，在将源代码翻译为二进制语言的不同，就产生了区别：</p><ul><li><strong>编译型语言</strong>：C 语言、C++、Object-C、汇编、LabVIEW 都是<strong>编译型语言</strong>，这些语言需要提前将所有的源代码，一次性的转换为二进制指令，就是生成一个可执行文件（例如 windows 下的.exe）在不同的平台会生成不同的可执行文件。这种语言被称为<strong>编译型语言</strong>，使用的转换工具称为<strong>编译器</strong>。</li><li><strong>解释型语言</strong>：JS、Python、PHP、Ruby、Perl 这些语言是<strong>解释型语言</strong>，这些语言通常不用对源代码进行编译，而是通过各自的解释器载入脚本后运行。执行的时候现场翻译（类似同声传译）这样的语言称为<strong>解释型语言</strong>。</li><li><strong>特例</strong>：关于 JAVA 和 C#，这两个语言，属于半编译半解释的语言，源代码需要先转成一种中间件（字节码文件）然后将中间件拿到虚拟机中执行。就是说，既可以将源码当作脚本(<strong>解释</strong>)来执行，也可以进行<strong>编译</strong>成.class 文件载入运行。目的是为了在可以跨平台的同时兼顾执行效率。JAVA 做的挺好的，跨平台了。C#跨了个寂寞。<strong>但我仍然认为 JAVA 是解释型语言。</strong></li></ul><h2 id="运行速度"><a href="#运行速度" class="headerlink" title="运行速度"></a>运行速度</h2><p>1.<strong>编译型语言</strong>是提前将所有的源代码一次性的转换为二进制指令，也就是说这些代码<strong>编译一次，无限执行</strong>，就比如 win 系统下，LabVIEW 开发结束后，生成一个 exe 文件，是不是就不需要源代码和编译器了，所以说编译型语言可以脱离开发环境运行。</p><p><strong>但是编译型语言一般是不能跨平台的，就是说 win 系统开发的不能在 osx 上运行。</strong></p><p>2.<strong>解释型语言</strong>其实也很清楚了，同声传译，能快到哪里去。每次执行程序都需要一边转换一边执行，用到那些源代码就将哪些源码翻译成机器语言，用不到不处理。开发过程中每次用的功能不一样，需要翻译的内容也不一样。</p><p>从原理层面来看，解释型语言的执行效率天生低于编译型语言，甚至有数量级的差距。计算机的一些底层功能、关键算法，一般都使用 C/C++实现，只有应用层面(网站开发，SHELL 批处理)才会使用到解释型语言。</p><p>解释型语言，我们始终需要源代码和解释器，所以解释型语言无法脱离开发环境。但是解释型语言由于解释器的存在，开发公司只需要在各个平台开发不同的解释器，就可以实现源代码跨平台的骚操作了。可谓<strong>一次编写，处处执行</strong>。</p><p>3.所以，下载一个程序，对不同的语言有着不同的含义：</p><ul><li>对于编译型语言，下载到的就是可执行文件，源代码由开发者保留，所以！！！编译型语言一般都是闭源的。</li><li>对于解释型语言，一般下载到的是所有源码，因为没有源码下载下来没法运行，所以！！！解释型语言一般开源，这也是为啥 Python 的开源社区这么火爆，白 P 的一抓一大把。</li></ul><h2 id="开发平台"><a href="#开发平台" class="headerlink" title="开发平台"></a>开发平台</h2><p>1.<strong>对于编译型语言</strong>，在不同开发平台编译的结果，都是在当前平台的可执行程序。不同的操作系统对可执行程序的内部有着不同的要求，再者，不同开发品台的源代码之间也是不能移植的，在 win 平台 C++写个 system，OSX 不认你不完蛋么。所以<strong>编译型语言不能跨平台才正常</strong>。</p><p>2.<strong>对于解释型语言</strong>，解释器将源代码转换为机器码，那就可以执行，所以官方针对不同的平台开发不同的解释器，这些解释器可以在不同的平台对同样的语法、同样的函数进行识别，将他们转换为一样的结果，就可以实现跨平台。是解释器屏蔽了不同平台之间的差异。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>编译型语言</strong>：<strong>通过专门的编译器，将所有源码一次性翻译为特定平台的可执行文件</strong>，常见：<strong>C 语言、C++、Object-C、汇编、LabVIEW</strong></p><p>优点：</p><ol><li>编译器一般会有预编译的过程对代码进行优化。</li><li>编译只做一次，运行时不需要编译，程序执行效率高。</li><li>可以脱离语言环境独立运行。</li></ol><p>缺点：</p><ol><li>要修改就需要整个模块重新编译。</li><li>不同的操作系统之间移植就会有问题，不够灵活。</li></ol><p><strong>解释型语言</strong>：由专门的解释器，根据需要将部分源码临时翻译成机器码，常见：<strong>JS、Python、PHP、Ruby、Perl</strong></p><p>优点：</p><ol><li>有良好的平台兼容性，在任何安装了解释器的环境中都可以运行。</li><li>灵活，修改代码直接改就行。</li><li>可以快速部署，不用停机维护。</li></ol><p>缺点：</p><ul><li>每次运行的时候都要解释一遍，性能上不如编译型语言。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础教学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo图片相关</title>
      <link href="/posts/2200ffc8/"/>
      <url>/posts/2200ffc8/</url>
      
        <content type="html"><![CDATA[<p>这篇文章是我在写博客的过程中遇到的关于<strong>图片显示</strong>的问题总结。</p><p>本来还有其他文章需要整理，但是又担心在写作过程中把刚解决的问题忘记了，所以先行记录。</p><p>主要围绕：<strong>如何在博客中显示图片</strong>？<strong>asset-image</strong>以及<strong>fancybox</strong>。</p><ol><li>原生引用在文章中显示图片</li><li>asset-image在主页中显示图片</li><li>修改 fancybox</li></ol><a id="more"></a><h3 id="在文章中显示图片"><a href="#在文章中显示图片" class="headerlink" title="在文章中显示图片"></a>在文章中显示图片</h3><p>首先，第一点，如何在文章中显示图片？</p><p>网上基本上都可以查到相关的资料，一般是安装 <strong>asset-image</strong> 插件，然后修改 <strong>post_asset_folder</strong> 值为 true 即可。</p><p>如果说，只是在文章页面中显示图片，那么采用 markdown 的原生引用方式即可。<br>例如：<strong>![图片描述](测试图片)</strong></p><p>采用这种原生的引用方式，必须在文章所在文件夹中，对应每个文章，都需要一个同名的文件夹用来存放图片。这时候，在系统的配置选项中修改 <strong>post_asset_folder</strong> 值为 true，hexo 在 new 一篇文章时，会自动新建一个同名文件夹。</p><p>如果 hexo 打开了 fancybox，就可以做到，显示图片，和点击放大图片。</p><h3 id="在主页中显示图片"><a href="#在主页中显示图片" class="headerlink" title="在主页中显示图片"></a>在主页中显示图片</h3><p>第二点，如何在主页显示图片？</p><p>用 hexo 的小伙伴都知道，主页显示的是所有文章，为了更好的对文章进行展示，我们都会用到</p><p>&lt;!–more–&gt;</p><p>这个标签，来使得每篇文章显示缩略部分。</p><p>这样，有些图片我们想要显示在缩略部分，但是主页的索引路径是 hostname://port，所以我们在文章页面通过原生引用方式显示的图片是无法显示在主页的。</p><p>此时，我们需要安装一个 asset-image 的插件，输入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>由于本身的 asset-image 有 bug ，我们需要在 node_modules 中寻找到 hexo-asset-image 插件，修改 index.js 内容为以下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&quot;cheerio&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&quot;after_post_render&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span> (config.post_asset_folder) &#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span> (version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">      <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&quot;/&quot;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&quot;/&quot;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&quot;excerpt&quot;</span>, <span class="string">&quot;more&quot;</span>, <span class="string">&quot;content&quot;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span>,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&quot;img&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&quot;src&quot;</span>)) &#123;</span><br><span class="line">          <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">          <span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&quot;src&quot;</span>).replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> (!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp; !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">            <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">            <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">            <span class="keyword">var</span> linkArray = link.split(<span class="string">&quot;/&quot;</span>).filter(<span class="function"><span class="keyword">function</span> (<span class="params">elem</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> elem != <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">var</span> srcArray = src.split(<span class="string">&quot;/&quot;</span>).filter(<span class="function"><span class="keyword">function</span> (<span class="params">elem</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> elem != <span class="string">&quot;&quot;</span> &amp;&amp; elem != <span class="string">&quot;.&quot;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (srcArray.length &gt; <span class="number">1</span>) srcArray.shift();</span><br><span class="line">            src = srcArray.join(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            $(<span class="built_in">this</span>).attr(<span class="string">&quot;src&quot;</span>, config.root + link + src);</span><br><span class="line">            <span class="built_in">console</span>.info &amp;&amp;</span><br><span class="line">              <span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span> + config.root + link + src);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.info &amp;&amp; <span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">          <span class="built_in">console</span>.info &amp;&amp; <span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时，引用图片的方式，就可以采用 asset_img 的引用方式了，这种引用方式，可以实现在主页文章缩略中显示图片。<br>引用格式如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img 单链表图例.png %&#125;</span><br></pre></td></tr></table></figure><p>如果你的 hexo 安装了 fancybox，或者说一些压缩的插件，可能在编辑文章的过程中，出现 <strong>no src attr, skipped…</strong>这种情况，不要慌，应该是图片链接没有 src 导致的，不碍事。将 hexo-asset-image 的 index.js 中的两段 console 注释掉即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//console.info &amp;&amp; console.info(&quot;no src attr, skipped...&quot;);</span></span><br><span class="line"><span class="comment">//console.info &amp;&amp; console.info($(this));</span></span><br></pre></td></tr></table></figure><h3 id="修改-fancybox"><a href="#修改-fancybox" class="headerlink" title="修改 fancybox"></a>修改 fancybox</h3><p>还有 fancybox 和 Hexo-NexT 的关系，我这个版本应该是 NexT7，也有可能是别人改过的，其中 theme/next/source/lib 中没有 fancybox，所以在开启 fancybox 后，会导致在本地调试过程中，没有网络的情况下，localhost 无法访问。<br>同理还有 lazyload。因为我个人爱去书店写东西，经常没有网络，所以我把 fancybox 和 lazyload 关闭，问题留待之后解决。</p><p>问题解决，通过查找 theme.fancybox 所在位置，定位到 head.swig 和 vendors.swig 两个文件，在设置 fancybox 为 true 时，会引用外部 cdn，我们将外部 cdn 改为本地文件。</p><p>我们首先下载 fancybox 的库，点击<a href="https://github.com/fancyapps/fancybox/releases/tag/v3.5.7"><strong>这里:fancybox 库</strong></a>将内容解压缩到 theme/theme-name/source/lib/文件夹下，然后在<strong>fancybox_css_uri</strong>后面修改</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**//cdn.jsdelivr.net/npm...**</span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**fancybox/dist/jquery.fancybox.min.css**</span><br></pre></td></tr></table></figure><p>至此，就可以解决 fancybox 本地加载的问题了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> asset-image </tag>
            
            <tag> fancybox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《新参者》读后感</title>
      <link href="/posts/4cb88cec/"/>
      <url>/posts/4cb88cec/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 新参者 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《悲剧人偶》读后感</title>
      <link href="/posts/80c64a3e/"/>
      <url>/posts/80c64a3e/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 悲剧人偶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《午后四点》读后感</title>
      <link href="/posts/709df5b0/"/>
      <url>/posts/709df5b0/</url>
      
        <content type="html"><![CDATA[<p>刚到长春一周，因为疫情，所以自我隔离了一段时间，前些天因为省图关门比较早，便去当当阅界自习。因为去的时候已经下午 4 点多了，我还有工作要做，所以就在书架上想挑一本薄一点的书看看。</p><p>正巧，畅销书中有一本书引起的我的注意：《午后四点》，和我到的时间相称。本以为是一本放松自由的书籍，午后四点喝点下午茶什么的。却怎么也没想到内容的“荒诞”，情节紧密窒息，步步紧逼，让我这个没什么文学修养的人，看前半节竟然有那么些没看懂，看完全书又重新看了下。因为事情确实有些繁杂，象牙塔的生活倒也没那么悠闲。</p><p>直至今日才写下读后感，书籍推荐度：4 星。</p><a id="more"></a><p>首先打开是作者介绍，有这样一句话：“法国每年都有两件事值得庆祝。一是葡萄成熟，二是<strong>诺冬</strong>新作问世。”</p><p>作为一名“不信邪，并且对社会抱有深深怀疑”的人，我自言自语，这又是个虚假信息。</p><p>书中介绍：“诺冬全名<strong>阿梅丽·诺冬</strong>，比利时法语小说家，1967 年出生。自 1992 年出版处女作《杀手保健》以来，她一年出一本书，年年轰动，本本畅销，成了欧洲文学界的‘神话’。她的作品已被译成 40 多种语言，深受读者喜爱。”</p><p>“诺冬喜欢写作，每天必须写四小时以上，每年都写三四本书，至今仍是如此，但她每年只出版一本，并且永远是在同一家出版社，永远是在同一个季节。出道至今，她已出版了二十八本书。”像极了刻意炒作，但是我有些动摇并且对这本书产生了兴趣，不可能大家都是傻子。于是开始看书：啪啪打脸。</p><p>我阅读速度其实算比较快的了。这本薄薄的书，我竟然看的很慢。为什么呢？</p><p>小说故事简单，单一主线，不像我喜欢的作者<strong>东野圭吾</strong>的小说故事线那么密集。不经常看小说的人比较适合，我这种经常看的人会觉得有一些许乏味。<br>但是看着看着，就会发现，语言之细腻，正如译者序言中的描述：<br>“诺冬的小说没有什么惊天动地的情节，也没有宏大的背景，人物不多，不涉及重大题材，书中探讨的往往是生活中常见的命题：<strong>友谊与背叛、美与丑、善与恶、道德与虚伪、正义与非正义</strong>。爱情、死亡和哲理构成了诺冬大部分小说的支点，而把它们连接起来的，是敏锐的观察、犀利的语言、巧妙的思辨和无处不在的黑色幽默。”<br>“诺冬是学哲学出身，不满足于在书中讲故事、玩小聪明，而是更喜欢在书中展示自己的学识，引经据典，把历史、宗教、神话、哲学和文学等方面的内容穿插在字里行间。故事讲述到一半，她开始探讨起礼貌、虚空、善恶等问题来，妙语奇思也随之而来。”</p><p>书中主要故事是，一堆退休夫妇为享受清净生活避世隐居到林间，相隔三十多米有一户并且只有一户人家，男主人是一位胖胖的医生。但是这位医生并不像普通的胖人那样和蔼可亲，反倒是沉默寡言，暴躁易怒。</p><p>这位邻居每天下午 4 点钟来拜访他们，6 点离开，乍一看觉得这个邻居十分热情。其实不然，邻居的不请自来，态度强硬，以及沉默寡言，让这对夫妇受尽折磨。试问每天下午 4 点到 6 点，你的家被新认识的邻居敲开，打断了你外出欣赏大自然的美好生活，客人坐在他认定的位置，犹如一个国王，不与你说话，喝着他要的咖啡。你如是不陪着他，他甚至会表现出生气的状态。</p><p>男主人公是一个退休教师，是一个将礼节看的非常重的人，医生来的无数天，他从一开始的礼节，变成了折磨，邻居的拜访成为了他们生活中一个最大的难题。他们尝试用装病的方式躲避医生的拜访，不曾想医生不实趣，疯狂砸门，并且在第二天责备他们。最终男主人忍无可忍，发飙将怪医生轰出家门。</p><p>他们曾邀请医生带着妻子一起来，然后他们结识了医生贝尔纳丹的妻子贝尔纳戴特，一个生活中只剩下了吃和睡，房间无比脏乱差，生存状态和生活状态一团乱麻的胖子。<br>看到这里我的脑海中仿佛有了画面，但是却很难想象。文中描述：“当贝尔纳丹太太进来时，我们都停止了呼吸。她就像费里尼影片中的人物那么可怕。不是因为她像那个人物，远远不是，而是她几乎不像个人。邻居跨进我们的门槛，然后把手伸向外面，他从外面慢慢地拽进一个什么巨大的东西。那是一大团肉，穿着一件裙子，或者说那团肉被包在一块布里面…她肥肥胖胖，皮肤太白、太光滑了…这个东西是个囊肿。”</p><p>文中穿插这一段，男主的女学生来拜访，不巧撞到了怪医生也在，尴尬的场面一度让学生愤然离去，认为自己的老师老了，不再睿智，博学。最终从当然当然的肯定中表现出再也不会来访。</p><p>随着故事发展，男主人满满的了解到了医生所过的生活，在一个失眠的夜晚，男主还救下了试图去自杀的医生。但是事后没过多久他就后悔了，他认为医生的生活毫无生气，没有意义，比死掉还可怜。男主还特意写了两行留言深夜从门缝递进怪医生家，等白天到了又后悔劝怪医生自杀，再次入夜又一次推翻白天的想法，觉得怪医生就应该自杀，自己结束了其生命，前前后后男主反复无常的心理描写写的特别精彩。</p><p>怪医生自杀未遂在医院抢救时夫妻二人担心“囊肿”太太便折返再次前往怪医生家，发现医生家臭味熏天，客厅里到处是乱摆放且走的极准的钟表，“囊肿”太太在二楼此时正在酣睡，男主被她巨大且频率一致的鼾声竟然催眠倒地就睡了（男主可是常年失眠患者）。从整体的环境描述都让男主发现怪医生其实非常厌世，他什么都不喜欢，而她的“囊肿”太太却能吃能睡。</p><p>最终结局是男主用枕头闷死了医生，帮助他如愿的迎接了死亡。但我个人更多的视为是一种谋杀。<br>夫妻二人将医生的妻子接到了自己家来照顾。</p><p>夫妻二人为了快乐的生活而藏起来，却被邻居的敲门毁于一旦。这无声拜访就像一场没有硝烟的暗战，谁先开口谁就输了。</p><p>《圣经》中有句话说：“如果有人敲你家的门，你就要开门。”</p><p>诺冬用这本以温柔开场，杀人结束的小说回应这一切。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 午后四点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++通讯录管理系统</title>
      <link href="/posts/2c1e930c/"/>
      <url>/posts/2c1e930c/</url>
      
        <content type="html"><![CDATA[<p>前几天刷题，因为我选择用 C++语言来刷题，比较接近底层，但是又不像 C 那样我需要自己造轮子，可以很深入的了解算法的内部结构。但是，我 C++学的并不精通！！这我就很尴尬了，所以我找了 B 站上黑马程序员的课程，然后肝了两天基础语法。</p><p>遗憾的是！！！我在刷题过程中遇到的问题，在 C++提高编程部分。基础语法没有，但是我们不能白刷，刷了题那就做一下练习，正好课程里有通讯录管理系统，咱就研究研究，搞一下。</p><p>IDE 用的 JetBrains 公司的 Clion，因为之前正好申请了学生免费，再加上 Xcode 学习成本对我来说有点高。话不多说，回归正题。</p><a id="more"></a><p>首先，我们要做一个系统，肯定要首先知道系统需求，因为不是实际的项目，所以不需要过于精细，只需要知道大概需要完成的模块以及功能即可。</p><h2 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h2><p>通讯录是一个可以记录亲人、好友信息的工具。<br>主要利用 C++来实现一个通讯录管理系统<br>系统中主要实现以下功能：</p><ul><li>添加联系人：向通讯录中添加新人，信息包括（姓名、性别、年龄、联系电话、家庭住址），最多记录 1000 人</li><li>显示联系人：显示通讯录中所有联系人信息</li><li>删除联系人：按照姓名进行删除指定联系人</li><li>查找联系人：按照姓名查看指定联系人信息</li><li>修改联系人：按照姓名重新修改指定联系人</li><li>清空联系人：清空通讯录中所有信息</li><li>推出通讯录：退出当前使用的通讯录</li></ul><h3 id="显示菜单"><a href="#显示菜单" class="headerlink" title="显示菜单"></a>显示菜单</h3><p>首先我们要有个菜单显示界面，来满足人机交互的需求。<br>封装 <strong>showMenu</strong> 函数如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 封装菜单显示界面 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> menu_item[] = &#123;<span class="string">&quot;1.添加联系人&quot;</span>, <span class="string">&quot;2.显示联系人&quot;</span>, <span class="string">&quot;3.删除联系人&quot;</span>,</span><br><span class="line">    <span class="string">&quot;4.查找联系人&quot;</span>, <span class="string">&quot;5.修改联系人&quot;</span>, <span class="string">&quot;6.清空联系人&quot;</span>, <span class="string">&quot;0.退出通讯录&quot;</span>&#125;;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : menu_item) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****    &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;    *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后根据用户交互输入的内容依次完成其他功能。</p><h3 id="添加联系人"><a href="#添加联系人" class="headerlink" title="添加联系人"></a>添加联系人</h3><p>添加联系人(<strong>addPerson</strong>)代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addPerson</span><span class="params">(AddressBooks *<span class="built_in">abs</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 判断通讯录是否已满，满了不继续加</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;m_Size == MAX) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通讯录已满，无法继续添加&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 添加具体的联系人</span></span><br><span class="line">    <span class="comment">// 添加姓名</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入姓名：&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">    <span class="built_in">abs</span>-&gt;personArray[<span class="built_in">abs</span>-&gt;m_Size].m_Name = name;</span><br><span class="line">    <span class="comment">// 添加性别</span></span><br><span class="line">    <span class="keyword">int</span> sex = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入性别：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1---男&quot;</span> &lt;&lt; <span class="string">&quot;\t2---女&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您的性别是：&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; sex;</span><br><span class="line">      <span class="comment">/* 此处用于处理c++中cin输入错误问题 */</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">cin</span>.fail()) &#123;</span><br><span class="line">        <span class="built_in">cin</span>.clear();    <span class="comment">// 将cin的错误状态清除</span></span><br><span class="line">        <span class="built_in">cin</span>.ignore();   <span class="comment">// 将输入缓冲区的内容忽略掉</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (sex == <span class="number">1</span> || sex == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;personArray[<span class="built_in">abs</span>-&gt;m_Size].m_Sex = sex;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加年龄</span></span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入年龄：&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line">      <span class="keyword">if</span> (age &gt;= <span class="number">1</span> &amp;&amp; age &lt;= <span class="number">150</span>) &#123;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;personArray[<span class="built_in">abs</span>-&gt;m_Size].m_Age = age;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 电话</span></span><br><span class="line">    <span class="built_in">string</span> phone;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入电话：&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; phone;</span><br><span class="line">    <span class="built_in">abs</span>-&gt;personArray[<span class="built_in">abs</span>-&gt;m_Size].m_Phone = phone;</span><br><span class="line">    <span class="comment">// 住址</span></span><br><span class="line">    <span class="built_in">string</span> address;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入家庭住址：&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; address;</span><br><span class="line">    <span class="built_in">abs</span>-&gt;personArray[<span class="built_in">abs</span>-&gt;m_Size].m_Addr = address;</span><br><span class="line">    <span class="comment">// 更新通讯录人数</span></span><br><span class="line">    <span class="built_in">abs</span>-&gt;m_Size++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;添加成功！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示联系人"><a href="#显示联系人" class="headerlink" title="显示联系人"></a>显示联系人</h3><p>显示联系人(<strong>showPerson</strong>)函数如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">(AddressBooks *<span class="built_in">abs</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果通讯录中没有人员，提示记录为空</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;m_Size == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;当前通讯录为空！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;当前通讯录有：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;m_Size &lt;&lt; <span class="string">&quot; 人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">abs</span>-&gt;m_Size; ++i) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[i].m_Name &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;性别：&quot;</span> &lt;&lt; (<span class="built_in">abs</span>-&gt;personArray[i].m_Sex == <span class="number">1</span> ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>) &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[i].m_Age &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;电话：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[i].m_Phone &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;住址：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[i].m_Addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检测联系人"><a href="#检测联系人" class="headerlink" title="检测联系人"></a>检测联系人</h3><p>在删除、查找、修改联系人之前，我们有一个公共步骤，就是检查联系人是否存在。<br>所以编写公共函数检测联系人(<strong>isExist</strong>)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 检测联系人是否存在，存在，返回索引，不存在，返回-1 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isExist</span><span class="params">(AddressBooks *<span class="built_in">abs</span>, <span class="keyword">const</span> <span class="built_in">string</span> &amp;name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">abs</span>-&gt;m_Size; ++i) &#123;</span><br><span class="line">        <span class="comment">// 找到用户输入的姓名</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;personArray[i].m_Name == name) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;       <span class="comment">// 返回索引</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 未找到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除联系人"><a href="#删除联系人" class="headerlink" title="删除联系人"></a>删除联系人</h3><p>删除联系人(<strong>deletePerson</strong>)函数如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletePerson</span><span class="params">(AddressBooks *<span class="built_in">abs</span>)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入删除联系人姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">string</span> name;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">  <span class="keyword">int</span> ret = isExist(<span class="built_in">abs</span>, name);</span><br><span class="line">  <span class="comment">/* 删除逻辑：要删除张三，将张三后面的数据，均前提，做一个逻辑上的覆盖即可。 */</span></span><br><span class="line">  <span class="keyword">if</span> (ret != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ret; i &lt; <span class="built_in">abs</span>-&gt;m_Size; ++i) &#123;</span><br><span class="line">      <span class="comment">// 数据前移</span></span><br><span class="line">      <span class="built_in">abs</span>-&gt;personArray[i] = <span class="built_in">abs</span>-&gt;personArray[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">abs</span>-&gt;m_Size--;      <span class="comment">// 更新人数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;删除成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查无此人！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找联系人"><a href="#查找联系人" class="headerlink" title="查找联系人"></a>查找联系人</h3><p>查找联系人(<strong>findPerson</strong>)函数如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPerson</span><span class="params">(AddressBooks *<span class="built_in">abs</span>)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入您要查找的联系人：&quot;</span>;</span><br><span class="line">  <span class="built_in">string</span> name;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> ret = isExist(<span class="built_in">abs</span>, name);</span><br><span class="line">  <span class="keyword">if</span> (ret != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Name &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;性别：&quot;</span> &lt;&lt; (<span class="built_in">abs</span>-&gt;personArray[ret].m_Sex == <span class="number">1</span> ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>) &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Age &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;电话：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Phone &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;住址：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查无此人！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改联系人"><a href="#修改联系人" class="headerlink" title="修改联系人"></a>修改联系人</h3><p>修改联系人(<strong>modifyPerson</strong>)函数如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyPerson</span><span class="params">(AddressBooks *<span class="built_in">abs</span>)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入您要修改的联系人：&quot;</span>;</span><br><span class="line">  <span class="built_in">string</span> name;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> ret = isExist(<span class="built_in">abs</span>, name);</span><br><span class="line">  <span class="keyword">if</span> (ret != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;当前信息为：&quot;</span> &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Name &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;性别：&quot;</span> &lt;&lt; (<span class="built_in">abs</span>-&gt;personArray[ret].m_Sex == <span class="number">1</span> ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>) &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Age &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;电话：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Phone &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;住址：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personArray[ret].m_Addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;修改信息：&quot;</span> &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    <span class="comment">// 修改姓名</span></span><br><span class="line">    <span class="built_in">string</span> newName;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入姓名：&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; newName;</span><br><span class="line">    <span class="built_in">abs</span>-&gt;personArray[ret].m_Name = newName;</span><br><span class="line">    <span class="comment">// 修改性别</span></span><br><span class="line">    <span class="keyword">int</span> newSex = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入性别：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1---男&quot;</span> &lt;&lt; <span class="string">&quot;\t2---女&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您的性别是：&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; newSex;</span><br><span class="line">      <span class="keyword">if</span> (newSex == <span class="number">1</span> || newSex == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;personArray[ret].m_Sex = newSex;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改年龄</span></span><br><span class="line">    <span class="keyword">int</span> newAge = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入年龄：&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; newAge;</span><br><span class="line">      <span class="keyword">if</span> (newAge &gt;= <span class="number">1</span> &amp;&amp; newAge &lt;= <span class="number">150</span>) &#123;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;personArray[ret].m_Age = newAge;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改电话</span></span><br><span class="line">    <span class="built_in">string</span> newPhone;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入电话：&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; newPhone;</span><br><span class="line">    <span class="built_in">abs</span>-&gt;personArray[ret].m_Phone = newPhone;</span><br><span class="line">    <span class="comment">// 修改住址</span></span><br><span class="line">    <span class="built_in">string</span> newAddress;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入家庭住址：&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; newAddress;</span><br><span class="line">    <span class="built_in">abs</span>-&gt;personArray[ret].m_Addr = newAddress;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;修改成功！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查无此人！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清空联系人"><a href="#清空联系人" class="headerlink" title="清空联系人"></a>清空联系人</h3><p>清空联系人(<strong>clearPerson</strong>)函数如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearPerson</span><span class="params">(AddressBooks *<span class="built_in">abs</span>)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您将要清空通讯录！请您再次确认！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入 y 回车确认：&quot;</span>;</span><br><span class="line">  <span class="keyword">char</span> makeSure;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; makeSure;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (makeSure == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">abs</span>-&gt;m_Size = <span class="number">0</span>;    <span class="comment">// 没必要一个个删除，只需要逻辑清零即可</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通讯录已经清空！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通讯录完好！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="退出通讯录"><a href="#退出通讯录" class="headerlink" title="退出通讯录"></a>退出通讯录</h3><p>退出通讯录功能，通过 return 0 来实现，在人际交互过程中，采用 cin int 变量来实现用户输入，所以采用 switch-case 的方式更合理，在用户输入 0 的时候，return 0 即可退出通讯录。</p><p>在 win 系统 Visual Studio 中，还可以使用 system 相关命令，可以使得整个系统界面更加美观。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++基础语法 </tag>
            
            <tag> 通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表-01</title>
      <link href="/posts/3cef11b2/"/>
      <url>/posts/3cef11b2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><strong>链表</strong>与数组相似，链表也是一种线性数据结构。这里有一个图例：</p><div style="width:70%; margin:auto;"><img src="/posts/3cef11b2/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%9B%BE%E4%BE%8B.png" class=""></div><p>如图中所示，链表中的每个元素实际上是一个单独的对象，而所有对象都通过每个元素中的引用字段链接在一起。</p><p>链表有两种类型：<strong>单链表和双链表</strong>。上面给出的图例是一个单链表，以下是双链表的图例：</p><a id="more"></a><div style="width:70%; margin:auto;"><img src="/posts/3cef11b2/%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%9B%BE%E4%BE%8B.png" class=""></div><p>对于链表，需要掌握的内容如下：</p><ul><li>了解单链表和双链表的结构；</li><li>在单链表或双链表中实现遍历、插入和删除；</li><li>分析在单链表或双链表中的各种操作的复杂度；</li><li>在链表中使用双指针技巧（快指针慢指针技巧）；</li><li>解决一些经典问题，例如反转链表；</li><li>分析你设计的算法的复杂度；</li><li>积累设计和调试的经验。</li></ul><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>单链表中的每个结点不仅包含值，还包含链接到下一个结点的引用字段。通过这种方式，单链表将所有结点按顺序组织起来。</p><div style="width:70%; margin:auto;"><img src="/posts/3cef11b2/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%9B%BE%E4%BE%8B.png" class=""></div><p>图中蓝色的箭头显示单个链表中的结点是如何组合在一起的。</p><p>以下是单链表中结点的典型定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单链表定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SinglyListNode</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> val;</span><br><span class="line">  SinglyListNode *next;   <span class="comment">// 定义一个指针指向结构体</span></span><br><span class="line">  SinglyListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>)&#123;&#125;  <span class="comment">// 初始化 val 为 x，next指向 NULL；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大多数情况下，我们将使用头结点（第一个结点）来表示整个链表。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>与数组不同，单链表中的元素访问，无法在常量时间内完成，假如说我们想要获得第 i 个元素，我们必须从头结点逐个遍历。我们按照索引来访问元素平均要花费<em>O(N)</em>时间，其中 N 是链表长度。</p><p>例如在上面的示例中，头结点是 23。访问第 3 个结点的唯一方法是使用头结点中的 “next” 字段到达第 2 个结点（结点 6）; 然后使用结点 6 的 “next” 字段，我们能够访问第 3 个结点。</p><p>那为什么，链表在索引访问数据时具有如此糟糕的性能（与数组相比），但是链表还必须要掌握那么多。之后来介绍链表的插入和删除操作，来了解链表的好。</p><h2 id="添加操作-单链表"><a href="#添加操作-单链表" class="headerlink" title="添加操作-单链表"></a>添加操作-单链表</h2><p>如果我们想在给定的结点 prev 之后添加新值，我们应该：</p><p>1.使用给定值初始化新结点 cur；</p><div style="width:70%; margin:auto;"><img src="/posts/3cef11b2/%E5%8D%95%E9%93%BE%E8%A1%A8%E6%B7%BB%E5%8A%A01.png" class=""></div><p>2.将 cur 的“next”字段链接到 prev 的下一个结点 next；</p><div style="width:70%; margin:auto;"><img src="/posts/3cef11b2/%E5%8D%95%E9%93%BE%E8%A1%A8%E6%B7%BB%E5%8A%A02.png" class=""></div><p>3.将 prev 中的“next”字段链接到 cur</p><div style="width:70%; margin:auto;"><img src="/posts/3cef11b2/%E5%8D%95%E9%93%BE%E8%A1%A8%E6%B7%BB%E5%8A%A03.png" class=""></div><p>与数组不同，链表不需要将所有元素移动到插入元素之后。因此，可以实现在<em>O(1)</em>时间复杂度中将新结点插入到链表中，这非常高效。</p><h3 id="在开头添加结点"><a href="#在开头添加结点" class="headerlink" title="在开头添加结点"></a>在开头添加结点</h3><p>众所周知，我们使用头结点来代表整个列表。<br>因此，在列表开头添加新节点时更新头结点 head 至关重要。</p><ol><li>初始化一个新结点 cur；</li><li>将新结点链接到我们的原始头结点 head。</li><li>将 cur 指定为 head。</li></ol><p>例如，让我们在列表的开头添加一个新结点 9。</p><p>1.我们初始化一个新结点 9 并将其链接到当前头结点 23。</p><div style="width:70%; margin:auto;"><img src="/posts/3cef11b2/%E5%8D%95%E9%93%BE%E8%A1%A8%E6%B7%BB%E5%8A%A04.png" class=""></div><p>2.指定结点 9 为新的头结点。</p><div style="width:70%; margin:auto;"><img src="/posts/3cef11b2/%E5%8D%95%E9%93%BE%E8%A1%A8%E6%B7%BB%E5%8A%A05.png" class=""></div><h3 id="在结尾添加结点"><a href="#在结尾添加结点" class="headerlink" title="在结尾添加结点"></a>在结尾添加结点</h3><blockquote><p>如何在列表的末尾添加新的结点呢？我们还能使用类似的策略么？</p></blockquote><p>我们新初始化一个结点，将 15 的指针指向新结点即可。</p><h2 id="删除操作-单链表"><a href="#删除操作-单链表" class="headerlink" title="删除操作-单链表"></a>删除操作-单链表</h2><p>如果我们想从单链表中删除现有结点 cur，可以分两步完成：</p><p>1.找到 cur 的上一个结点 prev 及其下一个结点 next；</p><div style="width:70%; margin:auto;"><img src="/posts/3cef11b2/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A41.png" class=""></div><p>2.接下来链接 prev 到 cur 的下一个节点 next。</p><div style="width:70%; margin:auto;"><img src="/posts/3cef11b2/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A42.png" class=""></div><p>在我们的第一步中，我们需要找出 prev 和 next。使用 cur 的参考字段很容易找出 next，但是，我们必须从头结点遍历链表，以找出 prev，它的平均时间是 O(N)，其中 N 是链表的长度。因此，删除结点的时间复杂度将是 _O(N)_。</p><p>空间复杂度为 _O(1)_，因为我们只需要常量空间来存储指针。</p><h3 id="删除第一个结点"><a href="#删除第一个结点" class="headerlink" title="删除第一个结点"></a>删除第一个结点</h3><p>如果我们想删除第一个结点，策略会有所不同。</p><p>正如之前所提到的，我们使用头结点 head 来表示链表。我们的头是下面示例中的黑色结点 23。</p><div style="width:70%; margin:auto;"><img src="/posts/3cef11b2/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A43.png" class=""></div><p>如果想要删除第一个结点，我们可以简单地将下一个结点分配给 head。也就是说，删除之后我们的头将会是结点 6。</p><div style="width:70%; margin:auto;"><img src="/posts/3cef11b2/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A44.png" class=""></div><p>链表从头结点开始，因此结点 23 不再在我们的链表中。</p><h3 id="删除末尾结点"><a href="#删除末尾结点" class="headerlink" title="删除末尾结点"></a>删除末尾结点</h3><blockquote><p>删除最后一个结点呢？我们还能使用类似的策略吗？</p></blockquote><p>我们找到末尾结点的上一个结点，将他的 next 指向空（即将其置为末尾）</p><h2 id="题目：设计链表"><a href="#题目：设计链表" class="headerlink" title="题目：设计链表"></a>题目：设计链表</h2><p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：<strong>val</strong> 和 <strong>next</strong>。<strong>val</strong> 是当前节点的值，<strong>next</strong> 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 <strong>prev</strong> 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。</p><p>在链表类中实现这些功能：</p><ul><li>get(index)：获取链表中第 <strong>index</strong> 个节点的值。如果索引无效，则返回 <strong>-1</strong>。</li><li>addAtHead(val)：在链表的第一个元素之前添加一个值为 <strong>val</strong> 的节点。插入后，新节点将成为链表的第一个节点。</li><li>addAtTail(val)：将值为 <strong>val</strong> 的节点追加到链表的最后一个元素。</li><li>addAtIndex(index,val)：在链表中的第 <strong>index</strong> 个节点之前添加值为 <strong>val</strong> 的节点。如果 <strong>index</strong> 等于链表的长度，则该节点将附加到链表的末尾。如果 <strong>index</strong> 大于链表长度，则不会插入节点。如果 <strong>index</strong> 小于 0，则在头部插入节点。</li><li>deleteAtIndex(index)：如果索引 <strong>index</strong> 有效，则删除链表中的第 <strong>index</strong> 个节点。</li></ul><p>提示：</p><ul><li>所有 val 值都在 [1, 1000] 之内。</li><li>操作次数将在 [1, 1000] 之内。</li><li>请不要使用内置的 LinkedList 库。</li></ul><p><strong>个人理解</strong>：<br>这个没啥好说的，细心点，一点点写，一步步看，就成了。</p><h3 id="单链表实现"><a href="#单链表实现" class="headerlink" title="单链表实现"></a>单链表实现</h3><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    Node *next;  <span class="comment">// 定义一个next指针指向这个结构体</span></span><br><span class="line">    <span class="comment">/* 初始化节点方式，将x赋值给val，node指针赋值给next指针 */</span></span><br><span class="line">    Node(<span class="keyword">int</span> x): val(x), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  Node *head; <span class="comment">// 定义头指针</span></span><br><span class="line">  <span class="keyword">int</span> size;   <span class="comment">// 定义链表大小</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">/** 初始化数据结构 */</span></span><br><span class="line">  MyLinkedList() &#123;        <span class="comment">// 初始化链表</span></span><br><span class="line">    head = <span class="literal">nullptr</span>;        <span class="comment">// 头部为空</span></span><br><span class="line">    size = <span class="number">0</span>;           <span class="comment">// 大小为0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 获取链表中第index个节点的值。 如果索引无效，则返回-1。 */</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)  <span class="comment">// 索引无效</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    Node *p = head;     <span class="comment">// 定义指针 p 指向链表头部</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;          <span class="comment">// 从i到 index 就是 p 向后移动的步数</span></span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; i &lt; index)&#123;</span><br><span class="line">      p = p -&gt; next;  <span class="comment">// 这个 next 表示，将 p 指向下一个节点，不是指针 next</span></span><br><span class="line">      i++;            <span class="comment">// 向后移动一步</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p) <span class="keyword">return</span> p -&gt; val;    <span class="comment">// 返回 p 指向结构体中的值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 在链接列表的第一个元素之前添加一个值为val的节点。插入后，新节点将成为链表的第一个节点。 */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addAtHead</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    Node *p = <span class="keyword">new</span> Node(val);  <span class="comment">// 定义指针 p，新建了节点，值为 val, 指针为 head</span></span><br><span class="line">    p -&gt; next = head;</span><br><span class="line">    head = p;       <span class="comment">// 把 head 置为 p 指向的内存</span></span><br><span class="line">    ++size;         <span class="comment">// 链表大小加一</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 将val的节点追加到链接列表的最后一个元素。 */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addAtTail</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    Node *p = <span class="keyword">new</span> Node(val);    <span class="comment">// 定义一个 p 获取 head 位置</span></span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)&#123;        <span class="comment">// 如果链表为空，直接将新节点作为头节点</span></span><br><span class="line">      head = p;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *q = head;             <span class="comment">// q 复制 head 位置</span></span><br><span class="line">    <span class="keyword">while</span>(q -&gt; next)            <span class="comment">// 从头开始把 q 一直向后遍历完毕</span></span><br><span class="line">      q = q -&gt; next;</span><br><span class="line">    q -&gt; next = p;              <span class="comment">// 在最后添加一个新的节点，值为val</span></span><br><span class="line">    ++size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 在链接列表的第index个节点之前添加一个值为val的节点。如果index等于链表的长度，则该节点将附加到链表的末尾。如果index大于长度，则不会插入该节点。 */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index &gt; size)  <span class="keyword">return</span>;       <span class="comment">// 大于长度，不插入节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(index &lt;= <span class="number">0</span>)&#123;                 <span class="comment">// 小于等于0，直接在头部插入即可</span></span><br><span class="line">      addAtHead(val);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *p = head;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; i &lt; index - <span class="number">1</span>)&#123;      <span class="comment">// 从头开始移动</span></span><br><span class="line">      p = p -&gt; next;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *q = <span class="keyword">new</span> Node(val);        <span class="comment">// p 是索引节点的前节点，所以 p -&gt; next 插入 q</span></span><br><span class="line">    <span class="keyword">if</span>(p)&#123;</span><br><span class="line">      q -&gt; next = p -&gt; next;      <span class="comment">// 将 p -&gt; next 指向 q -&gt; next</span></span><br><span class="line">      p -&gt; next = q;              <span class="comment">// 将节点 q 指向 p -&gt; next</span></span><br><span class="line">    &#125;</span><br><span class="line">    ++size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 如果索引有效，请删除链接列表中的第index个节点。 */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)  <span class="keyword">return</span>;     <span class="comment">// 索引无效</span></span><br><span class="line">    <span class="keyword">if</span>(index == <span class="number">0</span> &amp;&amp; head != <span class="literal">nullptr</span>)&#123;          <span class="comment">// index 为 0，直接删除 head 节点</span></span><br><span class="line">      Node *del = head;</span><br><span class="line">      head = head -&gt; next;</span><br><span class="line">      <span class="keyword">delete</span> del;</span><br><span class="line">      --size;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *p = head;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 要删除index，我们需要找到他的前驱节点，然后指向他的后驱即可。 */</span></span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; i &lt; index - <span class="number">1</span>)&#123;</span><br><span class="line">      p = p -&gt; next;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span>;          <span class="comment">// index 超过链表范围，删除失败</span></span><br><span class="line">    <span class="keyword">if</span>(p -&gt; next)&#123;</span><br><span class="line">      Node *del = p-&gt;next;    <span class="comment">// 删除节点指向 p -&gt; next</span></span><br><span class="line">      p -&gt; next = del -&gt; next;    <span class="comment">// 将 p -&gt; next 指向 del -&gt; next</span></span><br><span class="line">      <span class="keyword">delete</span> del;</span><br><span class="line">      --size;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="双链表实现"><a href="#双链表实现" class="headerlink" title="双链表实现"></a>双链表实现</h3><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    Node *next, *prev;  <span class="comment">// 定义一个next和prev</span></span><br><span class="line">    <span class="comment">/* 初始化节点方式，将x赋值给val，node指针赋值给next指针 */</span></span><br><span class="line">    Node(<span class="keyword">int</span> x): val(x), next(<span class="literal">nullptr</span>), prev(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  Node *head, *tail;  <span class="comment">// 定义头指针</span></span><br><span class="line">  <span class="keyword">int</span> size;           <span class="comment">// 定义链表大小</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">/** 初始化数据结构 */</span></span><br><span class="line">  MyLinkedList() &#123;        <span class="comment">// 初始化链表</span></span><br><span class="line">    head = <span class="literal">nullptr</span>;       <span class="comment">// 头部为空</span></span><br><span class="line">    tail = <span class="literal">nullptr</span>;       <span class="comment">// 尾部为空</span></span><br><span class="line">    size = <span class="number">0</span>;             <span class="comment">// 大小为0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 获取链表中第index个节点的值。 如果索引无效，则返回-1。 */</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)  <span class="comment">// 索引无效</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    Node *p = head;     <span class="comment">// 定义指针 p 指向链表头部</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;          <span class="comment">// 从i到 index 就是 p 向后移动的步数</span></span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; i &lt; index)&#123;</span><br><span class="line">      p = p -&gt; next;    <span class="comment">// 这个 next 表示，将 p 指向下一个节点，不是指针 next</span></span><br><span class="line">      i++;              <span class="comment">// 向后移动一步</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p) <span class="keyword">return</span> p -&gt; val;          <span class="comment">// 返回 p 指向结构体中的值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 在链接列表的第一个元素之前添加一个值为val的节点。插入后，新节点将成为链表的第一个节点。 */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addAtHead</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">      Node *node = <span class="keyword">new</span> Node(val);</span><br><span class="line">      node -&gt; next = head;</span><br><span class="line">      head -&gt; prev = node;</span><br><span class="line">      head = node;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;          <span class="comment">// 头为空，那尾肯定也是空</span></span><br><span class="line">      head = <span class="keyword">new</span> Node(val);</span><br><span class="line">      tail = head;</span><br><span class="line">    &#125;</span><br><span class="line">    ++size;         <span class="comment">// 链表大小加一</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 将val的节点追加到链接列表的最后一个元素。 */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addAtTail</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tail != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">      Node *node = <span class="keyword">new</span> Node(val);</span><br><span class="line">      node -&gt; prev = tail;</span><br><span class="line">      tail -&gt; next = node;</span><br><span class="line">      tail = node;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;           <span class="comment">// 尾为空，那头肯定也是空</span></span><br><span class="line">      tail = <span class="keyword">new</span> Node(val);</span><br><span class="line">      head = tail;</span><br><span class="line">    &#125;</span><br><span class="line">    ++size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 在链接列表的第index个节点之前添加一个值为val的节点。如果index等于链表的长度，则该节点将附加到链表的末尾。如果index大于长度，则不会插入该节点。 */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index &lt;= <span class="number">0</span>)&#123;                 <span class="comment">// 小于等于0，直接在头部插入即可</span></span><br><span class="line">      addAtHead(val);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index == size)&#123;              <span class="comment">// index 等于 size，直接在尾部插入即可</span></span><br><span class="line">      addAtTail(val);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index &gt; size)  <span class="keyword">return</span>;       <span class="comment">// 大于长度，不插入节点</span></span><br><span class="line"></span><br><span class="line">    Node *p = <span class="literal">nullptr</span>, *cur = head;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur &amp;&amp; i &lt; index)&#123;        <span class="comment">// 从头开始移动</span></span><br><span class="line">      p = cur;</span><br><span class="line">      cur = cur -&gt; next;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *node = <span class="keyword">new</span> Node(val);     <span class="comment">// 创建要插入的节点</span></span><br><span class="line">    <span class="comment">/* 特殊情况已经排除了，现在 p 和 cur 都在链表内。 */</span></span><br><span class="line">    p -&gt; next = node;</span><br><span class="line">    node -&gt; prev = p;</span><br><span class="line">    node -&gt; next = cur;</span><br><span class="line">    cur -&gt; prev = node;</span><br><span class="line">    ++size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 如果索引有效，请删除链接列表中的第index个节点。 */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)  <span class="keyword">return</span>;     <span class="comment">// 索引无效</span></span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;           <span class="comment">// index为头节点，删除头节点</span></span><br><span class="line">      Node *del = head;</span><br><span class="line">      head = head -&gt; next;</span><br><span class="line">      <span class="keyword">if</span>(head)&#123;</span><br><span class="line">        head -&gt; prev = <span class="literal">nullptr</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        tail = <span class="literal">nullptr</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">delete</span> del;</span><br><span class="line">      --size;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index == size - <span class="number">1</span>)&#123;    <span class="comment">// index为尾节点，删除尾节点</span></span><br><span class="line">      Node *del = tail;</span><br><span class="line">      tail = tail -&gt; prev;</span><br><span class="line">      <span class="keyword">if</span>(tail)&#123;</span><br><span class="line">        tail -&gt; next = <span class="literal">nullptr</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">delete</span> del;</span><br><span class="line">      --size;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *p = <span class="literal">nullptr</span>, *cur = head;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 要删除index， */</span></span><br><span class="line">    <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i == index)&#123;</span><br><span class="line">        Node *del = cur;</span><br><span class="line">        p -&gt; next = cur -&gt; next;</span><br><span class="line">        <span class="keyword">if</span>(cur -&gt; next)&#123;</span><br><span class="line">          cur -&gt; next -&gt;prev = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> del;</span><br><span class="line">        --size;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      p = cur;</span><br><span class="line">      cur = cur -&gt; next;</span><br><span class="line">      ++i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本文为学习记录，参考之处较多，<strong>如果有侵权内容，请联系我立即删除</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组和字符串-06</title>
      <link href="/posts/bb80b607/"/>
      <url>/posts/bb80b607/</url>
      
        <content type="html"><![CDATA[<h2 id="数组相关技术"><a href="#数组相关技术" class="headerlink" title="数组相关技术"></a>数组相关技术</h2><p>1.这里有一些类似于数组的数据结构，但具有一些不同的属性：<br><a href="https://www.xudongpo.cn/posts/64268907/">字符串</a>、哈希表(散列表)、链表、<a href="https://www.xudongpo.cn/tags/%E9%98%9F%E5%88%97/">队列</a>、<a href="https://www.xudongpo.cn/tags/%E6%A0%88/">栈</a></p><p>2.我们其实可以调用内置函数来对数组进行排序。但是，理解一些广泛使用的排序算法的原理及其复杂度是很有用的。</p><p>3.二分查找也是一种很重要的技术，用于在排序数组中搜索特定的元素。</p><a id="more"></a><p>4.我们也了解到了双指针技巧，这一技巧也可以被用来解决：</p><ul><li><p>链表中的慢指针和快指针问题</p></li><li><p>滑动窗口问题</p><p>5.双指针技巧有时候与贪心算法有关，它可以帮助我们设计指针的移动策略。</p></li></ul><p>接下来做一些题目，对数组和字符串进行总结：</p><h3 id="题目：杨辉三角"><a href="#题目：杨辉三角" class="headerlink" title="题目：杨辉三角"></a>题目：杨辉三角</h3><p>给定一个非负数 numRows，生成杨辉三角的前 numRows 行。</p><p><img src="%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92.gif" alt=" "></p><p style = "font-size:12px; text-align:center;">在杨辉三角中，每个数是它左上方和右上方的数的和。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: 5</span><br><span class="line">输出:</span><br><span class="line">[   [1],</span><br><span class="line">   [1,1],</span><br><span class="line">  [1,2,1],</span><br><span class="line"> [1,3,3,1],</span><br><span class="line">[1,4,6,4,1]]</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>我们找规律发现，下一行是由上一行复制下来然后整体错位一个再相加。<br>啥意思呢，就是说，121 = 110 + 011，也就是当前值，由它上面和左上值相加。<br>利用动态规划就可以搞定：首先定义一个矩阵，然后全部置 0 边置 1。<br>然后动态方程 ans[i][j] = ans[i-1][j-1] + ans[i-1][j]。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans(numRows);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++)&#123;</span><br><span class="line">      ans[i] = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(i+<span class="number">1</span>,<span class="number">0</span>);    <span class="comment">// 全置 0</span></span><br><span class="line">      ans[i][<span class="number">0</span>] = ans[i][i] = <span class="number">1</span>;      <span class="comment">// 边置 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(numRows &lt;= <span class="number">2</span>) <span class="keyword">return</span> ans;      <span class="comment">// 特殊判定</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++)  <span class="comment">// 动态规划</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; ans[i].size()<span class="number">-1</span>; j++)</span><br><span class="line">        ans[i][j] = ans[i<span class="number">-1</span>][j<span class="number">-1</span>] + ans[i<span class="number">-1</span>][j];  <span class="comment">// 动态方程</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：杨辉三角-II"><a href="#题目：杨辉三角-II" class="headerlink" title="题目：杨辉三角 II"></a>题目：杨辉三角 II</h3><p>给定一个非负索引 k 其中 k ≤ 33，返回杨辉三角的第 k 行。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 3</span><br><span class="line">输出: [1,3,3,1]</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>示例可以看出，第 k 行，是索引为 k 的行数，即 k+1 行。<br>还是动态规划，利用前一行和后一行的和的关系。就是开始理解复杂点。<br>第 k 行的最后一位肯定为 0。<br>第 i 位 <strong>k[i]</strong> 是将<strong>上一行</strong>的第 i 位 <strong>k-1[i]</strong> 加上一行第 i-1 位 <strong>k-1[i-1]</strong>。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">rows</span><span class="params">(rowIndex + <span class="number">1</span>)</span></span>; <span class="comment">//根据题目，第k行，大小为 k + 1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rowIndex; i++)&#123;</span><br><span class="line">        rows[i] = <span class="number">1</span>;                <span class="comment">// 最后一位置 1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">1</span>; j--)</span><br><span class="line">          rows[j<span class="number">-1</span>] = rows[j<span class="number">-2</span>] + rows[j<span class="number">-1</span>];  <span class="comment">// 动态方程</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rows;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：反转字符串中的单词-III"><a href="#题目：反转字符串中的单词-III" class="headerlink" title="题目：反转字符串中的单词 III"></a>题目：反转字符串中的单词 III</h3><p>给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;Let&#x27;s take LeetCode contest&quot;</span><br><span class="line">输出: &quot;s&#x27;teL ekat edoCteeL tsetnoc&quot;</span><br><span class="line">注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>这个题一看就很眼熟，就是之前 <a href="../cf4395c7/#题目：反转字符串">反转字符串</a> 和 <a href="../64268907/#题目：翻转字符串里的单词">翻转字符串中的单词</a> 的结合体，没啥说的。<br>一个翻转、一个栈。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">reverseWords</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = s.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;   <span class="comment">// 双指针反转字符串</span></span><br><span class="line">      tmp = s[left];</span><br><span class="line">      s[left] = s[right];</span><br><span class="line">      s[right] = tmp;</span><br><span class="line">      left++;</span><br><span class="line">      right--;</span><br><span class="line">    &#125;</span><br><span class="line">    left = <span class="number">0</span>, right = s.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; st;</span><br><span class="line">    <span class="built_in">string</span> word;            <span class="comment">// 缓存</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;   <span class="comment">// 遍历字符串</span></span><br><span class="line">      <span class="keyword">char</span> c = s[left];     <span class="comment">// 注意这里是char</span></span><br><span class="line">      <span class="keyword">if</span>(!word.empty() &amp;&amp; c == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">        st.push(word);</span><br><span class="line">        word = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c != <span class="string">&#x27; &#x27;</span>)  word += c;</span><br><span class="line">      left++;</span><br><span class="line">    &#125;</span><br><span class="line">    st.push(word);          <span class="comment">// 一定要记得加最后一个单词</span></span><br><span class="line">    <span class="built_in">string</span> ans;</span><br><span class="line">    <span class="keyword">while</span>(!st.empty())&#123;     <span class="comment">// 将字符串出栈</span></span><br><span class="line">      ans += st.top();</span><br><span class="line">      st.pop();</span><br><span class="line">      <span class="keyword">if</span>(!st.empty()) ans += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：寻找旋转排序数组中的最小值"><a href="#题目：寻找旋转排序数组中的最小值" class="headerlink" title="题目：寻找旋转排序数组中的最小值"></a>题目：寻找旋转排序数组中的最小值</h3><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。<br>例如：数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2]。<br>请找出其中最小的元素。你可以假设数组中不存在重复元素。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,4,5,1,2]</span><br><span class="line">输出: 1</span><br><span class="line"></span><br><span class="line">输入: [4,5,6,7,0,1,2]</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>不太明白这个题目的目的，双指针获取最小值很简单啊。看答案很多用的二分法，暂时还没学到，先用双指针做了再说。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;     <span class="comment">// 双指针求最小</span></span><br><span class="line">      <span class="keyword">if</span>(nums[left] &gt; nums[right]) left++;    <span class="comment">// 如果前面大，左指针右移</span></span><br><span class="line">      <span class="keyword">else</span> right--;       <span class="comment">// 否则右指针左移</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[left];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：删除排序数组中的重复项"><a href="#题目：删除排序数组中的重复项" class="headerlink" title="题目：删除排序数组中的重复项"></a>题目：删除排序数组中的重复项</h3><p>给定一个排序数组，你需要在<strong>原地</strong>删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在<strong>原地</strong>修改输入数组 并在使用 O(1)额外空间的条件下完成。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [1,1,2],</span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。</span><br><span class="line"></span><br><span class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br></pre></td></tr></table></figure><p>你不需要考虑数组中超出新长度后面的元素。</p><p><strong>个人理解</strong>：<br>一看到原地，那基本就是双指针做，一个 solw 一个 fast，就可以解决，最后长度就是 slow 的坐标 +1。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!nums.size()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> slow = <span class="number">0</span>;       <span class="comment">// slow fast 双指针即可</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> fast = <span class="number">0</span>; fast &lt; nums.size(); fast++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(nums[slow] != nums[fast])&#123;   <span class="comment">// 不相等，slow 直接移动，然后赋值。</span></span><br><span class="line">        slow++;</span><br><span class="line">        nums[slow] = nums[fast];</span><br><span class="line">      &#125;                               <span class="comment">// 否则 fast 移动跳过重复项</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow + <span class="number">1</span>;    <span class="comment">// 注意这里是是最后长度 需要 +1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：移动零"><a href="#题目：移动零" class="headerlink" title="题目：移动零"></a>题目：移动零</h3><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。<br>必须在原数组上操作，不能拷贝额外的数组。尽量减少操作次数。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>看到原数组，那就是双指针了。只要不是零，就复制，然后移动，最后在末尾补零即可。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> slow = <span class="number">0</span>;           <span class="comment">// slow fast 双指针</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> fast = <span class="number">0</span>; fast &lt; nums.size(); fast++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(nums[fast] != <span class="number">0</span>)&#123;  <span class="comment">// 不为零，复制，移动</span></span><br><span class="line">        nums[slow] = nums[fast];</span><br><span class="line">        slow++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = slow; i &lt; nums.size(); i++)  nums[i] = <span class="number">0</span>;   <span class="comment">// 结尾补零</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本文为学习记录，参考之处较多，<strong>如果有侵权内容，请联系我立即删除</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何“跳出”贫困陷阱？</title>
      <link href="/posts/2cb0b166/"/>
      <url>/posts/2cb0b166/</url>
      
        <content type="html"><![CDATA[<p>今天高考，我上午去医院做核酸检测(为了过两天入校作准备)，路上看到很多街道实行了交通管制，高校门口家长们顶着高温翘首以盼，心里默默给考生加个油，这也让我想到了自己的十年寒窗。</p><p>我穷人家孩子，从小我爸妈就这么教育我：“咱们是农民，你唯一的出路就是拼命学习，考上你就成功了，不然你就回去种地。”<br>虽然我考的不是很好，但终究是个一本，我曾一度以为我离成功不远了。但是随着认知的世界越来越大，我才明白，终我一生，不过是在转轮上奔跑的小仓鼠罢了。</p><p>我不甘心。<br>我天生愚钝没什么天赋，但我相信我可以咬着牙一步步走下去，我把能吃苦也看作是一种天赋。</p><a id="more"></a><h3 id="为什么写这些"><a href="#为什么写这些" class="headerlink" title="为什么写这些"></a>为什么写这些</h3><p>前些天看到一个视频，讲的内容是<strong>《贫穷的本质》</strong>这本书，<strong>当当阅界</strong>这里没库存了，网书就不找了，等书店有库存了再细看。简单看了看介绍以及别人简介和别人写的介绍。书中所讲的也是我一直所迷惑的，也是我所坚信的，</p><p>诺贝尔经济学奖带火了这本书，作者通过对 18 个贫穷国家/地区的调研，举证了海量的穷人之所以是穷人的案例，穷人真的没得选，正所谓：<strong>生而贫穷</strong>。</p><p>我在此谈谈我的看法。不讲国运，不讲家庭，不讲民族文化，因为：<strong>投胎是个技术活。</strong></p><h3 id="贫穷是结果，不是原因"><a href="#贫穷是结果，不是原因" class="headerlink" title="贫穷是结果，不是原因"></a>贫穷是结果，不是原因</h3><p>书中作者猜测，穷人穷是因为吃不饱，因为发现了这样一个循环：</p><p><strong>没有工作就吃不饱 -&gt; 吃不饱就没力气 -&gt; 没力气就没工作</strong></p><p>这样一个恶性循环反复加剧穷人的贫困程度，称之为：“饥饿陷阱”。我更倾向于称之为“贫困陷阱”。</p><p>在这种循环的基础上，按理说，穷人们一拿到薪水，就应该立即购买高热量的食物，获取能量，有了能量，就能让自己在劳动市场获得更大的竞争力，赚取更多的薪水。这样的良性循环不是可以更快的帮助他们逃离“贫困陷阱”么？</p><p>事实上不是的，穷人的思维清奇而坚定，作者的调查发现，食品只占穷人支出的 30%～ 70%。他们将其余的钱均花在了烟、酒、茶、糖甚至节日庆祝上。</p><p>如果对大米、小麦等优质主食进行补贴，你会发现更惊讶的事情，得到补贴的家庭并没有购买更多的粮食用作存储，而是将省下来的钱购买了虾和肉。穷人们的优先选择并不是获取更多的能量（这些能量代表了他们的市场竞争力）而是选择获取了味道和体验更好的能量，即使这些能量并不高效。如果继续加大补贴，这些穷人们甚至会把钱攒下来买 DVD、电视、电话。</p><p>我一开始很难理解他们是怎么想的，但是细细一体味还是有那么点道理。<br>事实上，在当今世界，粮食充裕，饥饿并不是导致贫穷的根本原因，哪怕吃得再饱，也不能让收入大幅提升。为什么穷人不把钱攒下来做更多的事呢？</p><p>你给穷人设计一套完美的计划，先攒钱，再逆袭，但是，穷人压根不相信有美好的未来。穷人还会把大把钱花在婚嫁丧娶上面。在南非，葬礼花多少钱是有社会规范的，死去的婴儿刨个坑埋了就行，而老人/大人的丧礼就得花掉死者一生的积蓄，因艾滋病死去的年轻人是个穷光棍，家里人还得大操大办，花掉家庭 40%的年收入。</p><h3 id="经济条件"><a href="#经济条件" class="headerlink" title="经济条件"></a>经济条件</h3><p>书中用这样一段话描述了穷人生活的沮丧：</p><blockquote><p>他们不会迁怒于自己的命运，而是通过降低标准在增加自己的忍耐力。<br>然而，他们却不一定因此而专注必需品，也不一定会排斥奢侈品。<br>因此，在长达 10 年的极度沮丧期内，所有廉价奢侈品的消费都有所提高。</p></blockquote><p>很显然：相比于爬出贫困陷阱，实现阶级的跨越，非洲穷人们更愿意让自己的生活变得有滋有味。</p><p>穷人穷惯了，这就是<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjklQTAlRTUlQkUlOTclRTYlODAlQTclRTYlOTclQTAlRTUlOEElQTkvMjA5MTU5ND9mcj1hbGFkZGlu" title="https://baike.baidu.com/item/%E4%B9%A0%E5%BE%97%E6%80%A7%E6%97%A0%E5%8A%A9/2091594?fr=aladdin">习得性无助<i class="fa fa-external-link"></i></span>，他们怀疑未来不会变好，怀疑没有机遇，只想让现在的生活过得更愉快。对于享乐的渴求，让他们只关注于当下的生活，尽可能的让日子过的愉快。</p><p><strong>廉价奢侈品是对穷人最好的讽刺。</strong></p><p>更讽刺的是，买轻奢这件事不光非洲穷人在干，全世界的穷人都在干。<br>在新冠疫情期间，有新闻爆出美国之所以迫切复工，是因为绝大多数美国人都拿不出 400 美元的存款以度过没有收入的日子。原因就是美国的穷人非常喜欢消费，有一点钱就去排队买乔丹苹果这些他们根本消费不起的东西。</p><p>这像极了我们很多人的生活，在生活中我觉得很多身边的人包括我在内，做出的决定并不比这些非洲穷人明智。</p><blockquote><p>我不深究以上消息真假，但是我觉得这种情况普遍存在，我上学这些年，身边有存款的朋友屈指可数，除掉家庭贫困的，大部分的学生都是家里给多少花多少。</p></blockquote><p>穷人在生活中很容易做错误的决定，这些决定会让他们越来越穷，比如在较为贫穷的社区，经常看到很多学生穿最新最贵的运动鞋。这类现象在国内也很多，很多穷人用着万元的 iPhone，仅仅看着综艺。</p><p>之前优衣库和动漫联名 T 恤，门店 99，黄牛 150，简简单单一件白 T 恤，引发了大抢购。就这样，穷人们被华而不实的商品掏空了钱包，丧失了爬出贫困陷阱的经济条件。</p><h3 id="精力条件"><a href="#精力条件" class="headerlink" title="精力条件"></a>精力条件</h3><p>但是贫穷也不能全怪消费，没了钱，还有时间，还有剩余的精力啊，这也是爬出贫困陷阱的资本。</p><p>在我看来，都穷到这份上了，更应该抓紧一切机会提升自己，种庄稼的可以同时学学木匠手艺，摆脱单纯出售劳动力的困局。可是事实上不是的，书中说到，欧查和他的两个邻居一年只干了大约 70 天的农活，还有约 30 天的建筑活。一年中他们除了照顾自家牲畜，就是等着拿薪水。他们耗费着大量的时间看电视。</p><p>已经丧失了经济条件，他们还在挥霍着所剩无几的精力，这更加丧失了他们爬出贫困陷阱的机会。</p><p>这像极了我，给自己定一个一个的目标，考级，学算法，写文章，学软件做兼职。但是一天的工作学习太累了，晚上到家真的没有精力看书了。只能打开抖音、B 站、王者荣耀，刷刷小视频打打游戏当作放松。</p><p>可是刷小视频<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOUQlODAlRTYlOTclQjYlRTklOTclQjQvNTMzNzgxOD9mcj1hbGFkZGlu" title="https://baike.baidu.com/item/%E6%9D%80%E6%97%B6%E9%97%B4/5337818?fr=aladdin">杀时间<i class="fa fa-external-link"></i></span>真的起到放松的作用了么？我觉得适当的看抖音肯定是有放松效果的，这都在一个前提：有着足够的自控力。</p><p>如果没有自控了，或者说像我这样玩游戏好胜心强的人，劝你远离这些东西。有人要说了：“我白天工作一整天，晚上自己的时间放松一下怎么了”。而且白天工作越累晚上越要多的时间放松，所以我们的睡眠时间，从十一二点慢慢到了一二点。这些垃圾娱乐只会空耗我们的精力，打一晚上游戏会让你放松么？我觉得不会。</p><p>当我们耗尽精力后，不得不逼着自己睡觉，第二天拖着更疲惫的身体开启新的循环。</p><p>所以穷人爬不出贫困陷阱的原因有两个：</p><ul><li>工作太累，缺乏享受</li><li>工作太累，缺乏娱乐</li></ul><p>然后购买无用的奢侈品，空耗金钱，导致没有资产；进行劣质娱乐，空耗精力，没有积累。<br>最终导致一天白过，就没有积累下来逃离陷阱的资本，接下来继续疲于奔命。</p><p>想想就让人绝望。</p><h3 id="如何跳出贫困陷阱呢？"><a href="#如何跳出贫困陷阱呢？" class="headerlink" title="如何跳出贫困陷阱呢？"></a>如何跳出贫困陷阱呢？</h3><p>首先意识到这个陷阱，我想稍微了解一下经济学，或者我们国家的这个状态，大部分人都是意识到这个陷阱的，不然不会内卷的那么严重。</p><p>简单解释一下什么是<strong>内卷</strong>：</p><p>我国是一个人口大国，国家统计局数据，截至 2019 年底，中国大陆总人口为 14.05 亿。<br>疫情期间，看到为了卫生纸，酵母粉，排起长队的人群，也是挺震惊的。也是在这个假期，看一些文章，了解到了内卷这个词。<br>那到底内卷是啥呢？<br>我国人口多，资源却并不匹配，<strong>过剩的人口为了争抢有限的资源投入无限的精力，最后所获得的资源没有丝毫增多，倒是卷进了几乎无穷无尽的投入，几近得不偿失。</strong><br>就好比看一场演唱会，第一排的人为了获得更好的观看体验站起来了，第二排的人随之也要站起来才能获得更好的体验，随后全场的人都站了起来。最后的结果呢？和大家一起坐下看没啥区别，就是腿站的有点发麻。</p><p>所以说在内卷如此严重的今天，想来大部分人都认识到了贫困陷阱这个东西，不然高考就不会有这么多学子，图书馆就不会满满当当的人了。</p><p>但是！很多穷人不一定，资源的匮乏限制了他们的认知，让他们只贪图眼前的享乐，这个我是了解的，我高考填报志愿甚至都不懂什么是 985 什么是 211。认识不到更别说采取行动了。</p><p>《稀缺》一书创造了一个新的名词：<strong>带宽</strong>。</p><p>忙碌的生活占据了穷人太多的心智。让他们没有多余的精力为未来谋划，穷人太缺乏娱乐，以至于形成了管窥效应。他们好像从一个小直筒里面看世界，直筒的另一端只有享受，他们看不见其他的东西。<br>这也是我们最大的优势，我们已经意识到陷阱的存在了。要知道辛苦工作一天的目标是积累，而不是循环。<br>积累的越多，跳出去的越早。</p><p>视频中也创造了一个新词叫：<strong>生活必要支出</strong>。<br>生活必要支出包括维持你个人生活，赚取收入，维持社会关系，所需要支出的一切时间和金钱。这个东西，对于你逃离贫困陷阱没有任何的帮助，这就是一个固定的债主，你每天一睁眼，你就要被扣去相应的时间和金钱。</p><p>真正对你有帮助的是剩下的时间和金钱，这些才可以帮助你逃离贫困陷阱。</p><h4 id="先说时间"><a href="#先说时间" class="headerlink" title="先说时间"></a>先说时间</h4><p>我们每天生活必要支出的时间有哪些呢？</p><p>几乎一白天，只有晚上下班或者放学后才是我们的个人时间，这些时间我觉得大约 3 ～ 4 小时。这还是不加班，单身狗不用陪女友，从不打游戏，没啥朋友不用应酬的基础上。要是你加班，陪女友，还应酬，那么恭喜你，你的个人时间为 0。你要是再立了一个不赢一局不睡觉的 FLAG，那大概率会透支你第二天的精力。<br>这样的话，<strong>连体面的循环都维持不了，更别提跳出贫困陷阱了</strong>。</p><h4 id="再说金钱"><a href="#再说金钱" class="headerlink" title="再说金钱"></a>再说金钱</h4><p>钱是我们跳出贫困陷阱的另一工具，假设一个年轻人，刚毕业在一线城市上班，税后工资 1 万元。</p><p>他不抽烟，不喝酒，不打游戏，没有任何烧钱爱好，不贪吃喝，身体健康从不生病。那么这个年轻人每月可以省下 4000 元。然后他买了一台 iPhone11 pm 顶配。所以，他买一台 iPhone 花掉的只是 12000 元么？不是的，他花掉的是三个月来积累的所有的逃离贫困陷阱的资产。<br>更不要提他如果家庭条件不好，结婚不能出房出车出彩礼，那他<strong>基本上没有跳出贫困陷阱的机会了</strong>。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所以，正在阅读的你，摸着胸口想想，扣除生活必要支出，你还有多少可以跳出贫困陷阱的资本(时间+金钱)。</p><p>如果这时候，有一个每周让你多赚 2000 的外快，但是！需要你 100 个小时学习基础技能，8000 块钱买电脑，你能抓住这个机会么？</p><p>你要发现，自己每天都在重复的无聊工作(学习)，自有意义，进而感受到积累的快乐。</p><p><strong>在内卷如此严重的今天，在阶级上升通变窄的今天，只有把认知提升到了为了阶级跃迁做积累的份上。才可能真正的摆脱贫困陷阱。</strong></p><p>当当阅界要关门了，还有些没写完，走回宾馆的路上神清气爽，天已经黑了，不过还是能看到万里晴空，耳边放着《How Do I Love Thee》宛如圣者在吟唱，莫名的有些热泪盈眶。</p><p>我想要 - <strong>让未来的自己觉得现在值得。让现在的自己觉得过去值得。</strong></p><p>BTW：下次写文章还是得一口气写完，不然思绪容易断掉。以前真是小瞧我 mac 的续航了呢(๑• . •๑)</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组和字符串-05</title>
      <link href="/posts/cf4395c7/"/>
      <url>/posts/cf4395c7/</url>
      
        <content type="html"><![CDATA[<h2 id="双指针技巧-—-情景-1"><a href="#双指针技巧-—-情景-1" class="headerlink" title="双指针技巧 — 情景 1"></a>双指针技巧 — 情景 1</h2><p>对数组进行迭代的时候，我们经常都是从第一个元素迭代到最后(用一个指针)，然而有的时候我们会采用两个指针进行迭代。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>一个经典问题：</p><p>反转数组中的元素。比如数组为[hello]，反转之后变为[olleh]</p><a id="more"></a><p>双指针技巧，思想是分别将两个指针分别指向数组的开头及末尾，然后将其指向的元素进行交换，再将指针向中间移动一步，继续交换，直到这两个指针相遇。</p><p>参考代码(python):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseString</span>(<span class="params">self, s</span>):</span></span><br><span class="line">  i,j = <span class="number">0</span>, <span class="built_in">len</span>(s) - <span class="number">1</span>       <span class="comment"># 左右指针</span></span><br><span class="line">  <span class="keyword">while</span> i &lt; j:              <span class="comment"># 遍历</span></span><br><span class="line">    s[i], s[j] = s[j], s[i] <span class="comment"># 交换</span></span><br><span class="line">    i += <span class="number">1</span>                  <span class="comment"># 移动指针</span></span><br><span class="line">    j -= <span class="number">1</span></span><br></pre></td></tr></table></figure><p>总结：<br>使用双指针的<strong>典型场景</strong>之一是：<strong>从两端向中间迭代数组</strong>。<br>这时你可以使用双指针技巧：<strong>一个指针从头部开始，而另一个指针从尾部开始</strong>。<br>这种技巧经常再排序数组中使用。</p><p>继续刷题=￣ ω ￣=</p><h3 id="题目：反转字符串"><a href="#题目：反转字符串" class="headerlink" title="题目：反转字符串"></a>题目：反转字符串</h3><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。<br>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。<br>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br><span class="line"></span><br><span class="line">输入：[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>没啥好说的，上面的 python 代码就是。定义两个指针，分别在字符串两头，进行调换即可。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = s.size() - <span class="number">1</span>;   <span class="comment">// 定义左右指针</span></span><br><span class="line">    <span class="keyword">char</span> tmp;     <span class="comment">// 定义缓存值</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;   <span class="comment">// 遍历字符串</span></span><br><span class="line">      tmp = s[left];        <span class="comment">// 交换元素</span></span><br><span class="line">      s[left] = s[right];</span><br><span class="line">      s[right] = tmp;</span><br><span class="line">      left++;               <span class="comment">// 移动指针</span></span><br><span class="line">      right--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：数组拆分-I"><a href="#题目：数组拆分-I" class="headerlink" title="题目：数组拆分 I"></a>题目：数组拆分 I</h3><p>给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), …, (an, bn) ，使得从 1 到 n 的 min(ai, bi) 总和最大。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,4,3,2]</span><br><span class="line">输出: 4</span><br><span class="line">解释: n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4).</span><br></pre></td></tr></table></figure><p>提示:<br>n 是正整数,范围在 [1, 10000] 数组中的元素范围在 [-10000, 10000]</p><p><strong>个人理解</strong>：<br>这个也没啥做的，要求两数比较取最小，那就从小到大排序，然后两两组和，肯定是取奇数位。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">arrayPairSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;    <span class="comment">// 结果</span></span><br><span class="line">    sort(nums.begin(), nums.end());   <span class="comment">// 从小到大排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i+=<span class="number">2</span>)</span><br><span class="line">      sum += nums[i];   <span class="comment">// 根据题目要求取较小值，即偶数位</span></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>代码如下(python):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">arrayPairSum</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">    <span class="comment"># 此处::2表示，从起始到结束步长为2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">sorted</span>(nums)[::<span class="number">2</span>])   <span class="comment"># 排序求和一步到位</span></span><br></pre></td></tr></table></figure><h3 id="题目：两数之和-II-输入有序数组"><a href="#题目：两数之和-II-输入有序数组" class="headerlink" title="题目：两数之和 II - 输入有序数组"></a>题目：两数之和 II - 输入有序数组</h3><p>给定一个已按照<strong>升序排列</strong>的有序数组，找到两个数使得它们相加之和等于目标数。<br>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2</p><p>说明:</p><ul><li>返回的下标值（index1 和 index2）不是从零开始的。</li><li>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</li></ul><p>示例:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: numbers = [2, 7, 11, 15], target = 9</span><br><span class="line">输出: [1,2]</span><br><span class="line">解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>还是双指针的应用，两个指针分别指向两头，因为整个数组已经升序排列过了，所以如果两头相加大于目标值，那就将尾部提前，反之将头部向后。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; numbers, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = numbers.size() - <span class="number">1</span>;     <span class="comment">// 定义双指针</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;    <span class="comment">// 循环查找</span></span><br><span class="line">      <span class="keyword">int</span> sum = numbers[left] + numbers[right];   <span class="comment">// 求和</span></span><br><span class="line">      <span class="keyword">if</span>(sum == target) <span class="keyword">return</span> &#123;left+<span class="number">1</span>, right+<span class="number">1</span>&#125;; <span class="comment">//相等输入</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; target) left++;   <span class="comment">// 小于，头部向后移动</span></span><br><span class="line">      <span class="keyword">else</span> right--;                   <span class="comment">// 大于，尾部向前移动</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="双指针技巧-—-情景-2"><a href="#双指针技巧-—-情景-2" class="headerlink" title="双指针技巧 — 情景 2"></a>双指针技巧 — 情景 2</h2><p>有时，我们可以使用两个不同步的指针来解决问题，即快慢指针。与情景一不同的是，两个指针的运动方向是相同的，而非相反。</p><p>示例：</p><p>依然是一个经典问题：</p><p>给你一个数组 nums 和一个值 val，你需要<strong>原地</strong>移除所有数值等于 val 的元素，并返回移除后数组的新长度。<br>如果没有空间复杂度上的限制，那就更容易了。我们可以初始化一个新的数组来存储答案。如果元素不等于给定的目标值，则迭代原始数组并将元素添加到新的数组中。<br>实际上，它相当于使用了两个指针，一个用于原始数组的迭代，另一个总是指向新数组的最后一个位置。</p><p><strong>如果考虑空间限制</strong>，只能在原数组上进行操作的话，此时，我们就可以采用快慢指针的思想：初始化一个快指针 fast 和一个慢指针 slow，fast 每次移动一步，而 slow 只当 fast 指向的值不等于 val 时才移动一步。</p><p>示例代码如下(python):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeElement</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">  slow = <span class="number">0</span></span><br><span class="line">  n = <span class="built_in">len</span>(nums)</span><br><span class="line">  <span class="keyword">for</span> fast <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> nums[fast] != val:</span><br><span class="line">      nums[slow] = nums[fast]</span><br><span class="line">      slow += <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure><p>总结：<br>这是使用双指针技巧的另一种非常常见的情况：<strong>同时有一个慢指针和一个快指针</strong>。<br>解决这类问题的关键是：<strong>确定两个指针的移动策略</strong>。<br>与前一个场景类似，你有时可能需要在使用双指针技巧之前对数组进行排序，也可能需要运用贪心法则来决定你的运动策略。</p><p>题目走起来(๑•ั็ω•็ั๑)</p><h3 id="题目：移除元素"><a href="#题目：移除元素" class="headerlink" title="题目：移除元素"></a>题目：移除元素</h3><p>给你一个数组 nums 和一个值 val，你需要<strong>原地</strong>移除所有数值等于 val 的元素，并返回移除后数组的新长度。<br><strong>不要使用额外的数组空间</strong>，你必须仅使用 O(1) 额外空间并<strong>原地</strong>修改输入数组。<br>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [3,2,2,3], val = 3,</span><br><span class="line">函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line">给定 nums = [0,1,2,2,3,0,4,2], val = 2,</span><br><span class="line">函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span><br><span class="line">注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> slow = <span class="number">0</span>;   <span class="comment">// 定义 slow fast两个指针</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> fast = <span class="number">0</span>; fast &lt; nums.size(); fast++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(nums[fast] != val)&#123;      <span class="comment">// 如果 fast 值不对</span></span><br><span class="line">        nums[slow] = nums[fast];  <span class="comment">// 将 fast 给 slow</span></span><br><span class="line">        slow++;                   <span class="comment">// 移动 slow</span></span><br><span class="line">      &#125;                           <span class="comment">// 否则移动 fast</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：最大连续-1-的个数"><a href="#题目：最大连续-1-的个数" class="headerlink" title="题目：最大连续 1 的个数"></a>题目：最大连续 1 的个数</h3><p>给定一个二进制数组， 计算其中最大连续 1 的个数。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,1,0,1,1,1]</span><br><span class="line">输出: 3</span><br><span class="line">解释: 开头的两位和最后的三位都是连续 1，所以最大连续 1 的个数是 3.</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>输入的数组只包含 0 和 1。</li><li>输入数组的长度是正整数，且不超过 10,000。</li></ul><p><strong>个人理解</strong>：<br>这个就遍历整个数组就好，定义两个变量，计数和最大计数，遇到 1 就计数，遇到 0，就更新最大计数。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>, max_count = <span class="number">0</span>;   <span class="comment">// C++未声明不可连等</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(nums[i] == <span class="number">1</span>) count++;     <span class="comment">// 遇到 1 就 ++</span></span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        max_count = max(count,max_count);   <span class="comment">// 比较最大值</span></span><br><span class="line">        count = <span class="number">0</span>;                          <span class="comment">// 计数器清零</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max(max_count,count);    <span class="comment">// 因为有可能最后会有连续的1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：长度最小的子数组"><a href="#题目：长度最小的子数组" class="headerlink" title="题目：长度最小的子数组"></a>题目：长度最小的子数组</h3><p>给定一个含有 n 个正整数的数组和一个正整数 s，找出该数组中满足其和 ≥s 的长度最小的子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>双指针解决问题，一个作为右界限向后加，为了让和 ≥s，另一个左界限向后加，为了让整体往后移动，确定出和 ≥s 同时长度最小。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> s, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len, ans, left, right, sum;</span><br><span class="line">    len = nums.size();</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;    <span class="comment">// 特判</span></span><br><span class="line">    ans = INT_MAX;            <span class="comment">// 存放结果</span></span><br><span class="line">    left = right = sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(right &lt; len)&#123;       <span class="comment">// 右边界</span></span><br><span class="line">      sum += nums[right];     <span class="comment">// 往上加 ≥s</span></span><br><span class="line">      <span class="keyword">while</span>(sum &gt;= s)&#123;        <span class="comment">// ≥s 之后，向下剪枝</span></span><br><span class="line">        ans = min(ans, right - left + <span class="number">1</span>);   <span class="comment">// 存储答案</span></span><br><span class="line">        sum -= nums[left];    <span class="comment">// 减去左边元素</span></span><br><span class="line">        left++;               <span class="comment">// 移动左边界</span></span><br><span class="line">      &#125;</span><br><span class="line">      right++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans == INT_MAX ? <span class="number">0</span> : ans;  <span class="comment">// 是否有合理的ans</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本文为学习记录，参考之处较多，<strong>如果有侵权内容，请联系我立即删除</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组和字符串-04</title>
      <link href="/posts/64268907/"/>
      <url>/posts/64268907/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是一个由字符构成的数组。<br>之后深入研究字符串，需要掌握如下知识点：</p><ul><li>熟悉字符串中的<strong>基本操作</strong>，尤其是在数组中没有的独特操作；</li><li>理解不同<strong>比较</strong>函数之间的区别；</li><li>理解字符串<strong>是否可变</strong>以导致连接过程中出现的问题；</li><li>能够解决与字符串相关的基本问题，如排序、子串、字符串匹配等；</li></ul><a id="more"></a><h3 id="字符串简介"><a href="#字符串简介" class="headerlink" title="字符串简介"></a>字符串简介</h3><blockquote><p>维基百科：字符串是由零个或多个字符组成的有限序列。一般记为 s = a1a2…an。它是编程语言中表示文本的数据类型。</p></blockquote><h4 id="为什么单独讨论字符串"><a href="#为什么单独讨论字符串" class="headerlink" title="为什么单独讨论字符串"></a>为什么单独讨论字符串</h4><p>虽然字符串与数组有很多的相似之处，但是还是要单独讨论字符串，为什么呢？原因有以下几点：</p><p>1.字符串的基本操作对象通常是字符串整体或者其中的子串</p><p>例如： I love you 你想将这个字符串反向输出，你肯定不想得到 uoy evol I 想得到的肯定是 you love I</p><p>维持单词本身的顺序可以让我们很方便的做其他的操作，这其中每个单词就被称为<strong>子串</strong>。</p><p>2.字符串操作要比其他数据类型更复杂（例如：比较、连接操作）</p><p>对于不同的编程语言，字符串的某些操作会有所不同。</p><p>下来继续撸代码了：</p><h3 id="题目：最长公共前缀"><a href="#题目：最长公共前缀" class="headerlink" title="题目：最长公共前缀"></a>题目：最长公共前缀</h3><p>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串””。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出: &quot;fl&quot;</span><br><span class="line">输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: 输入不存在公共前缀。</span><br></pre></td></tr></table></figure><p>说明:<br>所有输入只包含小写字母 a-z</p><p><strong>个人理解</strong>：<br>公共前缀，直接一个一个往下比较即可，第一个比较第二个，用公共的前缀，再去和第三个比较。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(strs.empty()) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;   <span class="comment">// 特殊判定</span></span><br><span class="line">    <span class="comment">// 此处其实也是特判，如果只有一个字符串，会将第一个return</span></span><br><span class="line">    <span class="built_in">string</span> res = strs[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(index &lt; strs.size())&#123;   <span class="comment">// 遍历数组中所有字符串</span></span><br><span class="line">      <span class="built_in">string</span> tmp = strs[index].substr(<span class="number">0</span>, res.length()); <span class="comment">// 第一个字符串所有的均被放入缓存</span></span><br><span class="line">      <span class="comment">//if(!strs[index].empty() &amp;&amp; tmp.empty()) break;</span></span><br><span class="line">      <span class="keyword">if</span>(tmp == res)&#123;             <span class="comment">// 缓存和结果对比，如果相等，则继续对比下一个字符串</span></span><br><span class="line">        index++;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;                      <span class="comment">// 如果不相等，则将res的最后一位去掉，继续比较</span></span><br><span class="line">        <span class="comment">/* 当去空的时候，res为空，res.length为0，导致获取的tmp也为空。所以循环结束。 */</span></span><br><span class="line">        res = res.substr(<span class="number">0</span>,res.length() - <span class="number">1</span>); </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; index &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：最长回文子串"><a href="#题目：最长回文子串" class="headerlink" title="题目：最长回文子串"></a>题目：最长回文子串</h3><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot; 也是一个有效答案。</span><br><span class="line"></span><br><span class="line">输入: &quot;cbbd&quot;</span><br><span class="line">输出: &quot;bb&quot;</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>最开始觉得就暴力法就行，后来学了一下，了解到动态规划。这很合理。<br>如果一个字符串为回文串，那他去掉两边肯定还是回文串。这就得到了一个动态规划方程：<br>res[i][j] = res[i+1][j-1]; 一步一步判断就完了。<br>反正动态规划好理解，实现复杂点，不懂的话需要多看看。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = s.size();</span><br><span class="line">    <span class="keyword">if</span>(len &lt;= <span class="number">1</span>)  <span class="keyword">return</span> s;   <span class="comment">// 如果长度小于等于1，返回自己</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res (len,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(len,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)res[i][i] = <span class="number">1</span>;  <span class="comment">// 给出对角条件</span></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxlength = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; len; j++)&#123;   <span class="comment">// 从第一列开始扫描</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j; i++)&#123;   <span class="comment">// 只需要扫描上半部分</span></span><br><span class="line">        <span class="keyword">if</span>(s[i] == s[j])&#123;     <span class="comment">// 两头相等</span></span><br><span class="line">          <span class="keyword">if</span>(j-i &lt; <span class="number">3</span>)  res[i][j] = <span class="number">1</span>;           <span class="comment">// 如果长度为2或3，那肯定是回文串</span></span><br><span class="line">          <span class="keyword">else</span>  res[i][j] = res[i+<span class="number">1</span>][j<span class="number">-1</span>];      <span class="comment">// 如果长度更长，那就看子串是不是</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res[i][j])&#123;        <span class="comment">// 子串回文就更新最大长度</span></span><br><span class="line">          <span class="keyword">if</span>(j-i+<span class="number">1</span> &gt; maxlength)&#123;</span><br><span class="line">            maxlength = j-i+<span class="number">1</span>;      <span class="comment">// 获取末尾索引</span></span><br><span class="line">            start = i;              <span class="comment">// 获取起始索引</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substr(start,maxlength); <span class="comment">// 返回最长回文子串</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：翻转字符串里的单词"><a href="#题目：翻转字符串里的单词" class="headerlink" title="题目：翻转字符串里的单词"></a>题目：翻转字符串里的单词</h3><p>给定一个字符串，逐个翻转字符串中的每个单词。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;the sky is blue&quot;</span><br><span class="line">输出: &quot;blue is sky the&quot;</span><br><span class="line"></span><br><span class="line">输入: &quot;  hello world!  &quot;</span><br><span class="line">输出: &quot;world! hello&quot;</span><br><span class="line">解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</span><br><span class="line"></span><br><span class="line">输入: &quot;a good   example&quot;</span><br><span class="line">输出: &quot;example good a&quot;</span><br><span class="line">解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>无空格字符构成一个单词。</li><li>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</li><li>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</li></ul><p><strong>个人理解</strong>：<br>这个我先想到的就是用栈，遇到空格就把单词推入栈中，最后再推出来，加上空格即可。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">reverseWords</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = s.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* 删除两端空格 */</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right &amp;&amp; s[left] == <span class="string">&#x27; &#x27;</span>) left++;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right &amp;&amp; s[right] == <span class="string">&#x27; &#x27;</span>) right--;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; st;</span><br><span class="line">    <span class="built_in">string</span> word;          <span class="comment">// 缓存</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123; <span class="comment">// 遍历字符串</span></span><br><span class="line">      <span class="keyword">char</span> c = s[left];   <span class="comment">// 注意这里是char</span></span><br><span class="line">      <span class="keyword">if</span>(!word.empty() &amp;&amp; c == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">        st.push(word);</span><br><span class="line">        word = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c != <span class="string">&#x27; &#x27;</span>)  word += c;</span><br><span class="line">      left++;</span><br><span class="line">    &#125;</span><br><span class="line">    st.push(word);        <span class="comment">// 一定要记得加最后一个单词</span></span><br><span class="line">    <span class="built_in">string</span> ans;</span><br><span class="line">    <span class="keyword">while</span>(!st.empty())&#123;   <span class="comment">// 将字符串出栈</span></span><br><span class="line">      ans += st.top();</span><br><span class="line">      st.pop();</span><br><span class="line">      <span class="keyword">if</span>(!st.empty()) ans += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：实现-strStr"><a href="#题目：实现-strStr" class="headerlink" title="题目：实现 strStr()"></a>题目：实现 strStr()</h3><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置(从 0 开始)。如果不存在，则返回-1。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: haystack = &quot;hello&quot;, needle = &quot;ll&quot;</span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">输入: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure><p>说明:</p><ul><li>当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</li><li>对于本题而言，当 needle 是空字符串时我们应当返回 0。这与 C 语言的 strstr()以及 Java 的 indexOf()定义相符。</li></ul><p><strong>个人理解</strong>：<br>使用开窗法，用子串逐一比较，时间复杂度为线性。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h_len = haystack.size(), n_len = needle.size();</span><br><span class="line">    <span class="keyword">if</span>(n_len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;    <span class="comment">// 特殊判定</span></span><br><span class="line">    <span class="keyword">if</span>(n_len &gt; h_len) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h_len - n_len + <span class="number">1</span>; i++)&#123; <span class="comment">// 逐一匹配</span></span><br><span class="line">      <span class="keyword">if</span>(haystack.substr(i,n_len) == needle) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本文为学习记录，参考之处较多，<strong>如果有侵权内容，请联系我立即删除</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组和字符串-03</title>
      <link href="/posts/fa421ca4/"/>
      <url>/posts/fa421ca4/</url>
      
        <content type="html"><![CDATA[<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>前面我们已经了解过<span class="exturl" data-url="aHR0cHM6Ly94dWRvbmdwby5jbi9wb3N0cy8xNDRjN2Q4OC8=" title="https://xudongpo.cn/posts/144c7d88/">一维数组<i class="fa fa-external-link"></i></span>了，然而在很多情况，我们需要用到<strong>多维数组</strong>，它更适合像表或者矩阵这样更复杂的结构。</p><p>重点解释二维数组如下问题：</p><ul><li>二维数组在内存中是如何存放的？</li><li>如何运用二维数组来解决问题？</li></ul><a id="more"></a><h3 id="二维数组简介"><a href="#二维数组简介" class="headerlink" title="二维数组简介"></a>二维数组简介</h3><p>二维数组是一种结构较为特殊的数组，只是将数组中的每个元素变为了一维数组。</p><p><img src="%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84.png" alt=" "></p><p>所以二维数组的本质上仍然是一个一维数组，内部的一维数组仍然从索引 0 开始，我们可以将它看作一个矩阵，并处理矩阵的相关问题。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>类似一维数组，对于二维数组例如：A = [[1,2,3,4],[5,6,7,8],[1,3,5,7]]，计算机同样会在内存中申请一段连续的空间，并记录第一行数组的索引位置，即 A[0][0]的内存地址，它的索引与内存地址关系如下图所示：</p><p><img src="%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E7%B4%A2%E5%BC%95%E5%85%B3%E7%B3%BB.png" alt=" "></p><p>注意，实际数组中的元素由于类型的不同会占用不同的字节数，因此每个方格地址之间的差值可能不为 1。</p><p><strong>实际题目中，往往使用二维数据处理矩阵类相关问题，包括矩阵旋转、对角线遍历，以及对子矩阵的操作等。</strong></p><h3 id="题目：旋转矩阵"><a href="#题目：旋转矩阵" class="headerlink" title="题目：旋转矩阵"></a>题目：旋转矩阵</h3><p>给你一幅由 N×N 矩阵表示的图像，其中每个像素的大小为 4 字节。请你设计一种算法，将图像旋转 90 度。<br>不占用额外内存空间能否做到？</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix =</span><br><span class="line">[[1,2,3],</span><br><span class="line"> [4,5,6],</span><br><span class="line"> [7,8,9]],</span><br><span class="line">输出：</span><br><span class="line">[[7,4,1],</span><br><span class="line"> [8,5,2],</span><br><span class="line"> [9,6,3]]</span><br><span class="line"></span><br><span class="line">输入：matrix =</span><br><span class="line">[[ 5, 1, 9,11],</span><br><span class="line"> [ 2, 4, 8,10],</span><br><span class="line"> [13, 3, 6, 7],</span><br><span class="line"> [15,14,12,16]],</span><br><span class="line">输出：</span><br><span class="line">[[15,13, 2, 5],</span><br><span class="line"> [14, 3, 4, 1],</span><br><span class="line"> [12, 6, 8, 9],</span><br><span class="line"> [16, 7,10,11]]</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>看到这个题，我首先是在纸上画了画，很直观的结果就是，将数组将数组列从后往前作为行的从前往后。那就 for 循环，交换下标位置即可(这种方法是错误的，因为旋转 90 度不是交换，所以必须先将 90 这个因素去掉。先将矩阵转置，就会发现，只需要翻转一下顺序即可)</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(matrix.size() == <span class="number">0</span>)  <span class="keyword">return</span>;   <span class="comment">// 特殊判定</span></span><br><span class="line">    <span class="keyword">int</span> X = matrix[<span class="number">0</span>].size(), Y = matrix.size();  <span class="comment">// 获取到矩阵宽高</span></span><br><span class="line">    <span class="comment">// 本来想直接交换的，结果不行，只能转置矩阵了</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = Y<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i ; j++)</span><br><span class="line">      swap(matrix[i][j], matrix[j][i]);</span><br><span class="line">    <span class="comment">// 对每行的元素进行翻转</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Y; i++)  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; X/<span class="number">2</span>; j++)</span><br><span class="line">      swap(matrix[i][j], matrix[i][X<span class="number">-1</span>-j]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：零矩阵"><a href="#题目：零矩阵" class="headerlink" title="题目：零矩阵"></a>题目：零矩阵</h3><p>编写一种算法，若 M×N 矩阵中某个元素为 0，则将其所在的行与列清零。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[[1,1,1],</span><br><span class="line"> [1,0,1],</span><br><span class="line"> [1,1,1]]</span><br><span class="line">输出：</span><br><span class="line">[[1,0,1],</span><br><span class="line"> [0,0,0],</span><br><span class="line"> [1,0,1]]</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">[[0,1,2,0],</span><br><span class="line">[3,4,5,2],</span><br><span class="line">[1,3,1,5]]</span><br><span class="line">输出：</span><br><span class="line">[[0,0,0,0],</span><br><span class="line"> [0,4,5,0],</span><br><span class="line"> [0,3,1,0]]</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>这个<strong>看起来</strong>比较简单，就是只要有 0，就把当前行列清零。比的就是怎么实现更优秀。<br>我们遍历整个矩阵，然后将 0 的坐标存下来，根据坐标来清零。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.size() == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 定义行列，行列更好理解一些，省的X,Y,M,N乱七八糟的</span></span><br><span class="line">    <span class="keyword">int</span> row = matrix.size(), col = matrix[<span class="number">0</span>].size();</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">      <span class="keyword">if</span>(!matrix[i][j])  q.push(<span class="built_in">make_pair</span>(i,j));  <span class="comment">// 遍历矩阵，将 0 的坐标推入</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">      <span class="keyword">auto</span> t = q.front();</span><br><span class="line">      q.pop();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)  matrix[i][t.second] = <span class="number">0</span>; <span class="comment">// y不变</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)  matrix[t.first][j] = <span class="number">0</span>; <span class="comment">// x不变</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>官方给了一种解法我觉得很好，<strong>标记第一行元素</strong>的方式。在此记录一下：</p><ul><li>遍历整个矩阵，如果 cell[i][j]==0 就将第 i 行和第 j 列的第一个元素标记。</li><li>第一行和第一列的标记是相同的，都是 cell[0][0]，所以需要一个<strong>额外变量</strong>告知第一列是否被标记，同时用 cell[0][0]继续表示第一行的标记。</li><li>然后，从第二行第二列的元素开始遍历，如果第 r 行或者第 c 列被标记了，那么就将 cell[r][c]设为 0。这里第一行和第一列的作用就相当于方法一中的 row_set 和 column_set。</li><li>然后我们检查是否 cell[0][0]==0，如果是则赋值第一行的元素为零。</li><li>然后检查第一列是否被标记，如果是则赋值第一列的元素为零。</li></ul><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.size() == <span class="number">0</span>) <span class="keyword">return</span>;   <span class="comment">// 特殊判定</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> row = matrix.size(), col = matrix[<span class="number">0</span>].size();  <span class="comment">// 定义行列</span></span><br><span class="line">    <span class="keyword">bool</span> firstRow = <span class="literal">false</span>, firstCol = <span class="literal">false</span>;  <span class="comment">// 定义第一行列标记</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;    <span class="comment">// 遍历判断是否为 0</span></span><br><span class="line">          <span class="keyword">if</span> (i == <span class="number">0</span>)  firstRow = <span class="literal">true</span>;   <span class="comment">// 第一行列特判</span></span><br><span class="line">          <span class="keyword">if</span> (j == <span class="number">0</span>)  firstCol = <span class="literal">true</span>;</span><br><span class="line">          matrix[<span class="number">0</span>][j] = matrix[i][<span class="number">0</span>] = <span class="number">0</span>;  <span class="comment">// 修改第一行列</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; row; i++) &#123;   <span class="comment">// 遍历所有，修改</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; col; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!matrix[<span class="number">0</span>][j] || !matrix[i][<span class="number">0</span>])  matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改第一行和第一列</span></span><br><span class="line">    <span class="keyword">if</span> (firstRow)  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; col; i++)  matrix[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (firstCol)  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)  matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样的时间复杂度为<strong><em>O(M×N)</em></strong>，空间复杂的为<strong><em>O(1)</em></strong>。</p><p><strong>注意</strong>：在写的过程中，不想做第一行和第一列的标记，但是后来发现不太行。</p><p>看到很多人写的，速度很快，但是不知道为啥，复杂度都一样啊，迷～～～</p><h3 id="题目：对角线遍历"><a href="#题目：对角线遍历" class="headerlink" title="题目：对角线遍历"></a>题目：对角线遍历</h3><p>给定一个含有 MxN 个元素的矩阵（M 行，N 列），请以对角线遍历的顺序返回这个矩阵中的所有元素，对角线遍历如下图所示。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">[[ 1, 2, 3 ],</span><br><span class="line"> [ 4, 5, 6 ],</span><br><span class="line"> [ 7, 8, 9 ]]</span><br><span class="line">输出: [1,2,4,7,5,3,6,8,9]</span><br></pre></td></tr></table></figure><p>说明：给定矩阵中的元素总数不会超过 100000 。</p><p><img src="%E5%AF%B9%E8%A7%92%E7%BA%BF%E9%81%8D%E5%8E%86%E8%A7%A3%E9%87%8A.png" alt=" "></p><p><strong>个人理解</strong>：</p><p>先观察一下，对角线的话，坐标和是一样的并且按照线去<strong>递增</strong>，由此可以得出：</p><ul><li>坐标(x,y)相加的和是递增的</li><li>每一条线上的坐标，都是 x++，y–(或者 y++，x–)</li><li>相邻的每趟是反的</li></ul><p>看是看懂了，不会写咋办 =￣ ω ￣=</p><p>参考别人的代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findDiagonalOrder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(matrix.size() == <span class="number">0</span>)  <span class="keyword">return</span> &#123;&#125;;      <span class="comment">// 特殊判定</span></span><br><span class="line">    <span class="keyword">int</span> row = matrix.size(), col = matrix[<span class="number">0</span>].size();    <span class="comment">// 定义行列</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> curveLine = <span class="number">0</span>; curveLine &lt; row + col; curveLine++)&#123;   <span class="comment">// 对角遍历</span></span><br><span class="line">      <span class="comment">// 定义起止位置</span></span><br><span class="line">      <span class="keyword">int</span> rowBegin = curveLine + <span class="number">1</span> &lt;= col ? <span class="number">0</span> : curveLine + <span class="number">1</span> - col;</span><br><span class="line">      <span class="keyword">int</span> rowEnd = curveLine + <span class="number">1</span> &gt;= row ? row - <span class="number">1</span> : curveLine;</span><br><span class="line">      <span class="keyword">if</span>(curveLine % <span class="number">2</span> == <span class="number">1</span>)&#123;   <span class="comment">// 奇偶对角线方向反向</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = rowBegin; i &lt;= rowEnd; i++)</span><br><span class="line">          result.push_back(matrix[i][curveLine - i]);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = rowEnd ; i &gt;= rowBegin; i--)</span><br><span class="line">          result.push_back(matrix[i][curveLine - i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>今天去图书馆学习，由于疫情原因，下午 3 点就闭馆了。每次去图书馆都会让我对学习有着一种无与伦比的渴望，是一种发自心底的，想要努力的想法。那一刻不是为了什么目的，就好像触发了一种欲望，不同于渴了喝水、饿了吃饭的追求欲，更多的是一种精神上的满足。希望我可以记得这种感觉，因为我觉得它可以带给我想要的生活。</p><blockquote><p>声明：本文为学习记录，参考之处较多，<strong>如果有侵权内容，请联系我立即删除</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组和字符串-02</title>
      <link href="/posts/27c23959/"/>
      <url>/posts/27c23959/</url>
      
        <content type="html"><![CDATA[<h3 id="题目：寻找数组的中心索引"><a href="#题目：寻找数组的中心索引" class="headerlink" title="题目：寻找数组的中心索引"></a>题目：寻找数组的中心索引</h3><p>给定一个整数类型的数组 nums，请编写一个能够返回数组“中心索引”的方法。</p><p><strong>中心索引</strong>的定义如下：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。</p><p>如果数组不存在中心索引，那么我们应该返回-1。如果数组有多个中心索引，那么我们应该返回最靠近左边的那一个。</p><a id="more"></a><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1, 7, 3, 6, 5, 6]</span><br><span class="line">输出：3</span><br><span class="line">解释：索引 3 (nums[3] = 6) 的左侧数之和 (1 + 7 + 3 = 11)，</span><br><span class="line">与右侧数之和 (5 + 6 = 11) 相等。同时, 3 也是第一个符合要求的中心索引。</span><br><span class="line"></span><br><span class="line">输入：nums = [1, 2, 3]</span><br><span class="line">输出：-1</span><br><span class="line">解释：数组中不存在满足此条件的中心索引。</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>nums 的长度范围为 [0, 10000]。</li><li>任何一个 nums[i] 将会是一个范围在 [-1000, 1000]的整数。</li></ul><p><strong>个人理解</strong>：<br>题目难度为简单，中心索引，就是左右和一样，首先获取总和，右边等于总和减去左边再减去当前元素。当左右相等，即为中心索引。从左向右遍历，多个索引时，可以优先获取左边的。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">pivotIndex</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>,left = <span class="number">0</span>,right = <span class="number">0</span>;   <span class="comment">// 定义 左 右 总和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</span><br><span class="line">      sum += nums[i];                 <span class="comment">// 计算总和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; nums.size(); i++)&#123;   <span class="comment">// 从左向右遍历</span></span><br><span class="line">      right = sum - nums[i] - left;</span><br><span class="line">      <span class="keyword">if</span>(left == right)&#123;              <span class="comment">// 如果左右相等，则为中心索引</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">      left += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：搜索插入位置"><a href="#题目：搜索插入位置" class="headerlink" title="题目：搜索插入位置"></a>题目：搜索插入位置</h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>可以假设数组中无重复元素。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 5</span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">输入: [1,3,5,6], 2</span><br><span class="line">输出: 1</span><br><span class="line"></span><br><span class="line">输入: [1,3,5,6], 7</span><br><span class="line">输出: 4</span><br><span class="line"></span><br><span class="line">输入: [1,3,5,6], 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>类似于在数组中寻找一个值，以前学过的二分法应该是最好的，我采用的是暴力搜索的方法，效率低一些。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.size() == <span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;     <span class="comment">// 特殊判定</span></span><br><span class="line">    <span class="keyword">if</span>(nums[nums.size() - <span class="number">1</span>] &lt; target) <span class="keyword">return</span> nums.size();  <span class="comment">// 特殊判定</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 应该用二分法实现，我这个比较笨，属于暴力求解。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(nums[i] == target) index = i;    <span class="comment">// 循环找目标位置</span></span><br><span class="line">      <span class="keyword">if</span> (nums[i] &lt; target &amp;&amp; nums[i+<span class="number">1</span>] &gt; target)&#123;    <span class="comment">// 没有相等，找插入位置</span></span><br><span class="line">        index = i + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：合并区间"><a href="#题目：合并区间" class="headerlink" title="题目：合并区间"></a>题目：合并区间</h3><p>给出一个区间的集合，请合并所有重叠的区间。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">输出: [[1,6],[8,10],[15,18]]</span><br><span class="line">解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</span><br><span class="line"></span><br><span class="line">输入: [[1,4],[4,5]]</span><br><span class="line">输出: [[1,5]]</span><br><span class="line">解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>区间的话，在纸上画一画可以找到规律，先把列表中所有的区间按照左端点，由小到大进行排列，会发现更容易找到区间关系。<br>如果第二个区间，左端点，小于第一个区间右端点，就可以用两个区间的左端点最小的和右端点最大分别作为新区间的左右端点。</p><p>由此得出两种情况，我们先定义 merged 存储最终结果，将列表中第一个区间推入，</p><ul><li>如果第二个区间的左端点，小于第一个区间右端点，那么两个区间合并</li><li>不小于的话，就将第二个推入，第三个与第二个比较</li></ul><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; merge(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals) &#123;</span><br><span class="line">    <span class="keyword">if</span>(intervals.size() == <span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;        <span class="comment">// 特殊判定</span></span><br><span class="line">    <span class="comment">// sort 对于 vector 向量的排序，升序排列</span></span><br><span class="line">    sort(intervals.begin(),intervals.end());    <span class="comment">// 将 intervals 排序</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; merged;                 <span class="comment">// 定义 merged</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intervals.size(); i++)&#123;  <span class="comment">// 循环处理</span></span><br><span class="line">      <span class="keyword">int</span> L = intervals[i][<span class="number">0</span>], R = intervals[i][<span class="number">1</span>];   <span class="comment">// 定义左右端点</span></span><br><span class="line">      <span class="keyword">if</span>(!merged.size() || merged.back()[<span class="number">1</span>] &lt; L)&#123;     <span class="comment">// 如果后来左端大于之前右端</span></span><br><span class="line">        merged.push_back(&#123;L,R&#125;);                      <span class="comment">// 后来数据推入</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        merged.back()[<span class="number">1</span>] = max(merged.back()[<span class="number">1</span>], R);  <span class="comment">// 右端边界替换</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> merged;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本文为学习记录，参考之处较多，<strong>如果有侵权内容，请联系我立即删除</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组和字符串-01</title>
      <link href="/posts/144c7d88/"/>
      <url>/posts/144c7d88/</url>
      
        <content type="html"><![CDATA[<p><strong>数组</strong>是数据结构中的基本模块之一。因为<strong>字符串</strong>是由字符数组形成的，所以二者是相似的。大多数面试问题都属于这个范畴。需要掌握的内容如下：</p><ol><li>理解数组的<strong>基本概念</strong>及其<strong>操作方式</strong>；</li><li>理解<strong>二维数组</strong>的基本概念，熟悉二维数组的使用；</li><li>了解<strong>字符串</strong>的概念以及字符串所具有的不同特性；</li><li>理解字符串匹配中的<strong>KMP</strong>算法；</li><li>能够运用<strong>双指针</strong>解决实际问题。</li></ol><a id="more"></a><h2 id="数组简介"><a href="#数组简介" class="headerlink" title="数组简介"></a>数组简介</h2><ul><li>数组和列表、集合之间有什么不同？</li><li>如何理解数组的读取、查找、插入、删除等操作？</li><li>数组在内存中是如何存放的？</li><li>在编程语言中，如何对数组执行初始化、数据访问、修改、迭代、排序、添加、删除等操作？</li></ul><h3 id="集合、列表和数组"><a href="#集合、列表和数组" class="headerlink" title="集合、列表和数组"></a>集合、列表和数组</h3><p>文中介绍的概念是适用于所有编程语言的抽象理论，具体实现会因为编程语言的不同而有差别。</p><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>集合一般被定义为：由一个或多个确定的元素所构成的整体。<br>通俗来讲，集合就是将一组事物组合在一起。如题库中的题，商店中的商品，甚至桌面上的物品。</p><p>集合有什么<strong>特性</strong>呢？<br>首先，集合里的元素类型不一定相同。你可以将商品看作一个集合，也可以将整个商店看作一个集合，这个商店中有人或者其他物品也没有关系。<br>其次，集合里的元素没有顺序。我们不会这样讲：我想要集合中的第三个元素，因为集合是没有顺序的。</p><p>事实上，这样的集合并不直接存在于编程语言中。然而，实际编程语言中的很多数据结构，就是在集合的基础上添加了一些规则形成的。</p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>列表(又称线性列表)：是一种数据项构成的有限序列，即按照一定的线性顺序，排列而成的数据项的集合。<br>列表的概念在集合的特征上形成，它具有顺序，且长度可变。例如一张购物清单：</p><ul><li>一本算法书</li><li>一个笔记本</li><li>两包咖啡</li></ul><p>在这张购物清单中：</p><ul><li>购物清单中的条目代表的类型可能不同，但是按照一定顺序进行了排列；</li><li>购物清单的长度是可变的，你可以向购物清单中增加、删除条目。</li></ul><p>在编程语言中，列表最常见的表现形式有数组和链表，而我们熟悉的栈和队列则是两种特殊类型的列表。除此之外，向列表中添加、删除元素的具体实现方式会根据编程语言的不同而有所区分。</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组是列表的实现方式之一，也是面试中经常涉及到的数据结构。<br>正如前面提到的，数组是列表的实现方式，它具有列表的特征，同时也具有自己的一些特征。然而，在具体的编程语言中，数组这个数据结构的实现方式具有一定差别。比如 C++和 Java 中，数组中的元素类型必须保持一致，而 Python 中则可以不同。Python 中的数组叫做 list，具有更多的高级功能。<br>那么如何从宏观上区分列表和数组呢？这里有一个重要的概念：<strong>索引</strong>。<br>首先，数组会用一些名为<strong>索引</strong>的数字来标识每项数据在数组中的位置，且在大多数编程语言中，索引是从 0 算起的。我们可以根据数组中的索引，快速访问数组中的元素。</p><p>而列表没有索引，这是数组与列表最大的不同。<br>其次，数组中的元素在内存中是连续存储的，且每个元素占用相同大小的内存。<br>相反，列表中的元素在内存中可能彼此相邻，也可能不相邻。比如列表的另一种实现方式——<strong>链表</strong>，它的元素在内存中则不一定是连续的。</p><h3 id="数组的操作"><a href="#数组的操作" class="headerlink" title="数组的操作"></a>数组的操作</h3><p>数组主要操作有如下四种：</p><h4 id="读取元素"><a href="#读取元素" class="headerlink" title="读取元素"></a>读取元素</h4><p>读取元素很好理解，通过数组的索引来访问数组中存储的元素。索引就是内存地址，计算机可以跳跃到任何内存地址，也就是说，只要提供了索引，就可以访问对应的元素。</p><p>计算机会在内存中申请一段连续的空间用来存放数组，并且会记下索引 0 所在的内存。例如我们要获取索引 3 的值，首先获取 0 所在的内存地址，假设每个元素只占用一个字节，将地址加 3 就可以获取到相应的值，因为这个过程很快，所以可以任务时间复杂度为<strong><em>O(1)</em></strong>。</p><h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><p>由于计算机只会保存数组中索引为 0 处元素的内存地址，因此当计算机想要知道数组中是否包含某个元素时，只能从索引 0 处开始，逐步向后查询。</p><p>还是上面的例子，如果我们要查找数组中是否包含元素 pears，计算机会从索引 0 开始，逐个比较对应的元素，直到找到该元素后停止搜索，或到达数组的末尾后停止。</p><p>我们发现，如果数组的长度为 N，最坏情况下（比如我们查找最后一个元素或查找数组中不包含的元素），我们需要查询数组中的每个元素，因此时间复杂度为<strong><em>O(N)</em></strong>，N 为数组的长度。</p><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><p>如果我们想在原有的数组中再插入一个元素呢？<br>要将该元素插入到数组的末尾，只需要一步，得到数组的长度和位置计算出即将插入元素的内存地址，然后将该元素插入到指定位置即可。<br>但是将该元素插入到数组中的其他位置，会有区别。首先需要为该元素所要插入的位置<strong>腾出空间</strong>，然后进行插入操作。需要将插入位置之后的所有数据向后移动，如果需要频繁地对数组元素进行插入操作，会造成时间的浪费。</p><p>事实上，另一种数据结构，即链表可以有效解决这个问题，之后会进行学习。</p><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>删除元素与插入元素的操作类似，当我们删除掉数组中的某个元素后，数组中会留下<strong>空缺</strong>的位置，而数组中的元素在内存中是连续的，这就使得后面的元素需对该位置进行<strong>填补</strong>操作。</p><blockquote><p>声明：本文为学习记录，参考之处较多，<strong>如果有侵权内容，请联系我立即删除</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七月历程</title>
      <link href="/posts/62b2e93f/"/>
      <url>/posts/62b2e93f/</url>
      
        <content type="html"><![CDATA[<p>六月底老师通知让我提前返校，去长春自我隔离一段时间，这几天一直在收拾东西。空余时间没用来学习，不过倒是上 steam 上买了个游戏(QAQ)</p><p>2020 是个多灾多难的年份(澳洲火灾，东非蝗虫肆虐，加拿大雪灾，菲律宾火山爆发，克什米尔雪崩，全球疫情)，我只愿世界和平，不由得想到《流浪地球》的台词：</p><blockquote><p>“最初，没有人在意这场灾难，这不过是一场山火，一次旱灾，一个物种的灭绝，一座城市的消失。直到这场灾难和每个人息息相关。”</p></blockquote><p>几天没写东西，心里有点痒痒，可是赶飞机，找住处，写点啥呢？思来想去，有了这篇历程。</p><a id="more"></a><p>以后每月第一天的文章用作每月工作的索引吧，顺便还可以对上月工作做个简单总结～～(机智如我)</p><h2 id="六月总结如下："><a href="#六月总结如下：" class="headerlink" title="六月总结如下："></a>六月总结如下：</h2><p>以前没在意过写文章的作用，学习也不总是记录，可是当我写六月总结的这一刻，我却要很努力的去回想我到底做了什么…(幸好想起来了，不然要 gg)</p><p>所以平时总结都要写下来，才是最重要的呀～本月的总结会稍微详细一些，希望 xu 同学翻的时候多反思哦(๑•ั็ω•็ั๑)</p><p>我记性一直不好，可能在别人眼里看来就是没心没肺，忘恩负义，过去的人和事，往往忘记的一干二净。所以慢慢懂得了这个博客的重要性。希望她和它可以一直陪伴着我。</p><p>总结如下：</p><h3 id="学习相似度算法"><a href="#学习相似度算法" class="headerlink" title="学习相似度算法"></a>学习相似度算法</h3><p>工程上我们经常需要判断某设备产生的实际波形信号是否能同预先设计的相拟合，但由于实际产生的波形不仅仅是简单的正、余弦波形，而往往是含有较丰富频率分布的不规则波形，而设备元器件本身及外界的电磁干扰又不可避免的引入了干扰噪声，为我们分析其与预先设计波形的拟合程度的判别增加了困难。另外，实际波形和预先设计波形间往往存在着时序上的差别，相位的改变同样也不利于信号的拟合判别。<br>在信号与系统这门学科中，相关性是一种在时域中对信号特性进行描述的重要方法。由于其通信的功率谱函数是一对傅立叶变换，在信号分析中往往利用它来分析随机信号的功率谱分布，以致不少人一提到相关性马上会联想到信号功率谱的计算，但相关在对确定信号的分析也是有一定应用。由于相关的概念是为研究随机信号的统计特性而引入的，那么从理论上我们也可以将其应用于两个确定信号（一个我们采集到的信号波形和一个理论波形）相似性的研究上。<br>比较两波行的相似程度需要从相关概念入手。我们想要对两个信号进行比对，不可能说我们打开俩图片然后做对比，肯定是将信号变成数据文件，实际设备输入的波行也可以通过计算机接口采集并将数据存储为数据文件。然后通过相似度分析算法进行比对。<br>常见相似度分析算法如下：</p><p><strong>曼哈顿距离(Manhattan Distance)</strong>：两点之间折线距离</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2 维空间：</span><br><span class="line">-----------------</span><br><span class="line">假设：A (x1, y1), B (x2, y2)</span><br><span class="line">d = abs(x1 - x2) + abs(y1 - y2)</span><br><span class="line">-----------------</span><br><span class="line">N 维：</span><br><span class="line">-----------------</span><br><span class="line">假设：A (x1, x2, ..., xn), B (y1, y2, ..., yn), A/B 的坐标集用列表表示</span><br><span class="line">d = sum $ zipWith (\x y -&gt; abs(x - y)) A B</span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure><p><strong>欧式距离(Euclidean Distance)</strong>：两点之间直线距离</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2 维空间：</span><br><span class="line">-----------------</span><br><span class="line">A (x1, y1), B (x2, y2)</span><br><span class="line">d = sqrt ((x1 - x2)^2 + (y1 - y2)^2)</span><br><span class="line">-----------------</span><br><span class="line">N 维：</span><br><span class="line">-----------------</span><br><span class="line">A (x1, x2, ..., xn), B (y1, y2, ..., yn), A/B 的坐标集用列表表示</span><br><span class="line">d = sqrt $ sum $ zipWith (\x y -&gt; (x - y)^2) A B</span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure><p><strong>余弦相似度(Cosine Similarity)</strong>：向量之间通过夹角的余弦大小来判断两个数据集的差异程度</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">向量：</span><br><span class="line">(41, 43), B (82, 86) -&gt; 向量 l (x1, y1)</span><br><span class="line">(43, 41), D (86, 82) -&gt; 向量 m (x2, y2)</span><br><span class="line">2 维空间：</span><br><span class="line">-----------------</span><br><span class="line">l 和 m 的夹角余弦计算</span><br><span class="line">cosLM = (x1 * x2 + y1 * y2) / (sqrt (x1^2 + y1^2) * sqrt (x2^2 + y2^2))</span><br><span class="line">-----------------</span><br><span class="line">N 维空间：</span><br><span class="line">-----------------</span><br><span class="line">l (x1, x2, ..., xn), m (y1, y2, ..., yn), l/m 用列表表示</span><br><span class="line">cosLM=(sum$zipWith(*)lm)/((sqrt$sum$zipWith(*)ll)*(sqrt$sum$zipWith(*)mm))</span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure><h3 id="搭建-openCV-Python"><a href="#搭建-openCV-Python" class="headerlink" title="搭建 openCV+Python"></a>搭建 openCV+Python</h3><p>帮研一同学搭建了 openCV+Python 环境，并运行一个区域提取的程序～</p><p>感觉搭建环境这玩意没啥写的，挺简单的…以后如果需要我再单独写总结。</p><p>网上很多是通过 homebrew 安装 opencv，其实不用，直接装一个版本的 python</p><p>通过 pip install python-opencv 直接安装，搭建完毕（剩下模块缺啥装啥）</p><h3 id="Rhino-绘制平衡方块"><a href="#Rhino-绘制平衡方块" class="headerlink" title="Rhino 绘制平衡方块"></a>Rhino 绘制平衡方块</h3><p>见猎心喜，看到牛人自制平衡方块，用 Rhino 绘制其结构图：</p><p><img src="%E5%B9%B3%E8%A1%A1%E6%96%B9%E5%9D%97.png" alt=" "></p><h3 id="JAVA-学习"><a href="#JAVA-学习" class="headerlink" title="JAVA 学习"></a>JAVA 学习</h3><p>学习 JAVA 类、对象、构造函数、静态变量、访问修饰。</p><p>最终暂时还是将 JAVA 弃掉了，因为这个时间段学 JAVA 很难用上，还是要努力毕业啊亲～～</p><h3 id="编写扫盲课"><a href="#编写扫盲课" class="headerlink" title="编写扫盲课"></a>编写扫盲课</h3><p>因为 20 级新生入学了，老板让给他们留任务，但是每届新生来都是啥也不懂啥也不会(比我们那时候少了股干劲)，编写扫盲课～</p><p><a href="../b6e8ca67">新生扫盲课</a></p><h3 id="阿里云备案"><a href="#阿里云备案" class="headerlink" title="阿里云备案"></a>阿里云备案</h3><p>好像断断续续 7 天的亚子</p><h3 id="KNN-算法研读"><a href="#KNN-算法研读" class="headerlink" title="KNN 算法研读"></a>KNN 算法研读</h3><p>忘差不多了，就不写了。</p><h3 id="数据结构-队列-amp-栈相关"><a href="#数据结构-队列-amp-栈相关" class="headerlink" title="数据结构-队列&amp;栈相关"></a>数据结构-队列&amp;栈相关</h3><p><a href="../a5f08dd8">队列&amp;栈-01</a><br><a href="../3cf9dc62">队列&amp;栈-02</a><br><a href="../4bfeecf4">队列&amp;栈-03</a><br><a href="../d79d2dad">队列&amp;栈-04</a><br><a href="../a09a1d3b">队列&amp;栈-05</a></p><h3 id="数码管原理"><a href="#数码管原理" class="headerlink" title="数码管原理"></a>数码管原理</h3><p><a href="../8f51fbda">数码管原理</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说，六月不算虚度光阴，算是重拾信心吧（毕竟我以前很强的）(&gt;^ω^&lt;)</p><h2 id="七月索引如下："><a href="#七月索引如下：" class="headerlink" title="七月索引如下："></a>七月索引如下：</h2><p><a href="../62b2e93f">07-01：七月历程</a><br><a href="../144c7d88">07-02：刷题：数组和字符串-01</a><br><a href="../27c23959">07-03：刷题：数组和字符串-02</a><br><a href="../fa421ca4">07-04：刷题：数组和字符串-03</a><br><a href="../64268907">07-05：刷题：数组和字符串-04</a><br><a href="../cf4395c7">07-06：刷题：数组和字符串-05</a><br><a href="../bb80b607">07-07：刷题：数组和字符串-06</a><br><a href="../2cb0b166">07-07：写作：如何跳出贫困陷阱</a><br><a href="../3cef11b2">07-08：链表-01</a><br>07-09：肝 <strong>C++基础语法</strong> 83 课时<br><a href="../2c1e930c">07-10：C++代码练习：通讯录管理系统</a><br><a href="../709df5b0">07-10：阅读《午后四点》读后感</a><br><a href="../4ecb3943">07-11：阅读《沉默的巡游》读后感</a><br><a href="../80c64a3e">07-12：阅读《悲剧人偶》读后感</a><br><a href="../4cb88cec">07-13：阅读《新参者》读后感</a><br><a href="../2200ffc8">07-14：Hexo 图片相关记录</a><br>07-15：今天返校 收拾了一天</p>]]></content>
      
      
      <categories>
          
          <category> 索引 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数码管原理</title>
      <link href="/posts/8f51fbda/"/>
      <url>/posts/8f51fbda/</url>
      
        <content type="html"><![CDATA[<p>今天有师弟问我数码管的问题，我想起我刚学单片机的时候，好像也在数码管的地方迷糊了一段时间，就简单写写数码管的原理。</p><p>首先，什么是数码管？<br>百度百科解答：数码管，也称作辉光管，是一种可以显示数字和其他信息的电子设备。玻璃管中包括一个金属丝网制成的阳极和多个阴极。大部分数码管阴极的形状为数字。管中…</p><p>看了估计白看，简言之，数码管是一种半导体发光器件，基本单元就是<strong>发光二极管</strong>，如果不明白发光二极管的话，请学习模电基础。</p><a id="more"></a><p>多个发光二极管，摆放成数字的位置，成为一个基本的数码管单元。</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>一些基本概念如下：</p><ol><li>位数：根据可显示的数字的位数，显示 4 个数，就叫 4 位数码管。对位数的选择，称为位选。</li><li>段数：这个数字由几块组成，正常一个数字是 7 段就可以了，加上小数点是 8 段。所以，由几部分组成，就叫几段。对段数的选择称为段选。</li><li>共阴共阳：按照发光二极管单元连接方式可以分为共阴数码管或者共阳数码管。</li></ol><p>下面详细解释一下共阴共阳：<br>首先<strong>阳极表示高电平，阴级表示低电平</strong>。</p><p>共阳数码管表示将数码管中所有的发光二极管的<strong>阳极接到一起</strong>，形成的数码管。共阳数码管在使用时，将<strong>公共阳极接到+5V</strong>时，其余的，对应片段的阴极引脚接在低电平(GND)时，对应的片段就会亮。阴极引脚接高电平时，相应片段不亮。</p><p>共阴则正好相反，将所有发光二极管的<strong>阴极接到一起</strong>形成公共阴极，共阴数码管在使用时，将<strong>公共极阴极接到地线</strong>(GND)上，当某一片段发光二极管的阳极为高电平时，对应的片段就被点亮。阳极为低电平时，相应片段就不亮。</p><h2 id="电气特性"><a href="#电气特性" class="headerlink" title="电气特性"></a>电气特性</h2><h3 id="单位数码管"><a href="#单位数码管" class="headerlink" title="单位数码管"></a>单位数码管</h3><p>单位数码管(数字只有 1 位)有十个管脚，其中有 8 根，分别对应 a,b,c,d,e,f,g,dp，共 8 个发光二极管。剩余两个引脚 3 和 8 为公共脚。共阳数码管，需要公共脚接在+5V 上，共阴数码管接在 GND 上。<br>引脚图如下：<br><image src="引脚图.png" style="height:150px"></image><br>实物图如下：<br><image src="实物图.png" style="height:150px"></image></p><p>因为是单位数码管，所以不存在<strong>位选</strong>这个操作，位选，顾名思义是选择位数。单位数码管只有段选。</p><p><strong>假定</strong>图示为共阴数码管，我们就需要给 COM 接 GND，其余位置，对应字母的引脚接+5V 可以点亮对应的字段（应该很好理解了）</p><h3 id="四位数码管"><a href="#四位数码管" class="headerlink" title="四位数码管"></a>四位数码管</h3><p>接下来看看多位数码管：<br>引脚图如下：<br><image src="4位引脚图.png" style="height:150px"></image></p><p>实物图如下：<br><image src="4位实物图.png" style="height:150px"></image></p><p>内部结构图如下：<br><image src="4位内部结构.png" style="height:150px"></image></p><p><strong>图示</strong>为共阳数码管结构图，可见，”12,9,8,6”，四个引脚，分别控制一个单位数码管。其余引脚对应每个数码管的 8 个字段。<br>比如我想让第三个数码管的点亮起来。那就 8 脚+5V，3 脚 GND 即可。<br>所以段选位选，一目了然。</p><h2 id="驱动方式"><a href="#驱动方式" class="headerlink" title="驱动方式"></a>驱动方式</h2><h3 id="静态驱动"><a href="#静态驱动" class="headerlink" title="静态驱动"></a>静态驱动</h3><p>静态驱动也称为直流驱动，静态驱动是指每个数码管的每一个段码都由一个单片机的 I/O 端口进行驱动，或者使用如 BCD 码二-十进制译码器译码进行驱动。静态驱动的<strong>优点</strong>是编程简单，显示亮度高，<strong>缺点</strong>是占用 I/O 端口多，如驱动 5 个数码管静态显示则需要 5×8=40 根 I/O 端口来驱动，一个 51 单片机肯定是不够用的，实际应用时必须增加译码驱动器进行驱动，增加了硬件电路的复杂性。</p><h3 id="动态显示"><a href="#动态显示" class="headerlink" title="动态显示"></a>动态显示</h3><p>数码管动态显示接口是单片机中应用最为广泛的一种显示方式之一，动态驱动是将所有数码管的 8 个显示笔划”a,b,c,d,e,f,g,dp”的同名端连在一起，另外为每个数码管的公共极 COM 增加位选通控制电路，位选通由各自独立的 I/O 线控制，当单片机输出字形码时，所有数码管都接收到相同的字形码，但究竟是<strong>哪个数码管会显示出字形</strong>，取决于单片机对<strong>位选通 COM 端</strong>电路的控制，所以我们只要将需要显示的数码管的选通控制打开，该位就显示出字形，没有选通的数码管就不会亮。通过分时轮流控制各个数码管的的 COM 端，就使各个数码管轮流受控显示，这就是动态驱动。<br>在轮流显示过程中，每位数码管的点亮时间为 1 ～ 2ms，由于人的视觉暂留现象及发光二极管的余辉效应，尽管实际上各位数码管并非同时点亮，但只要扫描的速度足够快，给人的印象就是一组稳定的显示数据，不会有闪烁感，动态显示的效果和静态显示是一样的，能够节省大量的 I/O 端口，而且功耗更低。<br>如示例中的 4 位数码管就是采用动态显示方式。</p><h2 id="亮度和锁存器"><a href="#亮度和锁存器" class="headerlink" title="亮度和锁存器"></a>亮度和锁存器</h2><p>一般来说静态驱动的亮度要高于动态驱动的亮度，但不影响使用。实际使用中为了达到更好的效果，会配合锁存器如 74HC573 一起使用，可以记忆先前状态数据直到有新数据覆盖。对做 51 单片机应用开发来说，相对 LCD 液晶，液晶模块编程更方便，样式更多样，但是其缺点亮度不够。这也恰恰是数码管的优势，如果做简单的计数显示，数码管是最好选择。</p><h2 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h2><p>数码管的基本组成是发光二极管，因此其可以通过的电流只有<strong>几毫安</strong>，接 5V 直流电源做测试的时候一定要串上一个几十千欧姆大小的电阻。否则，很容易烧掉，此外用万用表的测电阻档就可将其点亮，足以说明其电流之小。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS/mlbDnoIHnrqEvOTkwMzk2NT9mcj1hbGFkZGlu" title="https://baike.baidu.com/item/数码管/9903965?fr=aladdin">https://baike.baidu.com/item/数码管/9903965?fr=aladdin<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoaWxkYm9yL2FydGljbGUvZGV0YWlscy84Mjg1Njk0MQ==" title="https://blog.csdn.net/childbor/article/details/82856941">https://blog.csdn.net/childbor/article/details/82856941<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 硬件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数码管 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列&amp;栈-05</title>
      <link href="/posts/a09a1d3b/"/>
      <url>/posts/a09a1d3b/</url>
      
        <content type="html"><![CDATA[<p>内容概要，对队列&amp;栈相关进行小结，用以下题目对 队列、BFS、栈、DFS 进行复习：</p><ul><li>用栈实现队列</li><li>用队列实现栈</li><li>字符串解码</li><li>图像渲染</li><li>01 矩阵</li><li>钥匙和房间</li></ul><a id="more"></a><h3 id="题目：用栈实现队列"><a href="#题目：用栈实现队列" class="headerlink" title="题目：用栈实现队列"></a>题目：用栈实现队列</h3><p>使用栈实现队列的下列操作：</p><ul><li>push(x): 将一个元素放入队列的尾部</li><li>pop(): 从队列首部移除元素</li><li>peek(): 返回队列首部的元素</li><li>empty(): 返回队列是否为空</li></ul><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyQueue queue = new MyQueue();</span><br><span class="line"></span><br><span class="line">queue.push(1);</span><br><span class="line">queue.push(2);</span><br><span class="line">queue.peek();  // 返回 1</span><br><span class="line">queue.pop();   // 返回 1</span><br><span class="line">queue.empty(); // 返回 false</span><br></pre></td></tr></table></figure><p>说明:</p><ul><li>你只能使用标准的栈操作：也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的</li><li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可</li><li>假设所有操作都是有效的（例如，一个空的队列不会调用 pop 或者 peek 操作）</li></ul><p><strong>个人理解</strong>：<br>栈是后入先出，用两个后入先出实现一个先入先出，那很简单了，负负得正。<br>我们定义两个栈，一个栈用来输入数据，一个栈用来输出数据，在输出栈为空的时候，把输入栈内容推到输出栈就行，这样数据就反向了。实现了队列效果。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; inStack;   <span class="comment">// 定义输入栈</span></span><br><span class="line">  <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; outStack;  <span class="comment">// 定义输出栈</span></span><br><span class="line">  <span class="comment">/** 检查方法 */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;   <span class="comment">// 检查输出栈是否有数据，没有的话，就把输入栈缓存的弄进来</span></span><br><span class="line">    <span class="keyword">if</span>(outStack.empty())&#123;</span><br><span class="line">      <span class="keyword">while</span>(!inStack.empty())&#123;</span><br><span class="line">        outStack.push(inStack.top());</span><br><span class="line">        inStack.pop();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 在此初始化数据结构 */</span></span><br><span class="line">  MyQueue() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** push方法，直接在inStack中推入 */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    inStack.push(x);    <span class="comment">// 将数据推入输入栈</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 从队列前面删除该元素并返回该元素 */</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    check();    <span class="comment">// 检查栈元素</span></span><br><span class="line">    <span class="keyword">int</span> a = outStack.top();   <span class="comment">// 获取输出栈顶部元素</span></span><br><span class="line">    outStack.pop();           <span class="comment">// 推出元素</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 获取顶峰元素 */</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    check();    <span class="comment">// 检查栈元素</span></span><br><span class="line">    <span class="keyword">return</span> outStack.top();    <span class="comment">// 获取输出栈的顶部元素</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 返回队列是否为空  */</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> inStack.empty() &amp;&amp; outStack.empty();   <span class="comment">// 输入输出均为空即可</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：用队列实现栈"><a href="#题目：用队列实现栈" class="headerlink" title="题目：用队列实现栈"></a>题目：用队列实现栈</h3><p>使用队列实现栈的下列操作：</p><ul><li>push(x): 元素 x 入栈</li><li>pop(): 移除栈顶元素</li><li>top(): 获取栈顶元素</li><li>empty(): 返回栈是否为空</li></ul><p>注意:</p><ul><li>你只能使用队列的基本操作：也就是 push to back,peek/pop from front,size,和 is empty 这些操作是合法的</li><li>你所使用的语言也许不支持队列。你可以使用 list 或者 deque（双端队列）来模拟一个队列,只要是标准的队列操作即可</li><li>你可以假设所有操作都是有效的（例如,对一个空的栈不会调用 pop 或者 top 操作）</li></ul><p><strong>个人理解</strong>：<br>这个和上面的栈实现队列有异曲同工之妙，但是稍有不同。两个队列实现栈，相当于两个正向，想要实现一个反向，正正肯定是不能得负的。<br>所以我们需要换一种想法，定义两个队列，输入一个数组，进入输入队列，然后将输入队列放到输出队列中，输入清空。<br>再来一个数字，将输出队列的数据放到输入中，实现反向，再重复步骤即可。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; inQueue;     <span class="comment">// 输入队列</span></span><br><span class="line">  <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; outQueue;    <span class="comment">// 输出队列</span></span><br><span class="line">  <span class="comment">/** 初始化数据结构 */</span></span><br><span class="line">  MyStack() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 把值推入栈 */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    inQueue.push(x);            <span class="comment">// 将一个值推进输入队列</span></span><br><span class="line">    <span class="keyword">while</span>(!outQueue.empty())&#123;   <span class="comment">// 把输出队列中的给输入队列</span></span><br><span class="line">      inQueue.push(outQueue.front());</span><br><span class="line">      outQueue.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; tmp = inQueue;   <span class="comment">// 再把输入队列的还给输出队列</span></span><br><span class="line">    inQueue = outQueue;</span><br><span class="line">    outQueue = tmp;</span><br><span class="line">    <span class="comment">// while(!inQueue.empty())&#123;   // 再把输入队列的还给输出队列</span></span><br><span class="line">    <span class="comment">//   outQueue.push(inQueue.front());</span></span><br><span class="line">    <span class="comment">//   inQueue.pop();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 移除栈顶元素 */</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(outQueue.empty())&#123;   <span class="comment">// 输出队列为空，return 0</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a = outQueue.front();   <span class="comment">// 获取顶部</span></span><br><span class="line">    outQueue.pop();             <span class="comment">// 输出队列推出</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 获取栈顶元素 */</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(outQueue.empty())&#123;   <span class="comment">//输出队列为空，return 0</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> outQueue.front();    <span class="comment">// 获取输出队列顶部</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 查看队列是否为空 */</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> outQueue.empty();    <span class="comment">// 判断输入队列是否为空</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：字符串解码"><a href="#题目：字符串解码" class="headerlink" title="题目：字符串解码"></a>题目：字符串解码</h3><p>给定一个经过编码的字符串，返回它解码后的字符串。<br>编码规则为:k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。<br>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。<br>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k，例如不会出现像 3a 或 2[4]的输入。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;3[a]2[bc]&quot;</span><br><span class="line">输出：&quot;aaabcbc&quot;</span><br><span class="line">输入：s = &quot;3[a2[c]]&quot;</span><br><span class="line">输出：&quot;accaccacc&quot;</span><br><span class="line">输入：s = &quot;2[abc]3[cd]ef&quot;</span><br><span class="line">输出：&quot;abcabccdcdcdef&quot;</span><br><span class="line">输入：s = &quot;abc3[cd]xyz&quot;</span><br><span class="line">输出：&quot;abccdcdcdxyz&quot;</span><br></pre></td></tr></table></figure><p><strong>个人理解</strong>：<br>这个之前我们见过类似的，括号匹配，肯定是用栈来实现问题，其实就是遇到数字，压到数字栈里面，然后遇到字母压到字母栈里面，遇到符号]就把之前压进去的都取出来，然后数字对字母加倍。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">decodeString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line">    <span class="built_in">stack</span> &lt;<span class="built_in">string</span>&gt; strs;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = s.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        num = num * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>((s[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;z&#x27;</span>) || (s[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;Z&#x27;</span>))&#123;</span><br><span class="line">        res = res + s[i];</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;[&#x27;</span>)&#123;      <span class="comment">// 将&#x27;[&#x27;之前的数字压入nums栈，字母压入strs栈</span></span><br><span class="line">        nums.push(num);</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">        strs.push(res);</span><br><span class="line">        res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> times = nums.top();</span><br><span class="line">        nums.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; times; j++)</span><br><span class="line">          strs.top() += res;</span><br><span class="line">          res = strs.top();   <span class="comment">// 之后若还是字母，就直接加到res后，因为它们是同一级的运算，若是左括号，res会被压入strs栈，作为上一层的运算。</span></span><br><span class="line">          strs.pop();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：图像渲染"><a href="#题目：图像渲染" class="headerlink" title="题目：图像渲染"></a>题目：图像渲染</h3><p>有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。<br>给你一个坐标(sr,sc)表示图像渲染开始的像素值（行，列）和一个新的颜色值 newColor，让你重新上色这幅图像。<br>为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点……，重复该过程。将所有有记录的像素点的颜色值改为新的颜色值。<br>最后返回经过上色渲染后的图像。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">image = [[1,1,1],[1,1,0],[1,0,1]]</span><br><span class="line">sr = 1, sc = 1, newColor = 2</span><br><span class="line">输出: [[2,2,2],[2,2,0],[2,0,1]]</span><br><span class="line">解析:</span><br><span class="line">在图像的正中间，(坐标(sr,sc)=(1,1)),</span><br><span class="line">在路径上所有符合条件的像素点的颜色都被更改成2。</span><br><span class="line">注意: 右下角的像素没有更改为2，</span><br><span class="line">因为它不是在上下左右四个方向上与初始点相连的像素点。</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>image 和 image[0]的长度在范围[1,50]内。</li><li>给出的初始点将满足 0 &lt;= sr &lt; image.length 和 0 &lt;= sc &lt; image[0].length。</li><li>image[i][j] 和 newColor 表示的颜色值在范围 [0, 65535]内。</li></ul><p><strong>个人理解</strong>：<br>从像素位置开始上色，渲染周边和目标像素初始颜色相同的像素。<br>算法：将 color 置为目标像素初始颜色。从目标像素位置开始上色：如果像素颜色和 color 相同则改变像素颜色为 newColor，然后再从四个方向进行上色，重复上述过程。使用 dfs 函数对目标像素进行渲染。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; floodFill(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; new_image(image);</span><br><span class="line">    <span class="keyword">int</span> oldColor = image[sr][sc];       <span class="comment">// 例子：oldColor = 1</span></span><br><span class="line">    <span class="keyword">if</span>(oldColor != newColor)&#123;           <span class="comment">// 新的颜色不同于旧颜色才更新</span></span><br><span class="line">      DFS(new_image,sr,sc,oldColor,newColor);   <span class="comment">// 深度优先搜索</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_image;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;new_image, <span class="keyword">int</span> r,<span class="keyword">int</span> c,<span class="keyword">int</span> old_color,<span class="keyword">int</span> new_color)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> row_num = new_image.size(), col_num = new_image[<span class="number">0</span>].size();</span><br><span class="line">    <span class="comment">//越界，或者颜色不相等返回，例子：old_color = 1，只更新位置color = 1的地方</span></span><br><span class="line">    <span class="keyword">if</span>(r &lt; <span class="number">0</span> || r &gt;= row_num || c &lt; <span class="number">0</span> || c &gt;= col_num || new_image[r][c] != old_color)&#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    new_image[r][c] = new_color;</span><br><span class="line">    DFS(new_image,r<span class="number">-1</span>,c,old_color,new_color);</span><br><span class="line">    DFS(new_image,r+<span class="number">1</span>,c,old_color,new_color);</span><br><span class="line">    DFS(new_image,r,c<span class="number">-1</span>,old_color,new_color);</span><br><span class="line">    DFS(new_image,r,c+<span class="number">1</span>,old_color,new_color);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看到一个解法，作者：OrangeMan，简洁易懂，优秀。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; floodFill(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor) &#123;</span><br><span class="line">        <span class="keyword">int</span> oldColor = image[sr][sc];   <span class="comment">//记录旧坐标的像素</span></span><br><span class="line">        <span class="keyword">if</span> (image[sr][sc] == newColor) <span class="keyword">return</span> image; <span class="comment">//颜色相同则无需修改</span></span><br><span class="line">        image[sr][sc] = newColor;   <span class="comment">//染色</span></span><br><span class="line">        <span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;; <span class="comment">//上右下左</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = sr + dx[i], y = sc + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (x &gt;=<span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x &lt; image.size() &amp;&amp; y &lt; image[<span class="number">0</span>].size() &amp;&amp; image[x][y] == oldColor)</span><br><span class="line">                floodFill (image, x, y, newColor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：01-矩阵"><a href="#题目：01-矩阵" class="headerlink" title="题目：01 矩阵"></a>题目：01 矩阵</h3><p>给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离<br>两个相邻元素间的距离为 1</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">0 0 0</span><br><span class="line">0 1 0</span><br><span class="line">0 0 0</span><br><span class="line">输出:</span><br><span class="line">0 0 0</span><br><span class="line">0 1 0</span><br><span class="line">0 0 0</span><br><span class="line">输入:</span><br><span class="line">0 0 0</span><br><span class="line">0 1 0</span><br><span class="line">1 1 1</span><br><span class="line">输出:</span><br><span class="line">0 0 0</span><br><span class="line">0 1 0</span><br><span class="line">1 2 1</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>给定矩阵的元素个数不超过 10000</li><li>给定矩阵中至少有一个元素是 0</li><li>矩阵中的元素只在四个方向上相邻:上、下、左、右。</li></ul><p><strong>个人理解</strong>：<br>应该挺好理解的，要得到的是最近距离，所有元素，那就广度优先搜索呗。<br>弄一个队列出来，然后只有一个 0 的时候，把 0 的位置加入队列，然后搜索所有。如果有多个 0，那就把所有的 0 都加入队列，然后在搜索。</p><p><strong>注意</strong>：因为有多个 0，所以需要将距离实时更新为最短。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; updateMatrix(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">    <span class="keyword">int</span> numr = matrix.size();    <span class="comment">// 获取矩阵大小</span></span><br><span class="line">    <span class="keyword">if</span>(numr == <span class="number">0</span>) <span class="keyword">return</span> matrix;</span><br><span class="line">    <span class="keyword">int</span> numc = matrix[<span class="number">0</span>].size();</span><br><span class="line">    <span class="keyword">if</span>(numc == <span class="number">0</span>) <span class="keyword">return</span> matrix;</span><br><span class="line">    <span class="comment">// 初始化一个结果数组内容为INT_MAX</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res(numr, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(numc, INT_MAX));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q;    <span class="comment">// 定义队列</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dx = &#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dy = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numr; ++i)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numc; ++j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix[i][j] == <span class="number">0</span>)&#123;        <span class="comment">// 如果是 0 结果里面直接就为 0</span></span><br><span class="line">          res[i][j] = <span class="number">0</span>;</span><br><span class="line">          q.push(<span class="built_in">make_pair</span>(i, j));  <span class="comment">// 并且将 0 推入队列中</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;    <span class="comment">// BFS</span></span><br><span class="line">      <span class="keyword">int</span> x = q.front().first;    <span class="comment">// 获取 x,y 坐标</span></span><br><span class="line">      <span class="keyword">int</span> y = q.front().second;</span><br><span class="line">      q.pop();            <span class="comment">// 推出</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;<span class="number">4</span>;++j)&#123;     <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">int</span> nx = x + dx[j];</span><br><span class="line">        <span class="keyword">int</span> ny = y + dy[j];</span><br><span class="line">        <span class="keyword">if</span>(nx &gt;= <span class="number">0</span> &amp;&amp; nx&lt;numr &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; numc &amp;&amp; res[nx][ny]&gt;res[x][y]+<span class="number">1</span>)&#123;</span><br><span class="line">          res[nx][ny] = res[x][y] + <span class="number">1</span>;      <span class="comment">// 默认值为INT_MAX，对比，选择最短路径</span></span><br><span class="line">          q.push(<span class="built_in">make_pair</span>(nx, ny));        <span class="comment">// 然后推入附近的坐标</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;   <span class="comment">// 返回结果</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：钥匙和房间"><a href="#题目：钥匙和房间" class="headerlink" title="题目：钥匙和房间"></a>题目：钥匙和房间</h3><p>有 N 个房间，开始时你位于 0 号房间。每个房间有不同的号码：0，1，2，…，N-1，并且房间里可能有一些钥匙能使你进入下一个房间。<br>在形式上，对于每个房间 i 都有一个钥匙列表 rooms[i]，每个钥匙 rooms[i][j]由[0,1，…，N-1]中的一个整数表示，其中 N=rooms.length。钥匙 rooms[i][j]=v 可以打开编号为 v 的房间。</p><p>最初，除 0 号房间外的其余所有房间都被锁住。<br>你可以自由地在房间之间来回走动。<br>如果能进入每个房间返回 true，否则返回 false</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入: [[1],[2],[3],[]]</span><br><span class="line">输出: true</span><br><span class="line">解释:</span><br><span class="line">我们从 0 号房间开始，拿到钥匙 1</span><br><span class="line">之后我们去 1 号房间，拿到钥匙 2</span><br><span class="line">然后我们去 2 号房间，拿到钥匙 3</span><br><span class="line">最后我们去了 3 号房间。</span><br><span class="line">由于我们能够进入每个房间，我们返回 true。</span><br><span class="line"></span><br><span class="line">输入：[[1,3],[3,0,1],[2],[0]]</span><br><span class="line">输出：false</span><br><span class="line">解释：我们不能进入2号房间。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>1&lt;=rooms.length&lt;=1000</li><li>0&lt;=rooms[i].length&lt;=1000</li><li>所有房间中的钥匙数量总计不超过 3000</li></ul><p><strong>个人理解</strong>：<br>当进入一个房间时，根据钥匙，进入更深的房间，并且标记房间，如果没路了，回来继续进入其他钥匙指向的房间，直到结束。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">canVisitAllRooms</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; rooms)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> roomCount = rooms.size();   <span class="comment">// 获取房间数量</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; <span class="title">visited</span><span class="params">(roomCount, <span class="literal">false</span>)</span></span>;   <span class="comment">// 定义可访问房间</span></span><br><span class="line">    visited[<span class="number">0</span>] = <span class="number">1</span>;     <span class="comment">// 从第0房间开始</span></span><br><span class="line">    <span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; keys;   <span class="comment">// 钥匙栈</span></span><br><span class="line">    keys.push(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(!keys.empty())    <span class="comment">// DFS</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> key = keys.top();</span><br><span class="line">      keys.pop();</span><br><span class="line">      <span class="keyword">int</span> rs = rooms[key].size();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rs; ++i)     <span class="comment">// 把房间里的钥匙遍历</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[rooms[key][i]])   <span class="comment">// 如果这个钥匙去的地方我们可以进入，就不添加钥匙</span></span><br><span class="line">        &#123;</span><br><span class="line">          visited[rooms[key][i]] = <span class="literal">true</span>;    <span class="comment">// 否则添加</span></span><br><span class="line">          keys.push(rooms[key][i]);         <span class="comment">// 然后把钥匙推入栈，继续走</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; roomCount; i++)&#123;     <span class="comment">// 遍历所有添加进去的可访问房间</span></span><br><span class="line">      <span class="keyword">if</span>(!visited[i]) <span class="keyword">return</span> <span class="literal">false</span>;         <span class="comment">// 任何一个错误，就返回false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本文为学习记录，参考之处较多，<strong>如果有侵权内容，请联系我立即删除</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列&amp;栈-04</title>
      <link href="/posts/d79d2dad/"/>
      <url>/posts/d79d2dad/</url>
      
        <content type="html"><![CDATA[<p>今天发现总结的比我学的慢，说明学的有点心急了，不慌慢慢来。</p><h2 id="栈和深度优先搜索"><a href="#栈和深度优先搜索" class="headerlink" title="栈和深度优先搜索"></a>栈和深度优先搜索</h2><p>与 BFS 类似，深度优先搜索（DFS）也可用于查找从根结点道目标结点的路径。</p><p>1.结点的处理顺序是什么？</p><p>在下图中，从根结点 A 开始。首先选择结点 B 的路径，并进行回溯，直到到达结点 E，无法更进一步。然后回溯到 A 并选择第二条路径到结点 C。从 C 开始，我们尝试第一条路径到 E 但是 E 已被访问过。所以我们回到 C 并尝试从另一条路径到 F。最后找到 G。</p><a id="more"></a><p><img src="DFS%E7%A4%BA%E4%BE%8B.png" alt=" "></p><p>总的来说，在我们到达最深的结点之后，我们只会回溯并尝试另一条路径。</p><blockquote><p>因此我们在 DFS 中找到的第一条路径不一定就是最短的路径。例如，在上面的例子中，我们成功找出了路径 A-&gt;C-&gt;F-&gt;G 并停止了 DFS。但这不是从 A 到 G 的最短路径。</p></blockquote><p>2.栈的入栈和退栈顺序是什么？<br>如上面图示，首先将根结点推入到栈中；然后我们尝试第一个邻居 B 并将结点 B 推入到栈中；等等等等。当我们到达最深的结点 E 时，我们需要回溯。当我们回溯时，我们将从栈中弹出最深的结点，这实际上是推入到栈中的最后一个结点。</p><p>结点的处理顺序是完全相反的顺序，就像它们被添加到栈中一样，它是后进先出（LIFO）。这就是我们在 DFS 中使用栈的原因。</p><h3 id="DFS-模版-1"><a href="#DFS-模版-1" class="headerlink" title="DFS-模版-1"></a>DFS-模版-1</h3><p>在大多数情况下，我们在能使用 BFS 时也可以使用 DFS。但是有一个重要的区别：<strong>遍历顺序</strong></p><p>与 BFS 不同，更早访问的结点可能不是更靠近根结点的结点。因此，你在 DFS 中找到的第一条路径可能不是最短路径。<br>以下是 DFS 的递归模板(JAVA)，帮助我们更好的理解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Return true if there is a path from cur to target.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">DFS</span><span class="params">(Node cur, Node target, Set&lt;Node&gt; visited)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span> <span class="keyword">if</span> cur is target;</span><br><span class="line">  <span class="keyword">for</span> (next : each neighbor of cur) &#123;</span><br><span class="line">    <span class="keyword">if</span> (next is not in visited) &#123;</span><br><span class="line">      add next to visted;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">true</span> <span class="keyword">if</span> <span class="title">DFS</span><span class="params">(next, target, visited)</span> </span>== <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们递归地实现 DFS 时，似乎不需要使用任何栈。但实际上，我们使用的是由系统提供的隐式栈，也称为调用栈（Call Stack）</p><h3 id="题目：岛屿数量"><a href="#题目：岛屿数量" class="headerlink" title="题目：岛屿数量"></a>题目：岛屿数量</h3><p>岛屿数量又来了，大多数情况下，能用 BFS 解决的问题，也能被 DFS 解决。问题具体见。<a href="../a5f08dd8/#岛屿数量">岛屿问题</a></p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt; &amp; grid,<span class="keyword">int</span> r,<span class="keyword">int</span> c)</span></span>&#123;    <span class="comment">// 深度优先算法，感觉就是个递归</span></span><br><span class="line">    <span class="keyword">int</span> nr = grid.size();   <span class="comment">// 岛屿大小</span></span><br><span class="line">    <span class="keyword">int</span> nc = grid[<span class="number">0</span>].size();</span><br><span class="line"></span><br><span class="line">    grid[r][c] = <span class="string">&#x27;0&#x27;</span>;       <span class="comment">// 将当前位置置0</span></span><br><span class="line">    <span class="keyword">if</span>(r<span class="number">-1</span> &gt;=<span class="number">0</span> &amp;&amp; grid[r<span class="number">-1</span>][c] == <span class="string">&#x27;1&#x27;</span>) dfs(grid,r<span class="number">-1</span>,c); <span class="comment">// 判断上下左右，如果有的话，继续递归</span></span><br><span class="line">    <span class="keyword">if</span>(r+<span class="number">1</span> &lt;nr &amp;&amp; grid[r+<span class="number">1</span>][c] == <span class="string">&#x27;1&#x27;</span>) dfs(grid,r+<span class="number">1</span>,c);</span><br><span class="line">    <span class="keyword">if</span>(c<span class="number">-1</span> &gt;=<span class="number">0</span> &amp;&amp; grid[r][c<span class="number">-1</span>] == <span class="string">&#x27;1&#x27;</span>) dfs(grid,r,c<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(c+<span class="number">1</span> &lt;nc &amp;&amp; grid[r][c+<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) dfs(grid,r,c+<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nr = grid.size();</span><br><span class="line">    <span class="keyword">if</span>(!nr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> nc = grid[<span class="number">0</span>].size();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num_island = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; nr; ++r)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; nc; ++c)&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid[r][c] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">          ++num_island;     <span class="comment">// 如果遇到 1 就 +1</span></span><br><span class="line">          dfs(grid,r,c);    <span class="comment">// 然后递归就完了</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num_island;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="题目：克隆图"><a href="#题目：克隆图" class="headerlink" title="题目：克隆图"></a>题目：克隆图</h3><p>给你无向连通图中一个节点的引用，请你返回该图的深拷贝（克隆）<br>图中的每个节点都包含它的值 val（int）和其邻居的列表（list[Node]）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Node &#123;</span><br><span class="line">  public int val;</span><br><span class="line">  public List&lt;Node&gt; neighbors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说白了，看了半天没懂，大概意思就是说？？？拷贝一个图？参考了别人的代码，自己还是没理解。等再看看。<br>感觉拿着 dfs 框架套上去就行了。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">Node* <span class="title">cloneGraph</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;Node*,Node*&gt; mp;  <span class="comment">// 无序图</span></span><br><span class="line">    <span class="keyword">return</span> dfs(node,mp);            <span class="comment">// 直接深度遍历，克隆</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Node* <span class="title">dfs</span><span class="params">(Node* node,<span class="built_in">unordered_map</span>&lt;Node*,Node*&gt; &amp;mp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!node) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(mp.count(node)) <span class="keyword">return</span> mp[node];</span><br><span class="line">    Node* tmp = <span class="keyword">new</span> Node(node -&gt; val);</span><br><span class="line">    mp[node] = tmp;</span><br><span class="line">    <span class="keyword">for</span>(Node* neighbor: node -&gt; neighbors)&#123;</span><br><span class="line">      tmp -&gt; neighbors.push_back(dfs(neighbor,mp));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="目标和"><a href="#目标和" class="headerlink" title="目标和"></a>目标和</h3><p>给定一个非负整数数组，a1,a2,…,an,和一个目标数 S。现在你有两个符号+和-。对于数组中的任意一个整数，你都可以从+或-中选择一个符号添加在前面。</p><p>返回可以使最终数组和为目标数 S 的所有添加符号的方法数。</p><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：nums: [1, 1, 1, 1, 1], S: 3</span><br><span class="line">输出：5</span><br><span class="line">解释：</span><br><span class="line">-1+1+1+1+1 = 3</span><br><span class="line">+1-1+1+1+1 = 3</span><br><span class="line">+1+1-1+1+1 = 3</span><br><span class="line">+1+1+1-1+1 = 3</span><br><span class="line">+1+1+1+1-1 = 3</span><br><span class="line">一共有5种方法让最终目标和为3。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>数组非空，且长度不会超过 20</li><li>初始的数组的和不会超过 1000</li><li>保证返回的最终结果能被 32 位整数存下</li></ul><p>使用递归，枚举出所有可能的情况。具体地，当我们处理到第 i 个数时，我们可以将它添加+或-，递归地搜索这两种情况。当我们处理完所有的 N 个数时，我们计算出所有数的和，并判断是否等于 S。</p><p>代码如下(C++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(nums,S,<span class="number">0</span>);   <span class="comment">// 深度优先搜索，枚举出所有结果。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums,uint target,<span class="keyword">int</span> left)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span> &amp;&amp; left == nums.size()) <span class="keyword">return</span> <span class="number">1</span>;    <span class="comment">// 目标为0并且遍历完了，返回一种方式</span></span><br><span class="line">        <span class="keyword">if</span>(left &gt;= nums.size()) <span class="keyword">return</span> <span class="number">0</span>;       <span class="comment">// left大于数组长度，说明都遍历完了，但结果不对，返回0</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        ans += dfs(nums,target-nums[left],left+<span class="number">1</span>);    <span class="comment">// 给第一个数添加减号，然后递归</span></span><br><span class="line">        ans += dfs(nums,target+nums[left],left+<span class="number">1</span>);    <span class="comment">// 给第一个数添加加号，然后递归</span></span><br><span class="line">        <span class="keyword">return</span> ans;   <span class="comment">// 得到所有方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="DFS-模版-2"><a href="#DFS-模版-2" class="headerlink" title="DFS-模版-2"></a>DFS-模版-2</h3><p>递归解决方案的优点是它更容易实现。但是，存在一个很大的缺点：如果递归的深度太高，你将遭受堆栈溢出。在这种情况下，您可能会希望使用 BFS，或使用显式栈实现 DFS。</p><p>模版(JAVA)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Return true if there is a path from cur to target.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    Set&lt;Node&gt; visited;</span><br><span class="line">    Stack&lt;Node&gt; s;</span><br><span class="line">    add root to s;</span><br><span class="line">    <span class="keyword">while</span> (s is not empty) &#123;</span><br><span class="line">        Node cur = the top element in s;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span> <span class="keyword">if</span> cur is target;</span><br><span class="line">        <span class="keyword">for</span> (Node next : the neighbors of cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (next is not in visited) &#123;</span><br><span class="line">                add next to s;</span><br><span class="line">                add next to visited;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        remove cur from s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该逻辑与递归解决方案完全相同。但使用了 while 循环和栈来模拟递归期间的系统调用栈。</p><h3 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a>二叉树的中序遍历</h3><p>给定一个二叉树，返回它的中序遍历。</p><p>首先得知道什么是中序遍历：</p><p>二叉树的遍历方式有前序，中序，后序，层序<br>前序遍历：先访问根节点，然后左子树，然后右子树<br>中序遍历：先访问左子树，然后根节点，然后右子树<br>后序遍历：先访问左子树，然后右子树，然后根节点<br>层序遍历：把一棵树从上到下，从左到右依次写出来</p><p>接下来就好理解了，左根右，递归。</p><p>代码如下(C++)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;        <span class="comment">// 输出</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="literal">NULL</span>)&#123;   <span class="comment">// 如果有根</span></span><br><span class="line">            inorderTraversal(root -&gt; left);     <span class="comment">// 根的左</span></span><br><span class="line">            ans.push_back(root -&gt; val);         <span class="comment">// 根的值</span></span><br><span class="line">            inorderTraversal(root -&gt; right);    <span class="comment">// 根的右</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;             <span class="comment">// 这玩意吧，拿纸画一下就行。开始我也不懂，画着画着就懂了。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本文为学习记录，参考之处较多，<strong>如果有侵权内容，请联系我立即删除</strong>。</p></blockquote><p>BTW: 端午节快乐～<br><img src="%E7%AB%AF%E5%8D%88%E8%8A%82-%E7%B2%BD%E5%AD%90.jpg" alt=" "><br><img src="%E7%AB%AF%E5%8D%88%E8%8A%82-%E8%A5%BF%E7%93%9C.jpg" alt=" "></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创造我想要的生活</title>
      <link href="/posts/32b8e0a9/"/>
      <url>/posts/32b8e0a9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不管我想不想，生活都还是生活。我不愿意，我想要的都是别人的。</p></blockquote><p>今天我们小区停电停水，我上午断断续续学会习，一家人吃了午饭后陆续午休了。靠在床上，想要写点什么，没什么思路，顺手点开了 apple 官网，看了看电脑平板，又点开了淘宝，缓过神来已经 20 分钟后了。看了看写了一半的学习笔记，忽然一股凉意涌上心头。</p><p>就好像平时有时候，上一秒看着论文，下一秒忽然点开 QQ，空间走一走的感觉。</p><p>若不抽出时间来创造自己想要的生活，你最终不得不花费大量的时间，来应付自己不想要的生活。</p><p style="text-align: right">—— 予诗 </p><a id="more"></a><p>奶嘴效应很多人应该都知道，我也不是啥专业人士，就不聊那些了。</p><p>写博客主要是给自己看，我就想跟自己聊聊，如何创造我想要的生活。</p><h2 id="我想要什么"><a href="#我想要什么" class="headerlink" title="我想要什么"></a>我想要什么</h2><p>想要创造我想要的生活，首先要知道我想要的是什么？很抱歉，这么多年我也不知道。说我是一个懒惰的人吧，有时候又挺勤快的，也不排斥干活；说我是没上进心吧，我又对新鲜事物充满了兴趣；说我不努力吧，我又可以一整晚一整晚的学习；说顺其自然，随性而为，可是有生来倔强。</p><p>所以，谜，可能是我从骨子里带来的劣根性。</p><p>不知道自己想要的是啥，但是我对未来的生活有个美好的预期：“有个爱我的我爱的妻子；有两个孩子；家里一猫一狗；有个小小的庭院可以让我重点花草；住的位置尽量不要太繁华，也不要太冷清；附近有些差不多年纪的夫妻，有着差不多大的孩子；周内白天上班，下班接孩子带孩子；周末回爸妈家看看，或者和邻居们徒步，旅游”。这生活好像是每个人所期待的生活。</p><p>那如何拥有这样的生活呢？</p><p>最简单的方法：努力。花时间提升自己，让自己变得优秀，可以成为一个合格的父亲，有好的工作，可以作为一家之主，待人亲和，是一个好的邻居，还得懂怎么养花草养宠物。（BTW：一定得空调啥的都有，身边一位热的睡不着，疯狂蹬腿，我以为抽风了，吓死我..<br>.逃）<br>以上这种方法适用于，几乎所有普通人。</p><p>但是有个重点，花时间，只有花费有效的时间，才算是花时间。把时间花掉，去购买了未来。如果是把时间花掉，买了个寂寞，那不叫花时间，叫浪费时间。</p><h2 id="掌控自己"><a href="#掌控自己" class="headerlink" title="掌控自己"></a>掌控自己</h2><p><strong>时间是一种资源</strong>。这几乎是一个共识，但是时间是一直流动的，哪怕这一刻我发呆了，时间也是消逝的。当我觉得时间不够的时候，最直接的方法就是压缩自己，让自己在短时间做更多的事情，以此来节省时间。</p><p>比如熬夜看文章，熬夜敲代码。奇怪的是，通过这些方法，不管我怎么压缩时间，我都会觉得，自己还是没有时间去运动，去旅游，去忙完手头去做自己想做的事情。</p><p>比如我本科和研究生，每天都晚上 2 点多睡。参加飞思卡尔那更是长时间的 4 点睡，8 点起。电赛四天三夜的坚持。我从来不否认这些经历带给我的飞速成长。<strong>但是</strong>当时的我缺少一种意识，叫自律。</p><p>什么是自律，每天早上八点准时学习叫自律？那一直学一直学还叫自律么？</p><p>自律<strong>官方解释</strong>：在没有人现场监督的情况下，通过自己要求自己，变被动为主动，自觉地遵循法度，拿它来约束自己的一言一行。指不受外界约束和情感支配,据自己善良意志按自己颁布的道德规律而行事的道德原则。</p><p>我对自律的理解：就是<strong>说干啥就干啥</strong>。</p><p>说今天上午 8 点到 12 点学习，那 8 点就必须开始学，12 点就必须停。任何一个事情，自己的心控制不住身体的时候，就是欲望。12 点不想停，觉得多学一会就会超越别人，那就是超越别人的欲望在作祟。</p><p>控制住自己的欲望，是创造生活的第一步。</p><h2 id="支配自己"><a href="#支配自己" class="headerlink" title="支配自己"></a>支配自己</h2><p>一天 24 小时，一年 365 天，一辈子 36500 天。</p><p>每一天都是这一生的基本单位，这 24 小时，拿来多少创造自己的生活。这一生就有多少是自己想要的生活。每天睡 12 个小时，这一辈子有一半就在睡梦中度过。每天阅读 4 个小时，这一辈子有 1/6 时间在阅读。</p><p>看吧，把整体细分，结果就是这么真实且残酷。</p><p>最近刷题，我看到有前辈说，这 1k 题刷 7 遍就能去 Google，有前辈刷 200 道左右顺利进自己想去的公司，有些朋友问，我还有一个月面试，怎么刷题才来得及。看到了么，生活总是给有准备的人的。</p><p>从我了解到这样的人生时，我想要的人生就有着很多东西，避无可避，那就从这一刻开始，每天让自己变得优秀起来，努力分配好自己的每一分每一秒（不要怕刚开始的挫折，一切都会慢慢好起来）</p><p>现实中，很多人，迫于生活压力，迫于学业压力，把丧字贴在自己额头，每天用发泄性娱乐来控制自己，被别人所支配。然后被一个个奶嘴安慰，停止哭闹，锐气没了，突破自己的勇气没了，平庸的生活就认了。（强行鸡汤，希望自己每次看都可以警醒）</p><p>常有人说，我一天那么忙，哪有时间做这做那。现在科技发达了，网络让信息传播越来越快，人们见识的越来越多，我觉得人是有贪欲的，见得多了，想要的就多了。乱花渐欲迷人眼。花花世界，让我们想要的越来越多，时间却固定不变，当然会有哪有时间做着做那的错觉。其实，静下心来，理清楚自己想要的，想要当个银行白领，那当下就应该学好相关的技术，而不应该说，当下想要去享受银行白领享受的生活。看到别人好，甚是羡慕，却深入迷雾不自知，终误了卿卿性命。</p><p>所说的没时间做，还常常意味着这件事情不重要。所以学会分配自己的时间，把时间放在更重要的事情上。</p><p>我觉得只有支配了自己，才有机会支配未来。</p><h2 id="认真努力"><a href="#认真努力" class="headerlink" title="认真努力"></a>认真努力</h2><p>不能自律，何以正人？</p><p>既然决定了要努力，那就要有规矩，给自己定下规矩，按照规矩来，不因为犯错感到挫败，但应该因为犯错误感到羞耻。知耻而后勇。</p><p>时间是一种选择，生活就是我选择的结果，我不会通过透支去保留时间，我想通过自己认真的思考一次次的修改，去创造我想要的生活，用这样的生活，减去我繁重的枝桠，让我一身轻松享受未来的时间。</p><p>希望我可以坚定本心，按照自己所想的生活，不被任何外物所扰。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列&amp;栈-03</title>
      <link href="/posts/4bfeecf4/"/>
      <url>/posts/4bfeecf4/</url>
      
        <content type="html"><![CDATA[<h2 id="栈：后入先出的数据结构"><a href="#栈：后入先出的数据结构" class="headerlink" title="栈：后入先出的数据结构"></a>栈：后入先出的数据结构</h2><p>在 LIFO 数据结构中，将首先处理添加到队列中的最新元素。</p><p>与队列不同，栈是一个 LIFO 数据结构。通常，插入操作在栈中被称作入栈 push。与队列类似，总是在堆栈的末尾添加一个新元素。但是，删除操作，退栈 pop，将始终删除队列中相对于它的最后一个元素。</p><ul><li>入栈：在栈顶加入一个元素。</li><li>退栈：删除栈顶的元素。</li></ul><a id="more"></a><p><img src="%E6%A0%88%E7%A4%BA%E4%BE%8B.png" alt=" "></p><h3 id="栈-实现"><a href="#栈-实现" class="headerlink" title="栈-实现"></a>栈-实现</h3><p>栈的实现比队列容易。动态数组足以实现堆栈结构。以下提供一个简单的实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; data;   <span class="comment">// 创建元素</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** 将元素插入堆栈 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">      data.push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 查看堆栈是否为空 */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> data.empty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 获取栈顶元素 */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> data.back();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 删除栈顶元素，成功返回true */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      data.pop_back();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyStack s;</span><br><span class="line">    s.push(<span class="number">1</span>);</span><br><span class="line">    s.push(<span class="number">2</span>);</span><br><span class="line">    s.push(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!s.isEmpty()) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (s.pop() ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈-用法"><a href="#栈-用法" class="headerlink" title="栈-用法"></a>栈-用法</h3><p>大多流行语言都提供了内置的栈库。所以不必重复造轮子。<br>除了<strong>初始化</strong>，我们还需要知道如何使用两个最重要的操作：<strong>入栈</strong>和<strong>退栈</strong>。除此之外，还应该能够从栈中<strong>获得顶部元素</strong>。</p><p>下面是代码示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. Initialize a stack.</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="comment">// 2. Push new element.</span></span><br><span class="line">    s.push(<span class="number">5</span>);</span><br><span class="line">    s.push(<span class="number">13</span>);</span><br><span class="line">    s.push(<span class="number">8</span>);</span><br><span class="line">    s.push(<span class="number">6</span>);</span><br><span class="line">    <span class="comment">// 3. Check if stack is empty.</span></span><br><span class="line">    <span class="keyword">if</span> (s.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Stack is empty!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. Pop an element.</span></span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="comment">// 5. Get the top element.</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The top element is: &quot;</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 6. Get the size of the stack.</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The size is: &quot;</span> &lt;&lt; s.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>当你想首先处理最后一个元素的时候，栈将是最合适的数据操作。</strong></p><h3 id="题目：最小栈"><a href="#题目：最小栈" class="headerlink" title="题目：最小栈"></a>题目：最小栈</h3><p>设计一个支持 push,pop,top 操作，并能在常数时间内检索到最小元素的栈。</p><ul><li>push(x)：将元素 x 推入栈中。</li><li>pop()：删除栈顶的元素。</li><li>top()：获取栈顶元素。</li><li>getMin()：检索栈中的最小元素。</li></ul><p><strong>官方思路</strong>如下</p><p>方法一：使用辅助栈</p><ul><li>定义一个[数据栈]来支持 push、pop、top 操作</li><li>定义一个[辅助栈]其栈顶为当前最小值，以支持常数时间复杂度的 getMin 操作</li></ul><p>代码如下(C++)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> &#123;</span></span><br><span class="line">  <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; dataStack,minStack;   <span class="comment">// 定义数据栈和最小栈</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">  MinStack() &#123;</span><br><span class="line">    minStack.push(INT_MAX);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    dataStack.push(x);  <span class="comment">// 数据栈推入x</span></span><br><span class="line">    <span class="keyword">if</span>(minStack.empty() || x &lt;= minStack.top())&#123;  <span class="comment">// 如果最小值栈为空或者数据为最小值，推入</span></span><br><span class="line">      minStack.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!dataStack.empty())&#123;</span><br><span class="line">      <span class="keyword">if</span>(dataStack.top() == minStack.top())&#123;     <span class="comment">// 如果当前值为最小值，则删除最小栈栈顶元素</span></span><br><span class="line">        minStack.pop();              <span class="comment">// 删除最小栈栈顶</span></span><br><span class="line">      &#125;</span><br><span class="line">      dataStack.pop();               <span class="comment">// 删除数据栈栈顶</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dataStack.top();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> minStack.top();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度 O(1)，空间复杂度 O(n)。</p><p>方法二：使用 Stack&lt;Node&gt; 除了保存当前值外，额外保存当前最小值。</p><p>方法三：自定义 Stack，以单链表形式自定义栈。</p><h3 id="题目：有效的括号"><a href="#题目：有效的括号" class="headerlink" title="题目：有效的括号"></a>题目：有效的括号</h3><p>这个题是我觉得比较简单的了。开心。</p><p>给定一个只包括’(‘,’)’,’{‘,’}’,’[‘,’]‘的字符串，判断字符串是否有效。<br>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>注意空字符串可被认为是有效字符串。</p><p>代码实现如下(C++)：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;   <span class="comment">// 定义栈</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:s)&#123;    <span class="comment">// 遍历s</span></span><br><span class="line">      <span class="keyword">if</span> (x == <span class="string">&#x27;(&#x27;</span> || x == <span class="string">&#x27;[&#x27;</span> || x == <span class="string">&#x27;&#123;&#x27;</span>) st.push(x);   <span class="comment">// 如果有左括号，推入栈中</span></span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(st.empty()) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 如果栈空了，说明没有左括号但是还有右括号，gg</span></span><br><span class="line">        <span class="keyword">if</span>((x == <span class="string">&#x27;)&#x27;</span> &amp;&amp; st.top() == <span class="string">&#x27;(&#x27;</span>) || (x == <span class="string">&#x27;]&#x27;</span> &amp;&amp; st.top() == <span class="string">&#x27;[&#x27;</span>) || (x == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; st.top() == <span class="string">&#x27;&#123;&#x27;</span>)) st.pop(); <span class="comment">// 如果有下一个是右括号，但是栈顶是左括号，则推出</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;          <span class="comment">// 否则说明错位，gg</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(st.empty()) <span class="keyword">return</span> <span class="literal">true</span>;     <span class="comment">// 遍历万事，刚好空了，正确。</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;              <span class="comment">// 左括号多了，gg</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>算法过程：初始化栈。</p><ul><li>一次处理表达式的每个括号。</li><li>如果遇到开括号，我们只需将其推到栈上即可。这意味着我们将稍后处理它，让我们简单地转到前面的 子表达式。</li><li>如果我们遇到一个闭括号，那么我们检查栈顶的元素。如果栈顶的元素是一个 相同类型的 左括号，那么我们将它从栈中弹出并继续处理。否则，这意味着表达式无效。</li><li>如果到最后我们剩下的栈中仍然有元素，那么这意味着表达式无效。</li></ul><h3 id="题目：每日温度"><a href="#题目：每日温度" class="headerlink" title="题目：每日温度"></a>题目：每日温度</h3><p>请根据每日<strong>气温</strong>列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用  0  来代替。</p><p>例如，给定一个列表 temperatures=[73,74,75,71,69,72,76,73]，你的输出应该是[1,1,4,2,1,1,0,0]。<br>提示：气温列表长度的范围是[1,30000]。每个气温的值的均为华氏度，都是在[30,100]范围内的整数。</p><p>代码如下(C++)：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dailyTemperatures</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; T)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = T.size();   <span class="comment">// 获取温度数量</span></span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>; <span class="comment">// 输出</span></span><br><span class="line">  <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;     <span class="comment">// 定义栈</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty() &amp;&amp; T[i] &gt; T[s.top()])   <span class="comment">// 栈为空，或者下个温度，比栈顶（栈顶也是索引）索引的温度高，就把栈顶的索引给previous，然后结果就是两者差，然后把栈顶推出去。</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">int</span> previousIndex = s.top();      <span class="comment">// 把栈顶的索引给pre</span></span><br><span class="line">    ans[previousIndex] = i - previousIndex; <span class="comment">// 差值即为最终要输出的结果</span></span><br><span class="line">    s.pop();  <span class="comment">// 栈顶没用了，推出</span></span><br><span class="line">    &#125;</span><br><span class="line">    s.push(i);  <span class="comment">// 这个索引，把之前的都对比过了，然后把这个索引推进去。</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;   <span class="comment">//返回结果</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="逆波兰表达式求值"><a href="#逆波兰表达式求值" class="headerlink" title="逆波兰表达式求值"></a>逆波兰表达式求值</h3><p>根据逆波兰表示法，求表达式的值。<br>有效的运算符包括+,-,*,/。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><p>说明：</p><ul><li>整数除法只保留整数部分。</li><li>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</li></ul><p>示例  1：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]</span><br><span class="line">输出：9</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：((2+1)*3)=9</span><br></pre></td></tr></table></figure><p>代码如下(C++)：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">int</span> ans;  <span class="comment">// 结果</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;        <span class="comment">// 定义栈</span></span><br><span class="line">  <span class="keyword">int</span> ans_1,ans_2;      <span class="comment">// 定义俩数当缓存</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span> v_mate : tokens)&#123;  <span class="comment">// 遍历输入 tokens</span></span><br><span class="line">    <span class="keyword">if</span>(v_mate == <span class="string">&quot;+&quot;</span>)&#123;    <span class="comment">// 如果遇到 运算符号</span></span><br><span class="line">    ans_1 = st.top();     <span class="comment">// 推出之前的两个数字</span></span><br><span class="line">    st.pop();</span><br><span class="line">    ans_2 = st.top();</span><br><span class="line">    st.pop();</span><br><span class="line">    st.push(ans_2 + ans_1); <span class="comment">// 进行运算，注意，先推出的在前</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v_mate == <span class="string">&quot;-&quot;</span>)&#123;   <span class="comment">// 减法类似</span></span><br><span class="line">    ans_1 = st.top();</span><br><span class="line">    st.pop();</span><br><span class="line">    ans_2 = st.top();</span><br><span class="line">    st.pop();</span><br><span class="line">    st.push(ans_2 - ans_1); <span class="comment">// 注意是 ans_2 - ans_1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v_mate == <span class="string">&quot;*&quot;</span>)&#123;</span><br><span class="line">    ans_1 = st.top();</span><br><span class="line">    st.pop();</span><br><span class="line">    ans_2 = st.top();</span><br><span class="line">    st.pop();</span><br><span class="line">    st.push(ans_2 * ans_1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v_mate == <span class="string">&quot;/&quot;</span>)&#123;</span><br><span class="line">    ans_1 = st.top();</span><br><span class="line">    st.pop();</span><br><span class="line">    ans_2 = st.top();</span><br><span class="line">    st.pop();</span><br><span class="line">    st.push(ans_2 / ans_1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;     <span class="comment">// 如果不是运算符，就把字符串数字转为整型数字推入栈中</span></span><br><span class="line">    st.push(atoi(v_mate.c_str()));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ans = st.top(); <span class="comment">// 栈中最后推入的就是结果</span></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>具体解释见注释。</p><blockquote><p>声明：本文为学习记录，参考之处较多，<strong>如果有侵权内容，请联系我立即删除</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列&amp;栈-02</title>
      <link href="/posts/3cf9dc62/"/>
      <url>/posts/3cf9dc62/</url>
      
        <content type="html"><![CDATA[<h3 id="题目：打开转盘锁"><a href="#题目：打开转盘锁" class="headerlink" title="题目：打开转盘锁"></a>题目：打开转盘锁</h3><p>你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有 10 个数字：’0’到’9’。每个拨轮可以自由旋转：例如把’9’变为’0’,’0’变为’9’。每次旋转都只能旋转一个拨轮的一位数字。</p><p>锁的初始数字为’0000’，一个代表四个拨轮的数字的字符串。</p><p>列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。</p><p>字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回-1。</p><a id="more"></a><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：deadends=[&quot;8888&quot;],target=&quot;0009&quot;</span><br><span class="line">输出：1</span><br><span class="line">解释：把最后一位反向旋转一次即可&quot;0000&quot;-&gt;&quot;0009&quot;。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ol><li>死亡列表 deadends 的长度范围为[1,500]。</li><li>目标数字 target 不会在 deadends 之中。</li><li>每个 deadends 和 target 中的字符串的数字会在 10000 个可能的情况’0000’到’9999’中产生。</li></ol><p>代码如下(C++)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">turnToNumber</span><span class="params">(<span class="built_in">string</span> a)</span></span>&#123;   <span class="comment">// 将数字字符串转变为纯数字</span></span><br><span class="line">    <span class="keyword">int</span> a = a[<span class="number">0</span>];       <span class="comment">// 个十百千，分别减去 &#x27;0&#x27; 变为数字。</span></span><br><span class="line">    <span class="keyword">int</span> b = a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> c = a[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> d = a[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> res = (a - <span class="string">&#x27;0&#x27;</span>) * <span class="number">1000</span> + (b - <span class="string">&#x27;0&#x27;</span>) * <span class="number">100</span> + (c - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (d - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">openLock</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; deadends, <span class="built_in">string</span> target)</span> </span>&#123;   <span class="comment">// 开锁</span></span><br><span class="line">    <span class="built_in">string</span> input = <span class="string">&quot;0000&quot;</span>;</span><br><span class="line">    <span class="function"><span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; <span class="title">deadset</span><span class="params">(deadends.begin(),deadends.end())</span></span>;   <span class="comment">// 无序set</span></span><br><span class="line">    <span class="keyword">if</span>(deadset.count(input)) <span class="keyword">return</span> <span class="number">-1</span>;   <span class="comment">// 如果deadend内部有‘0000’，直接return -1</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt; q;  <span class="comment">// 定义队列q</span></span><br><span class="line">    <span class="keyword">bool</span> visited[<span class="number">10000</span>];</span><br><span class="line">    <span class="built_in">memset</span>(visited,<span class="number">0</span>,<span class="keyword">sizeof</span>(visited));  <span class="comment">// 标记是否被访问过</span></span><br><span class="line">    visited[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    q.push(<span class="string">&quot;0000&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;  <span class="comment">// 只要队列不为空，就一直索引</span></span><br><span class="line">      count++;</span><br><span class="line">      <span class="keyword">int</span> size = q.size();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size;i++)&#123;   <span class="comment">// 判断队列中的每一串数字</span></span><br><span class="line">        <span class="built_in">string</span> s = q.front();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">auto</span> step:&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;)&#123;  <span class="comment">// 都+1或-1，相当于一次 +1 一次 -1</span></span><br><span class="line">            <span class="built_in">string</span> temp = s;</span><br><span class="line">            temp[i] = (temp[i]-<span class="string">&#x27;0&#x27;</span> + step + <span class="number">10</span>) % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(temp == target) <span class="keyword">return</span> count;  <span class="comment">// 如果是目标则返回count</span></span><br><span class="line">            <span class="keyword">if</span>(!deadset.count(temp)&amp;&amp; visited[turnToNumber(temp)] == <span class="literal">false</span>)&#123;</span><br><span class="line">              q.push(temp);   <span class="comment">// 推入队列中</span></span><br><span class="line">              visited[turnToNumber(temp)] = <span class="literal">true</span>;   <span class="comment">// 标记为已经访问过</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;   <span class="comment">// 若是deadend不做处理，不继续向下搜索，相当于绕过deadend</span></span><br><span class="line">        &#125;</span><br><span class="line">        q.pop();  <span class="comment">// q.front已经处理过，出列，更新q.front()</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>memset 常用作初始化工作，void *memset(void *s, int ch, size_t n); 将 s 中当前位置后面的 n 个字节用 ch 替换并返回 s.<br>函数原型是 extern void *memset(void *buffer, int c, int count); buffer: 为指针或是数组，c: 是赋给 buffer 的值，count: 是 buffer 的长度。</p></blockquote><p>官方 python 解答:看着挺简单，让人头大。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">openLock</span>(<span class="params">self, deadends, target</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :type deadends: List[str]</span></span><br><span class="line"><span class="string">    :type target: str</span></span><br><span class="line"><span class="string">    :rtype: int</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">neighbors</span>(<span class="params">node</span>):</span></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">4</span>):</span><br><span class="line">        x = <span class="built_in">int</span>(node[i])</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> (-<span class="number">1</span>,<span class="number">1</span>):</span><br><span class="line">          y = (x + d) % <span class="number">10</span></span><br><span class="line">          <span class="keyword">yield</span> node[:i]+<span class="built_in">str</span>(y) + node[i+<span class="number">1</span>:]</span><br><span class="line">    dead = <span class="built_in">set</span>(deadends)</span><br><span class="line">    queue = collections.deque([(<span class="string">&#x27;0000&#x27;</span>,<span class="number">0</span>)])</span><br><span class="line">    seen = &#123;<span class="string">&#x27;0000&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">      node, depth = queue.popleft()</span><br><span class="line">      <span class="keyword">if</span> node == target: <span class="keyword">return</span> depth</span><br><span class="line">      <span class="keyword">if</span> node <span class="keyword">in</span> dead: <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">for</span> nei <span class="keyword">in</span> neighbors(node):</span><br><span class="line">        <span class="keyword">if</span> nei <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">          seen.add(nei)</span><br><span class="line">          queue.append((nei, depth+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="完全平方数"><a href="#完全平方数" class="headerlink" title="完全平方数"></a>完全平方数</h3><p>给定正整数 n，找到若干个完全平方数(比如 1,4,9,16…)使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。</p><p>示例 1:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 12</span><br><span class="line">输出：3</span><br><span class="line">解释：12 = 4 + 4 + 4</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 13</span><br><span class="line">输出：2</span><br><span class="line">解释：13 = 4 + 9</span><br></pre></td></tr></table></figure><p>代码如下(C++)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)&#123;   <span class="comment">// 如果输入值 小于 0 返回。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;  <span class="comment">// 记录步数</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;   <span class="comment">// 定义队列</span></span><br><span class="line">    Q.push(n);    <span class="comment">// 将目标结果输入队列进行搜索。</span></span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())&#123;  <span class="comment">// 只要队列不为空，就一直搜索</span></span><br><span class="line">      <span class="keyword">int</span> Qsize = Q.size();   <span class="comment">// 查看队列大小</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Qsize; i++)&#123;   <span class="comment">// 进行遍历</span></span><br><span class="line">        <span class="keyword">float</span> temp = Q.front();     <span class="comment">// temp是队列的第一个元素</span></span><br><span class="line">        Q.pop();            <span class="comment">// 推出第一个元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="built_in">sqrt</span>(temp); i &gt; <span class="number">0</span>; i--)&#123;  <span class="comment">// 循环处理第一个元素，判断从大到小哪个可以是平方</span></span><br><span class="line">          <span class="keyword">if</span>(temp == i*i)&#123;          <span class="comment">// 如果相等，则结束</span></span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">return</span> ans;           <span class="comment">// 步数加一，返回</span></span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;                <span class="comment">// 如果不相等</span></span><br><span class="line">            Q.push(temp-i*i);         <span class="comment">// 去掉一个完全平方数后的值推入队列汇总。</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看到 BFS 的题，脑子里知道怎么搞了，就是不知道从何入手。偶然看到了 <strong>labuladong</strong> 大神编写的 BFS 算法框架，摘过来，背就完事了。</p><p>BFS 的核心思想应该不难理解的，就是把一些问题抽象成图，从一个点开始，向四周开始扩散。一般来说，我们写 BFS 算法都是用「队列」这种数据结构，每次将一个节点周围的所有节点加入队列。</p><p>BFS 相对 DFS 的<strong>最主要的区别</strong>是：<strong>BFS 找到的路径一定是最短的，但代价就是空间复杂度比 DFS 大很多。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算从起点 start 到终点 target 的最近距离</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(Node start, Node target)</span> </span>&#123;</span><br><span class="line">  Queue&lt;Node&gt; q; <span class="comment">// 核心数据结构</span></span><br><span class="line">  Set&lt;Node&gt; visited; <span class="comment">// 避免走回头路</span></span><br><span class="line"></span><br><span class="line">  q.offer(start); <span class="comment">// 将起点加入队列</span></span><br><span class="line">  visited.add(start);</span><br><span class="line">  <span class="keyword">int</span> step = <span class="number">0</span>; <span class="comment">// 记录扩散的步数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (q <span class="keyword">not</span> empty) &#123;</span><br><span class="line">    <span class="keyword">int</span> sz = q.size();</span><br><span class="line">    <span class="comment">/* 将当前队列中的所有节点向四周扩散 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">      Node cur = q.poll();</span><br><span class="line">      <span class="comment">/* 划重点:这里判断是否到达终点 */</span></span><br><span class="line">      <span class="keyword">if</span> (cur is target)</span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">      <span class="comment">/* 将 cur 的相邻节点加入队列 */</span></span><br><span class="line">      <span class="keyword">for</span> (Node x : cur.adj())</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">not</span> in visited) &#123;</span><br><span class="line">          q.offer(x);</span><br><span class="line">          visited.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 划重点:更新步数在这里 */</span></span><br><span class="line">    step++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>队列 q 就不说了，BFS 的核心数据结构；cur.adj()泛指 cur 相邻的节点，比如说二维数组中，cur 上下左右四面的位置就是相邻节点；<br>visited 的主要作用是防止走回头路，大部分时候都是必须的，但是像一般的二叉树结构，没有子节点到父节点的指针，不会走回头路就不需要 visited。</p></blockquote><p>大概看完就是一种感觉，啊，这就是我要的，balabala 开始 。。。我真笨。。。</p><p>感谢开源让我们生活更美好。</p><blockquote><p>声明：本文为学习记录，参考之处较多，<strong>如果有侵权内容，请联系我立即删除</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列&amp;栈-01</title>
      <link href="/posts/a5f08dd8/"/>
      <url>/posts/a5f08dd8/</url>
      
        <content type="html"><![CDATA[<p>数组中，我们可以通过索引来访问数据，很多情况下我们可能会想限制数据的处理顺序。</p><p>常见的两种处理顺序是:先入先出（FIFO）以及后入先出（LIFO）</p><table><thead><tr><th>处理顺序</th><th>数据结构</th></tr></thead><tbody><tr><td>先入先出</td><td>队列</td></tr><tr><td>后入先出</td><td>栈</td></tr></tbody></table><a id="more"></a><p>可以学到什么：</p><ol><li>了解：FIFO 和 LIFO 处理顺序的原理</li><li>实现这两个数据结构</li><li>熟悉内置队列和栈结构</li><li>解决基本队列相关问题，BFS。</li><li>解决基本栈相关问题。</li><li>理解，使用 DFS 和其他递归解决问题时，系统栈如何帮你。</li></ol><h2 id="队列-先入先出的数据结构"><a href="#队列-先入先出的数据结构" class="headerlink" title="队列:先入先出的数据结构"></a>队列:先入先出的数据结构</h2><p>在 FIFO 数据结构中，将首先处理添加到队列中的第一个元素。</p><p><img src="%E9%98%9F%E5%88%97%E7%A4%BA%E4%BE%8B.png" alt=" "></p><p>如上图所示，队列是典型的 FIFO 数据结构。插入（insert）操作也称作入队（enqueue），新元素始终被添加在队列的末尾。删除（delete）操作也被称为出队（dequeue)。你只能移除第一个元素。</p><h3 id="队列-实现"><a href="#队列-实现" class="headerlink" title="队列-实现"></a>队列-实现</h3><p>队列的实现方式其实很好理解，就是一个数组，我们通过指针对头部进行索引，就可以实现了。</p><p>这种方法实现很简单，但是效率很低，因为数组的大小不是固定的，会随着指针的移动，占用的空间越来越大。</p><h3 id="改进队列"><a href="#改进队列" class="headerlink" title="改进队列"></a>改进队列</h3><p>循环队列：我们使用固定大小的数组，和两个指针来指示起始位置和结束位置，目的是重用我们之前被浪费掉的存储。</p><h3 id="设计循环队列"><a href="#设计循环队列" class="headerlink" title="设计循环队列"></a>设计循环队列</h3><p>要求我们设计的队列有如下功能：</p><ul><li>MyCircularQueue(k)：构造器，设置队列长度为 k</li><li>Front：从队首获取元素。如果队列为空，返回-1</li><li>Rear：获取队尾元素。如果队列为空，返回-1</li><li>enQueue(value)：向循环队列插入一个元素。如果成功插入则返回真。</li><li>deQueue()：从循环队列中删除一个元素。如果成功删除则返回真。</li><li>isEmpty()：检查循环队列是否为空。</li><li>isFull()：检查循环队列是否已满。</li></ul><p>设计代码如下(C++)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCircularQueue</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">int</span> *data;   <span class="comment">// 存放队列数据</span></span><br><span class="line">  <span class="keyword">int</span> head;   <span class="comment">// 队列头部</span></span><br><span class="line">  <span class="keyword">int</span> tail;   <span class="comment">// 队列尾部</span></span><br><span class="line">  <span class="keyword">int</span> len;  <span class="comment">// 队列长度</span></span><br><span class="line">  <span class="keyword">int</span> count;  <span class="comment">// 队列内部元素个数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">/** 在此初始化数据结构，将队列长度设置为k **/</span></span><br><span class="line">  MyCircularQueue(<span class="keyword">int</span> k) &#123;</span><br><span class="line">    data = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">    head = <span class="number">0</span>;</span><br><span class="line">    tail = <span class="number">0</span>;</span><br><span class="line">    len = k;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 将元素插入循环队列中，如果成功则返回true **/</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isFull())&#123;  <span class="comment">// 循环队列满</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">//插入元素到队列尾部</span></span><br><span class="line">      data[tail] = value;</span><br><span class="line">      count++;</span><br><span class="line">      tail = (tail+<span class="number">1</span>) %len;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 从循环队列中删除元素，如果成功则返回true **/</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty())&#123;  <span class="comment">// 循环队列空</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      head = (head + <span class="number">1</span>) % len;</span><br><span class="line">      count--;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 获取队列头部元素 **/</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty())&#123;  <span class="comment">// 循环队列空</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> data[head];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 获取队列尾部元素 **/</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Rear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty())&#123;  <span class="comment">// 循环队列空</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> temp = tail == <span class="number">0</span> ? (len<span class="number">-1</span>) : (tail<span class="number">-1</span>);</span><br><span class="line">      <span class="keyword">return</span> data[temp];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 检查队列是否为空 **/</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> count == <span class="number">0</span>;  <span class="comment">//队列元素个数为0，元素空。</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/** 检查队列是否已满 **/</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> count == len;  <span class="comment">// 队列元素个数等于数组最大长度，队列满</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="队列用法"><a href="#队列用法" class="headerlink" title="队列用法"></a>队列用法</h3><p>大多数流行语言都提供内置的队列库，因此实际情况我们并不需要重新发明轮子。</p><p>队列有着两个重要的操作，<strong>入队列和出队列</strong>，此外，我们应该能够<strong>获得队列中的第一个元素</strong>，因为应该首先处理它。</p><h2 id="队列和广度优先搜索"><a href="#队列和广度优先搜索" class="headerlink" title="队列和广度优先搜索"></a>队列和广度优先搜索</h2><h3 id="队列和-BFS"><a href="#队列和-BFS" class="headerlink" title="队列和 BFS"></a>队列和 BFS</h3><p>广度优先搜索（BFS）的一个常见应用就是找出从根节点到目标结点的最短路径，示例来解释 BFS 算法中是如何逐步应用队列的。</p><p><img src="BFS%E7%A4%BA%E4%BE%8B.png" alt=" "></p><ol><li>结点的处理顺序是什么？<br>在第一轮中，我们处理根节点。在第二轮中，我们处理根结点旁边的结点；在第三轮中，我们处理距根节点两步的结点。<br>与树的层序遍历类似，越是接近根节点的结点越早遍历。<br>如果在第 K 轮中将结点 X 添加到队列中，则根节点与 X 之间的最短路径长度恰好是 K，也就是说，第一次找到目标结点的时候，你已经处于最短路径中了。</li><li>队列的入队和出队顺序是什么？<br>如上面的动画所示，我们首先将根节点排入队列。然后在每一轮中，我们逐个处理已经在队列中的结点，并将所有的邻居添加到队列中。值得注意的是:新添加的结点<strong>不会</strong>立即遍历，而是在下一轮中处理。<br>结点的处理顺序与他们添加到队列的顺序是完全相同的顺序，即先进先出（FIFO）。这就是我们在 BFS 中使用队列的原因。</li></ol><h3 id="广度优先搜索-模版"><a href="#广度优先搜索-模版" class="headerlink" title="广度优先搜索-模版"></a>广度优先搜索-模版</h3><p>在特定问题中执行 BFS 之前确定结点和边缘非常重要。通常，结点将是实际结点或是状态，而边缘将是实际边缘或可能的转换。</p><p>模版如下(伪代码格式)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回根节点和目标节点之间最短路径的长度。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(Node root, Node target)</span> </span>&#123;</span><br><span class="line">  Queue&lt;Node&gt; <span class="built_in">queue</span>;  <span class="comment">// 存储所有等待处理的节点</span></span><br><span class="line">  <span class="keyword">int</span> step = <span class="number">0</span>;     <span class="comment">// 从根到当前节点所需的步骤数</span></span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  add root to <span class="built_in">queue</span>;</span><br><span class="line">  <span class="comment">// BFS（广度优先搜索）</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">queue</span> is <span class="keyword">not</span> empty) &#123;</span><br><span class="line">    step = step + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 迭代队列中已经存在的节点</span></span><br><span class="line">    <span class="keyword">int</span> size = <span class="built_in">queue</span>.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">      Node cur = the first node in <span class="built_in">queue</span>;</span><br><span class="line">      <span class="keyword">return</span> step <span class="keyword">if</span> cur is target;</span><br><span class="line">      <span class="keyword">for</span> (Node next : the neighbors of cur) &#123;</span><br><span class="line">        add next to <span class="built_in">queue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      remove the first node from <span class="built_in">queue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;    <span class="comment">// 从根到目标没有路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>如代码所示，在每一轮中，队列中的结点是等待处理的结点。</li><li>在每个更外一层的 while 循环之后，我们距离根结点更远一步。变量 step 指示从根结点到我们正在访问的当前结点的距离。</li></ol><p>有时，<strong>确保我们永远不会访问一个结点两次很重要</strong>。否则，我们可能陷入无限循环。如果是这样，我们可以在上面的代码中添加一个哈希集来解决这个问题。这是修改后的<strong>伪代码</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回根节点和目标节点之间最短路径的长度。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(Node root, Node target)</span> </span>&#123;</span><br><span class="line">    Queue&lt;Node&gt; <span class="built_in">queue</span>;  <span class="comment">// 存储所有等待处理的节点</span></span><br><span class="line">    Set&lt;Node&gt; used;     <span class="comment">// 存储所有使用的节点</span></span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>;       <span class="comment">// 从根到当前节点所需的步骤数</span></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    add root to <span class="built_in">queue</span>;</span><br><span class="line">    add root to used;</span><br><span class="line">    <span class="comment">// BFS（广度优先搜索）</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">queue</span> is <span class="keyword">not</span> empty) &#123;</span><br><span class="line">        step = step + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 迭代队列中已经存在的节点</span></span><br><span class="line">        <span class="keyword">int</span> size = <span class="built_in">queue</span>.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            Node cur = the first node in <span class="built_in">queue</span>;</span><br><span class="line">            <span class="keyword">return</span> step <span class="keyword">if</span> cur is target;</span><br><span class="line">            <span class="keyword">for</span> (Node next : the neighbors of cur) &#123;</span><br><span class="line">                <span class="keyword">if</span> (next is <span class="keyword">not</span> in used) &#123;</span><br><span class="line">                    add next to <span class="built_in">queue</span>;</span><br><span class="line">                    add next to used;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            remove the first node from <span class="built_in">queue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;    <span class="comment">// 从根到目标没有路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有两种情况你不需要使用哈希集：1.你完全确定没有循环，例如，在树遍历中；2.你确实希望多次将结点添加到队列中。</p></blockquote><h3 id="岛屿数量"><a href="#岛屿数量" class="headerlink" title="岛屿数量"></a>岛屿数量</h3><p>给你一个由’1’(陆地)和’0’(水)组成的的二维网格，请你计算网格中岛屿的数量。<br>岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。<br>此外，你可以假设该网格的四条边均被水包围。</p><p>使用广度优先搜索方式进行搜索</p><p><strong>思想</strong>：遍历所有的网格，遇到 1，我们就认为遇到了一个岛屿，然后对岛屿的其他范围进行搜索，通过广度优先，对相邻的每个元素进行遍历，如果遇到元素值为 1 的则加入队列。知道队列为空。<br>我们要将遍历过的值归零。这样所有的都为 0 即结束。</p><p>代码如下所示(C++)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取数组的行数和列数</span></span><br><span class="line">    <span class="keyword">int</span> rows = grid.size();</span><br><span class="line">    <span class="keyword">int</span> cols = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(rows ==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cols = grid[<span class="number">0</span>].size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> nums = <span class="number">0</span>;  <span class="comment">// 初始化岛屿数量</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; Q;</span><br><span class="line">    <span class="comment">// 遍历数组的每一个元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;1&#x27;</span>)&#123;  <span class="comment">// 若当前元素值为1</span></span><br><span class="line">          nums++;  <span class="comment">// 岛屿数量加一</span></span><br><span class="line">          Q.push(<span class="built_in">make_pair</span>(i,j));</span><br><span class="line">          grid[i][j] = <span class="string">&#x27;0&#x27;</span>;  <span class="comment">// 将当前元素值设为0，表示已经访问</span></span><br><span class="line">          <span class="comment">// 循环迭代直到队列为空</span></span><br><span class="line">          <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">            <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; node = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> row = node.first, col = node.second;</span><br><span class="line">            <span class="comment">// 遍历上下左右四格，若有元素值为1则加入队列</span></span><br><span class="line">            <span class="keyword">if</span>(row + <span class="number">1</span> &lt; rows &amp;&amp; grid[row+<span class="number">1</span>][col] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">              Q.push(<span class="built_in">make_pair</span>(row+<span class="number">1</span>,col));</span><br><span class="line">              grid[row+<span class="number">1</span>][col] =<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(col + <span class="number">1</span> &lt;cols &amp;&amp; grid[row][col+<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">              Q.push(<span class="built_in">make_pair</span>(row,col+<span class="number">1</span>));</span><br><span class="line">              grid[row][col+<span class="number">1</span>] =<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(row - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[row<span class="number">-1</span>][col] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">              Q.push(<span class="built_in">make_pair</span>(row<span class="number">-1</span>,col));</span><br><span class="line">              grid[row<span class="number">-1</span>][col] =<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(col - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[row][col<span class="number">-1</span>] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">              Q.push(<span class="built_in">make_pair</span>(row,col<span class="number">-1</span>));</span><br><span class="line">              grid[row][col<span class="number">-1</span>] =<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>声明：本文为学习记录，参考之处较多，<strong>如果有侵权内容，请联系我立即删除</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置https</title>
      <link href="/posts/a4734f/"/>
      <url>/posts/a4734f/</url>
      
        <content type="html"><![CDATA[<p>今天域名备案完毕，现在阿里云备案比以前方便许多，不需要幕布拍照，直接移动端备案，一周左右就差不多OVER。</p><p>备案完毕，当然是要把自己的域名和自己的服务器连起来啦，之后就可以愉快的码字了。</p><p>购买和搭建服务器我就不说了，如果有需要可以留言联系我。</p><p>BTW：很推荐<span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuLmNvbQ==" title="https://www.aliyun.com">阿里云 ECS<i class="fa fa-external-link"></i></span>，至少个人博客用起来真的很 happy，学生也不贵。</p><a id="more"></a><h2 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h2><p>首先是 DNS 解析，要求我们有自己的域名。在阿里云控制台，点击解析。</p><p>分别添加以下两条记录：</p><table><thead><tr><th>主机记录</th><th>记录类型</th><th>记录值</th></tr></thead><tbody><tr><td>www</td><td>A</td><td>服务器 IP</td></tr><tr><td>@</td><td>A</td><td>服务器 IP</td></tr></tbody></table><p><strong>注意</strong> www 这一条不能省略，如果没有这一条，之后访问会出现加上 www 找不到 服务器的情况。</p><h2 id="申请-SSL"><a href="#申请-SSL" class="headerlink" title="申请 SSL"></a>申请 SSL</h2><p>在阿里云安全证书位置申请免费的 SSL 证书，需要自己选一下。然后支付 0 元即可。在证书页面下载自己服务器对应的证书文件。有两个文件，一个 key 一个 pem。推荐远程控制在服务器那边下载，好操作一些。</p><h2 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h2><p>ssh 到自己的服务器，或者 vnc 连接，在 nginx 中建立 cert 文件夹，放入下载的 SSL 证书文件。<br>接下来打开 nginx 的 config 文件，在 http 中添加如下内容；</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name  自己的域名;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">  listen 443 ssl;</span><br><span class="line">  server_name 自己的域名;</span><br><span class="line">  ##</span><br><span class="line">  # SSL Settings</span><br><span class="line">  ##</span><br><span class="line">  ssl on;</span><br><span class="line">  ssl_certificate         cert/自己SSL的.pem;</span><br><span class="line">  ssl_certificate_key     cert/自己SSL的.key;</span><br><span class="line">  ssl_session_cache       shared:SSL:1m;</span><br><span class="line">  ssl_session_timeout     5m;</span><br><span class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">  location /&#123;</span><br><span class="line">    root index页面路径;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就可以通过 http 和 https 顺利访问网站了。</p><h2 id="http-重定向到-https"><a href="#http-重定向到-https" class="headerlink" title="http 重定向到 https"></a>http 重定向到 https</h2><p>网上很多方法是以前的 rewrite 方法，现在可以直接用 301 重定向即可。修改 server 80:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  listen 80 default;</span><br><span class="line">  server_name  自己的域名;</span><br><span class="line">  return   301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<strong>listen 80 default</strong>是为了<strong>阻止 IP 访问</strong>。</p><h2 id="自定义-404-页面"><a href="#自定义-404-页面" class="headerlink" title="自定义 404 页面"></a>自定义 404 页面</h2><p>觉得 nginx 的 404 不好看，我们修改服务器的 404 页面，在 nginx 中新建 error 文件夹，自己做或者网上找一个好看的 404 页面，放在 error 文件夹中。修改 location 如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location /&#123;</span><br><span class="line">  root 代码仓库;</span><br><span class="line">  index index.html index.htm;</span><br><span class="line">  error_page 404 403 500 502 503 504 /404.html;</span><br><span class="line">  location /404.html&#123;</span><br><span class="line">    root /etc/nginx/error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<strong>必须要在 http 内，server 外配置 fastcgi_intercept_errors on;</strong>不然自定义 404.html 不会生效。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，网站正常访问，欢迎大家来看。（欢迎个寂寞么=￣ω￣=）</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导航条菜单的制作</title>
      <link href="/posts/982ff115/"/>
      <url>/posts/982ff115/</url>
      
        <content type="html"><![CDATA[<p>每个网站都包含导航条菜单，在此做一些 HTML 和 CSS 基础回顾。</p><p>本文主要跟随课程完成导航栏菜单的制作，课程来源 imooc<span class="exturl" data-url="aHR0cDovL3d3dy5pbW9vYy5jb20vbGVhcm4vNg==" title="http://www.imooc.com/learn/6">导航条菜单的制作<i class="fa fa-external-link"></i></span>。</p><p>推荐学习前端的朋友可以看看，简简单单一个小课程，对于刚有前端基础的人来说很友好，整体清晰易懂，逻辑通顺，后期稍微涉及一丢丢 JS，很不错。</p><a id="more"></a><h2 id="垂直菜单栏"><a href="#垂直菜单栏" class="headerlink" title="垂直菜单栏"></a>垂直菜单栏</h2><p>导航菜单用什么元素制作呢，通过之前学习的<a href="../781b8acb">网页设计结构表现原则</a>我们可以得知,导航目录条目性的语义 与 <strong>无序列表</strong> 非常接近，所以选用无序列表。<br>垂直菜单栏的整体结构如下:</p><p>HTML 代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>新闻快讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>产品展示<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>售后服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS 样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f60</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现垂直菜单栏效果如下：</p><p><img src="%E5%9E%82%E7%9B%B4%E8%8F%9C%E5%8D%95%E6%A0%8F.png" alt=" "></p><h2 id="水平菜单栏"><a href="#水平菜单栏" class="headerlink" title="水平菜单栏"></a>水平菜单栏</h2><p>水平菜单栏如何制作，将垂直放平就是了，所以给 li 添加浮动，浮动后，我们将 ul 的宽度删掉，使 ul 宽度自己被撑起。<br>接下来对 a 链接文字位置修改居中即可，改动如下：</p><p>CSS 样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>水平菜单栏效果图如下：</p><p><img src="%E6%B0%B4%E5%B9%B3%E8%8F%9C%E5%8D%95%E6%A0%8F.png" alt=" "></p><h2 id="伸缩菜单栏-改变高度"><a href="#伸缩菜单栏-改变高度" class="headerlink" title="伸缩菜单栏-改变高度"></a>伸缩菜单栏-改变高度</h2><p>要求：当鼠标经过菜单项的时候，菜单的高度发生了变化。</p><p>首先想到的肯定是在:hover 的状态下改变 height。我们进行尝试。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="selector-tag">height</span>: 40<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="%E6%94%B9%E5%8F%98%E9%AB%98%E5%BA%A601.png" alt=" "></p><p>我们发现样式没有达到我们想要的向上增高的效果，那我们如何实现呢？</p><p>采用 <strong>margin-top:负值</strong> 的方法去实现。然后将文字的 line-height 修改正确即可。</p><p><img src="%E6%94%B9%E5%8F%98%E9%AB%98%E5%BA%A602.png" alt=" "></p><p>代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">5px</span> solid <span class="number">#f60</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f60</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="菜单栏水平伸缩"><a href="#菜单栏水平伸缩" class="headerlink" title="菜单栏水平伸缩"></a>菜单栏水平伸缩</h2><p>水平伸缩，采用 JavaScript 脚本实现，JS 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> aA = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aA.length; i++) &#123;</span><br><span class="line">    aA[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> This = <span class="built_in">this</span>;</span><br><span class="line">      This.time = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        This.style.width = This.offsetWidth + <span class="number">8</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (This.offsetWidth &gt; <span class="number">160</span>) &#123;</span><br><span class="line">          <span class="built_in">clearInterval</span>(This.time);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">30</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    aA[i].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> This = <span class="built_in">this</span>;</span><br><span class="line">      This.time = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        This.style.width = This.offsetWidth - <span class="number">8</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (This.offsetWidth &lt;= <span class="number">120</span>) &#123;</span><br><span class="line">          <span class="built_in">clearInterval</span>(This.time);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">30</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="%E6%94%B9%E5%8F%98%E5%AE%BD%E5%BA%A6.png" alt=" "></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Q: 通常用什么构建导航条菜单？</li><li>A: 使用无序列表。</li><li>Q: 如何将垂直菜单变为水平？</li><li>A: 使用 float: left;</li><li>Q: 制作改变高度延伸，用什么实现？</li><li>A: 使用 margin-top: 负值;</li><li>Q: JS 改变水平宽度时，this 表示什么？</li><li>A: 表示当前 dom 元素，即 a 元素。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页设计之结构表现原则</title>
      <link href="/posts/781b8acb/"/>
      <url>/posts/781b8acb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前端三大基础，HTML+CSS+JavaScript：HTML 为结构，CSS 为表现，JavaScript 为行为。</p></blockquote><p>前端设计需要遵循结构、表现、行为分离原则，此处的分离说的不仅仅是将文件分开来放置！！！</p><p>分离不单单是一种方法，更是一种思想，并不是网页设计最初就需要分离，而是随着技术满满发展，演变出更为复杂的需求，使得分离的原则必不可少。</p><p>分离原则：首先将重点放在 HTML 结构和语义化上面，其次考虑 CSS，JS 等，以便于后期维护和分析。</p><a id="more"></a><p>HTML 结构和语义化就相当于房子的结构，一个合理的结构，才能经得起后期的装修（当然房屋结构也有样式～但是结构一定是最基本的）。CSS 就相当于对房屋进行的后期装修。</p><p>一个网页如何能做到换肤效果呢？一定是 HTML 样式不变，改变 CSS 样式。所以如何来布局好网页？</p><p><strong>一句话总结</strong>：</p><blockquote><p>一般遵循原则: <strong>先考虑文字内容和内容模块之间的关系，重点放在编写 HTML 结构和语义化，然后考虑布局和表现形式。</strong></p></blockquote><p>对同一个页面，会有不同的制作思路和方法，分为初级中级高级。</p><ol><li>初级的制作方式：div 层层嵌套<ol><li>将页面切块</li><li>向不同的块中添加内容</li><li>从上到下编写各自的 CSS 样式</li></ol></li><li>中级的制作方式：去掉多余的 div，进行简化<ol><li>将页面切块（有些单独的标签，会单独保留，不多切块）</li><li>向不同的块中添加内容（与初级不同的是，没有多余的容器）</li><li>从上到下编写各自的 CSS 样式（没有多余的容器，稍微简洁一些）</li></ol></li><li>高级的制作方式：最大化的简化 html 的结构<ol><li>按照结构语义编写 HTML，不切块。</li><li>直接进行 CSS 样式设置，减少 HTML 与 CSS 的契合度。</li></ol></li></ol><p><strong>BTW</strong>：很多复杂的网页，如果说不分块，会导致 CSS 样式过于复杂，所以我觉得，这种方式，适合在每个小的模块中间使用。小的模块内部，先编写结构，减少 HTML 与 CSS 契合度，这样大的模块之间的契合度也会随之减弱。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理想三旬</title>
      <link href="/posts/81ed3783/"/>
      <url>/posts/81ed3783/</url>
      
        <content type="html"><![CDATA[<p>几天前与实验室新来的师弟聊天，忽然想到一个词，<strong>理想</strong>。</p><p>什么是理想？我以前看到过一个回答：</p><blockquote><p>理想是你现在做不到，但一想到理想就觉得能做到并为之热血沸腾的东西。</p></blockquote><p>现在理想对我而言，不像是我坐在街边夜市喝着啤酒，羡慕着边上的跑车；不像是爬山爬到半山腰，仰望着山巅的红旗；不像是在菜市场买菜，和大妈讨价还价。</p><p>现在的理想，像极了这一刻，我躺在床上听着歌，想着这一切，莫名其妙叹出的气。那种虚无缥缈，那种不知何起，不知所踪。</p><a id="more"></a><p>2020 年已经过去一半了，<br>半年多没有写博客了，有些怯懦，也有些犹豫。<br>我不知道这些情绪是不是我和理想之间的距离。</p><p>我自认是一个情感细腻的人，总是敏感的感受到身边人的目光，我也是一个虚假的人，努力的让自己可以有着一个个的角色，用不同的颜色添加的自己的生活，给自己做着加法，让自己诸多光环加身，让自己变得繁重，却不想<strong>只看到了满地的六便士，看不见头顶的月光</strong>。</p><p>很多话，以前不懂（到现在其实也不懂）我记得我老师跟我们说过，<strong>人要平凡，但不能平庸</strong>。</p><p>我很难理解，不懂平凡的生活有什么意义？像父辈那样日复一日上班赚钱养家？平庸和平凡又有什么区别？</p><p>高考之后，我去北京待了一段时间，那时小姨在北京工作，给我租了个民居，那是我第一次去北京，也是我第一次坐飞机。我坐在飞机靠窗的位置，一路上都在外面的云朵，其实当时的我没有啥感觉，没感觉自己渺小啥的，就觉得一切都很新奇，都很酷，原来机场可以那么大，原来一座城市可以那么大，真真的刘姥姥进大观园。<br>也许那时候才渐渐的明白理想是什么，才明白什么是让你想到就觉得自己可以为之奋不顾身，热血沸腾。<br>那一刻我也明白，我不甘平庸。</p><p>说到奋不顾身热血沸腾，忽然想笑，感觉自己在写欲望，理想和欲望是不同的！反正自己的博客，又不交卷，随心写吧。嘿嘿～</p><p>那么平凡又是什么呢？为什么不可平庸，不可无能，不可碌碌无为丧失斗志，却又可以甘于平凡呢？</p><p>这个道理大概是慢慢懂得的，打扫家里卫生，给家人做了饭，饭后和爱人手牵手散步。忽然的那么一瞬间，觉得知足，觉得理想好像离我很近。有时候，近在咫尺的幸福也能让人奋不顾身。</p><p><img src="%E6%9E%97%E7%9A%8B%E6%B9%96.jpg" alt=" "></p><p>理想是在变的，也是多个的，对不同的事物有着不同的期盼，你理想中的学校，理想中的爱人，理想中的家庭，这都是理想。<br>理想之间是交织的，互相联系，有时甚至互相冲突，理想去工作，又理想做个听话的孩子，要听父母话去考研。这时候理想总是要做出取舍。</p><p>其实观点没有对与错。每个人的世界观也都不同。想到了师弟说他想当数学老师，我觉得很好，他有自己未来的目标，并且可以向着目标一直努力，但也许是他的想法太过理想化？希望是我想的过于复杂。</p><p>在通往理想的道路上，总会遇到一个又一个坎，坎是要过的，不是说面前有困难了，就换个方向走。那样只会和理想背道而驰。</p><p>想要轻松的到达理想，其实就是一种欲望，人要懂得管理自己的欲望，把欲望化为一种动力，现在的大学生都不愿意做和自己未来无关的东西，觉得凭什么让我花费我的时间做我不喜欢的事情？（我经常也会这么觉得）但我一直明白一个道理，<strong>没有本事改变环境，那就先改变自己，让自己变得强大了，再试着去改变环境。</strong></p><hr><p>理想应该是放在心底的东西。在夜深人静睡不着的时候，偷偷拿出来，看看理想，然后反思自己的生活。看自己走的路对还是不对。</p><p>尘世如藩篱，我如何能独循灵魂。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理想 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新生扫盲课</title>
      <link href="/posts/b6e8ca67/"/>
      <url>/posts/b6e8ca67/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注：使用了引用语法但不是引用：</p><p>本文主要作用是实验室新生扫盲教程</p><p>希望大家可以自觉的在<strong>转载、转发</strong>时<strong>著名出处</strong>。(๑• . •๑)</p><p>预防侵权，支持原创，支持开源，从你我做起。=￣ ω ￣=</p></blockquote><a id="more"></a><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Copyright(C),2019-2020,xudongpo.cn</span><br><span class="line"> * Author: 许东坡</span><br><span class="line"> * Email: aelousdp@163.com</span><br><span class="line"> * Date: 2019.11.26</span><br><span class="line"> * Version: 1.0</span><br><span class="line"> * Description: 新生扫盲课</span><br><span class="line"> * Purpose：用于 20级 新生的学习方向扫盲，目的在让新生对未来工作项目的流程有大概的认识和了解，对学的的方向可以更明确，不在未来的学习过程中迷失自己。</span><br><span class="line"> * Function List:</span><br><span class="line">    举个栗子</span><br><span class="line">    正题</span><br><span class="line">    软件</span><br><span class="line">    硬件</span><br><span class="line">    学习任务</span><br><span class="line">    总结</span><br><span class="line"> * History: 1</span><br><span class="line"> * Others: NULL</span><br><span class="line">**/</span><br></pre></td></tr></table></figure><blockquote><p>先有几句话：</p><p><strong>艺多不压身</strong>：本科时我的学长告诉我的，这么多年让我保持高昂的学习状态，遇到不会的就学。</p><p><strong>工欲善其事，必先利其器</strong>：自己根据带的很多学弟学妹们总结的经验，一定要先万事俱备，再去做一个事情。</p><p><strong>水滴石穿</strong>：坚持就是胜利，很简单。</p></blockquote><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>基本上，现在学生的工作一般分为 <strong>软件</strong> 和 <strong>硬件</strong> 两个方向，但是只学一个方向肯定是不够的。大家也能从自己的本科毕业设计中可以看出来，任何一个项目的完成，都需要针对 <strong>需求</strong> 对应的完成不同的任务，而这些任务往往需要软硬件搭配才可以完成。</p><p>举个简单的例子：有个项目需要对某十字路口的行人流量进行检测。具体要求如下：</p><ul><li>采用 32 位单片机作为主控</li><li>人流量数据以小时为单位保存</li><li>要求工作人员调试界面</li><li>要可以无线传输数据方便对数据进行提取</li><li>保存历史数据一个月</li><li>要求可以在手机 APP 端调取数据</li></ul><p>针对这样的一个项目需求，我们按照需求一一完成，</p><ol><li>32 位单片机选型，STM32，K60 等等。</li><li>人流量数据保存，需要软件编程。</li><li>工作人员调试界面，需要我们自己按照大小设计 PCB 和焊接 LCD。</li><li>无线传输，我们要自己选定无线传输方案，ZigBee || NRF24L01 || 蓝牙 || GSM。</li><li>历史数据保存一个月，我们需要外部存储设备：SD 卡，U 盘等等。</li><li>手机 APP 端调取数据，需要编写手机 APP。</li></ol><p>以上主要是为了让大家对项目先有一个宏观的认识。</p><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><p>现在实验室的学习方向主要包括以下：（就是说这些有其他的师兄师姐在学，可以互相学习）</p><ul><li>软件<ul><li>C</li><li>Python</li><li>LabVIEW</li><li>Matlab</li><li>JavaScript</li></ul></li><li>硬件<ul><li>模电数电</li><li>C51<ul><li>Keil C51</li></ul></li><li>STM32<ul><li>Keil for ARM</li></ul></li><li>FPGA</li><li>PCB 设计</li></ul></li></ul><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><h3 id="C-语言"><a href="#C-语言" class="headerlink" title="C 语言"></a>C 语言</h3><p>基础必学语言，基本上实验室用到的编程语言，除了 LabVIEW 是 G 语言（图形化语言）之外，其它的基本上都是互相类似的。但是由于 C 语言的基础性，<strong>C 必须要学。</strong></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>这些年最火的编程语言，虽然这两年缓和了一些，但是还是最火，由于非常好入门，导致大家都在学，学是要学的，但<strong>不建议只学</strong>Python。学的话根据自己的方向去学习。</p><p>Python 对我个人来说，更像是一个小的记事本类的工具，写作不会用它，但是偶尔写写小东西会用一样。因为 Python 语法简单，环境简单，依赖库充足，运行一些小的算法 demo 最合适。</p><blockquote><p>俗话说：<strong>人生苦短，我学 Python</strong></p></blockquote><h3 id="LavVIEW"><a href="#LavVIEW" class="headerlink" title="LavVIEW"></a>LavVIEW</h3><p>实验室暂时就我在用，主要用来做一些 Win 系统下的桌面应用程序，LabVIEW 本身是 NI（美国国家仪器）公司开发的一款软件，本身目的在于测量与控制，但是基础功能足够平时的一些桌面应用程序。</p><h3 id="Matlab"><a href="#Matlab" class="headerlink" title="Matlab"></a>Matlab</h3><p>Matlab 大家应该都接触过，数学软件。也是很多人论文要用的东西，现在很多人用 Python 和 Matlab 去对比，也说明了两者的侧重点，都是语法简单，库充裕，这两种都倾向于对算法进行验证。</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>也是我个人学习的语言，这个语言主要用来做前端，我学的话主要为了可以做 WebAPP 的，也可以从软件角度对一些框架进行学习。</p><p>实验室其他师兄弟还有没有会的东西我不太清楚，这些可以大家进入实验室后自己去了解。总之以上这些软件应该是都能找到会的人。学习过程中有啥问题可以问。</p><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><h3 id="模电数电"><a href="#模电数电" class="headerlink" title="模电数电"></a>模电数电</h3><p>硬件必会的东西，硬件设计的基础。</p><h3 id="C51"><a href="#C51" class="headerlink" title="C51"></a>C51</h3><p>入门单片机，8 位单片机。有自己独立的语言 C51，语法和 C 基本一样。</p><p>最简单的集成电路芯片，有 IO，中断，ROM，RAM，A/D，等等。</p><blockquote><p>单片机，控制外部设备，实现功能。</p></blockquote><h4 id="Keil"><a href="#Keil" class="headerlink" title="Keil"></a>Keil</h4><p>51 单片机和 STM32 单片机的开发 IDE。</p><h3 id="STM32"><a href="#STM32" class="headerlink" title="STM32"></a>STM32</h3><p>32 位单片机，目前最火的单片机，基本上现在遇到的大部分项目 STM32 都可以实现。</p><h3 id="PCB-设计"><a href="#PCB-设计" class="headerlink" title="PCB 设计"></a>PCB 设计</h3><p>单片机开发板的设计。就是对平时在洞洞板上面焊接东西的一个封装，设计成一个成品的板子。</p><blockquote><p>总体来说，以上是我了解的实验室或者更多的来讲是你们未来找工作可能会用到的。时间仓促不够全面，有什么问题再问，我再补充。</p></blockquote><h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><ul><li>软件<ul><li>C 语言（2 周)<ul><li>照着各自的课本就可以了，再敲敲例程。</li></ul></li><li>Python（4 周）<ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW1vb2MuY29tLw==" title="https://www.imooc.com/">https://www.imooc.com/<i class="fa fa-external-link"></i></span></li></ul></li><li>LabVIEW/或其他（5 周）</li></ul></li><li>硬件<ul><li>C 语言（1 周）<ul><li>照着各自的课本就可以了，再敲敲例程。</li></ul></li><li>C51 单片机（3 周）<ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtzNDExWTdtaT9mcm9tPXNlYXJjaCZhbXA7c2VpZD03ODgwNjY1Nzc2NjYyOTMzNDc1" title="https://www.bilibili.com/video/BV1Ks411Y7mi?from=search&amp;seid=7880665776662933475">https://www.bilibili.com/video/BV1Ks411Y7mi?from=search&amp;seid=7880665776662933475<i class="fa fa-external-link"></i></span></li></ul></li><li>PCB 设计（3 周）<ul><li><span class="exturl" data-url="aHR0cHM6Ly94dWRvbmdwby5jbi9wb3N0cy80NDFiNTZhMS8=" title="https://xudongpo.cn/posts/441b56a1/">https://xudongpo.cn/posts/441b56a1/<i class="fa fa-external-link"></i></span></li></ul></li><li>STM32 单片机（4 周）</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习主要靠自己的主观能动性。。。大家都研究生了，还是希望自己能学习自觉。</p>]]></content>
      
      
      <categories>
          
          <category> 基础教学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 扫盲课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好2020</title>
      <link href="/posts/2492f508/"/>
      <url>/posts/2492f508/</url>
      
        <content type="html"><![CDATA[<blockquote><p>00 年代如同梦呓，10 年代就在昨日。<br>趁大家都在纪念着 10 年代的结束，我是不是可以偷偷的原谅自己不太满意的过去。<br>希望过往所有的遗憾都是未来惊喜的铺垫。</p></blockquote><p>生活从未偏爱过谁，可我能听懂你的歌，这也许就是你我生存下去的意义。</p><p style="text-align: right">—— 佚名</p><a id="more"></a><p>2019 年 23 点 58 分，我抬手看了看时间，嗯，还有两分钟。</p><p>我盯着时间走到 59，开始在心中倒数，60.59.58…，不晓得是心情不够平静，还是身边歌声太过喧嚣，在倒数 5 秒的时候，时间竟然已经到了 00:00，就在眨眼的那前一秒还是大大的 59，59 的轮廓显得繁琐，如同我 2019 年一整年的生活；又如同我过往的 10 年代；眼那么一眨，就都翻过去了，然后时间一切归零，<strong>2020/01/01/00:00</strong>，悄悄的说一句：<br>你好，2020。</p><p>我公历是 1996 年生，农历是 1995 年生，不准确的说，我从本命年跨到了本命年。时间对我来说一直是一个很敏感的东西，虽然我也经常睡过头，然后又总是为此伤神，然后蒙上被子继续睡，妄图睡到第二天清晨。</p><p>十年前是 2010 年，那年发生了什么，那时候应该是初中，正年少，正轻狂，正意气风发，使劲想想应该能想起来，但是不如 2008 年好记，08 年奥运会，雪灾，转学。奥运会记忆已经不够深刻了，雪灾的雪大概也只剩白色了，转学到市里大概是我深刻的记忆了。好像一切都雾蒙蒙，忘的一干二净，但是曾经的稚嫩犹存。</p><p>今年 2020 年，人类没有离开地球，至今我也没见过奥特曼，哆啦 A 梦到现在都是我的梦中好友，喜羊羊灰太狼我早就看穿了，就像小时候看戏，台上打得难舍难分，私下里也都是很好的朋友，度过了那么多信以为真的虚假，瞒住了过往的十年，瞒不住 20 年代的破晓，瞒不过心中向往未来的光。</p><p>这一切都和我小时候想的有那么些不一样，我以为现在的我攒下的弹珠应该有一麻袋了，但是手里一个都没有；我以为现在的我跳方格应该可以跳到最后一格，可现在的我动弹一下都觉得累；我以为现在的我滑旱冰可以傲视群雄了，谁知道 19 年摔得那一下膝盖至今隐隐作痛；我以为，2020 年的我应该是个大人了，可是呢，现在的我却还在远方。</p><p>父母在，不远游，游必有方。爸爸妈妈，新的一年，我还是很想你们。我不知道什么是成长，但我感觉得到什么是思念。从一周三次电话不思念，到现在的，总记不起打电话却又总是思念。</p><p>2020 年了，那群把太阳画在左上角的孩子长大了。</p><p>我希望我的 20 年代是美好的：<br>我希望我每天都按时起床，去食堂吃一碗热乎的豆腐脑，告诉阿姨，单数日子不要加香菜，双数的日子多要一份香菜；找酱香饼小哥要三块钱饼，等他给我弄刚出锅的饼，刷酱的时候聊几句；再去包子铺买个鸡蛋～<br>我希望我可以认真对待每一餐；<br>我希望我可以合理的安排时间，问心无愧的做自己喜欢的事情，爱自己喜欢的人；<br>我希望我可以温柔且强大；<br>我希望我坚强决绝从不做作；<br>我希望我可以好好爱自己；<br>我希望我可以在阳光下蹦蹦跳跳，穿着干净清爽的衣服，在闲暇时去喝杯咖啡～<br>我希望我可以不够帅的滑着滑板用最帅的心情去看电影；<br>我希望我想哭的时候有人陪，开心的时候也是这个人陪着；<br>我希望我遇到一个人，我们彼此尊重，彼此欣赏，我们互相爱慕，我们很聊得来，也很少相互埋怨；<br>我希望我爱过的人都拥有属于自己的幸福；<br>我希望每一个灵魂都可以勇敢的有尊严的坚强的活着；</p><p>我希望我的亲人健康；<br>我也希望我不要掉头发；<br>我希望我能发两个 SCI 加 EI 会议一大堆；<br>我希望我能顺利毕业；<br>我希望我腹肌胸肌都好看；<br>我希望自己活得自由，活得洒脱；</p><p>我希望我少玩手机；</p><p>以上不分先后，随心所欲了。</p><p>2019 年的任务完成的不错哦～希望 2020 年继续加油。</p><p>有人说，成长就是喜欢的东西依旧是喜欢但是可以放弃，害怕的东西依然害怕但是可以面对，讨厌的人依然讨厌但是可以忍受。喵的咪的，可是我就是想活得自在。我知道自己可能没办法了。那我也要拼尽全力，努力让我的孩子，让我身边的人可以活得自在。</p><p>我相信，只要努力，生活一定会是我想要的样子。</p><p>虽然生活如此的不如意，如此的琐碎，如此的破败杂乱。但是！<br>我不怕！因为今年我 24 岁了，再过十年就 34 岁了，接下来的十年是我人生中的黄金时代。怕个鸟～</p><p>一起加油吧，诸君。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium Designer 入门教程</title>
      <link href="/posts/441b56a1/"/>
      <url>/posts/441b56a1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注：使用了引用语法但不是引用：</p><p>以下内容有部分来源于网络、博客等等，结尾会给出参考链接。(๑•ั็ω•็ั๑)</p><p>希望大家可以自觉的在<strong>转载、转发</strong>时<strong>著名出处</strong>。(๑• . •๑)</p><p>预防侵权，支持原创，支持开源，从你我做起。=￣ ω ￣=</p></blockquote><a id="more"></a><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Copyright(C),2019-2020,xudongpo.cn</span><br><span class="line"> * Author: 许东坡</span><br><span class="line"> * Email: aelousdp@163.com</span><br><span class="line"> * Date: 2019.11.26</span><br><span class="line"> * Version: 1.0.1</span><br><span class="line"> * Description: Altium Designer入门</span><br><span class="line"> * Function List:</span><br><span class="line">    前言</span><br><span class="line">    安装软件</span><br><span class="line">    新建工程</span><br><span class="line">    绘制库</span><br><span class="line">    绘制原理图</span><br><span class="line">    生成PCB</span><br><span class="line">    绘制PCB</span><br><span class="line">    结束语</span><br><span class="line">    引用致谢</span><br><span class="line">    附录</span><br><span class="line"> * History: 1</span><br><span class="line"> * Others: NULL</span><br><span class="line">**/</span><br></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>我本身是硬件出身的，最开始接触的是<strong>protel 99SE</strong>，非常轻量，用来画一些简单的电路图作为入门是可以的，之后做比赛接触到了<strong>Altium Designer</strong>（以下简称 AD），其实 AD 对于我们现阶段的使用其实是够用了，网上很多人说<strong>Candence</strong>很厉害，包括我身边以前实验室的朋友都夸它好，有人夸说明肯定又优势，但是都是一门工具，要我说，武功再好，也怕菜刀，工具趁手，就是好工具。</p><p>而且现在大家也没有太多的时间去接触这么多，我就直接的讲一讲 AD 的一些基本入门。</p><blockquote><p>文中，采用引用样式（这段话这个样子的）均为作者有话说，必须一看，根据自己的实际情况选择是否要学。</p></blockquote><p>话不多说，开始正题：</p><div STYLE="page-break-after: always;"></div><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a><strong>安装软件</strong></h2><p>工欲善其事，必先利其器。以下是我常用的软件版本。</p><p>个人分享的文件链接：&lt;链接: <span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMW1ibXRCNFNuNmdPZzlpV0RheUV6Y2c=" title="https://pan.baidu.com/s/1mbmtB4Sn6gOg9iWDayEzcg">https://pan.baidu.com/s/1mbmtB4Sn6gOg9iWDayEzcg<i class="fa fa-external-link"></i></span> 提取码: yxfi&gt;</p><p>个人分享的替换文件：&lt;链接: <span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXVRMncyWVZncTkzcmczMVNBazNGVFE=" title="https://pan.baidu.com/s/1uQ2w2YVgq93rg31SAk3FTQ">https://pan.baidu.com/s/1uQ2w2YVgq93rg31SAk3FTQ<i class="fa fa-external-link"></i></span> 提取码: dxu9&gt;</p><p>文件具体内容如下：</p><p><img src="文件内容1.png" width="400px" style="display:block" alt="文件内容"></img></p><p><img src="文件内容2.png" width="400px" style="display:block" alt="替换文件"></img></p><p>因为个人原因，电脑存储不够，先不进行下载安装，具体详细的安装过程找时间补齐。</p><p>文件链接中，有详细的安装教程，<strong>破解</strong> 只需要将替换文件进行替换即可。如果您已经完成了软件的安装，可以直接跳过此步骤。</p><p>最开始一直使用的是 09 版本，由于 09 和 10 的中文在 PCB 打印丝印层的时候会有字体错误，遂选用了 15 版本。如有其他版本，不用担心，再次强调，软件只是工具，工具不重要，知道怎么用才重要。</p><p>剑客有云，心中有剑，手中无剑。</p><div STYLE="page-break-after: always;"></div><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a><strong>新建工程</strong></h2><p>下面以个人电脑做示范，开始新建一个工程，完成一个<strong>小工程的绘制</strong>：具体内容暂时选定为简单的<strong>光控灯实例</strong>，毕竟<strong>授人以鱼不如授人以渔</strong>本教程目的在于带领大家熟悉软件，告诉大家一些我可能遇到的问题。如有补充可以联系作者：<em><span class="exturl" data-url="bWFpbHRvOmFlbG91c2RwQDE2My5jb20=" title="mailto:aelousdp@163.com">aelousdp@163.com<i class="fa fa-external-link"></i></span></em></p><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a><strong>新建</strong></h3><p>点击 File -&gt; New -&gt; Project 新建一个工程</p><div style="text-align:left;"><img src="新建工程.png" width="400px" style="display:inline-block;" alt="新建工程"></img></div><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a><strong>选择</strong></h3><p>选择默认即可，根据个人工程位置修改 Name(文件名) 和 Location(路径)</p><div style="text-align:left;"><img src="工程选择.png" width="400px" style="display:inline-block;" alt="工程选择"></img></div><blockquote><p>注：希望大家在新建工程的时候，养成一个良好的习惯，严禁用 a、aa、bbb 等命名，实在是太业余了，还有工程路径，一定要定义一个合理的文件夹，方便自己找得到的那种，每个工程文件都是自己知识的结晶，是自己努力的成果，不可懈怠。</p></blockquote><p>Repository(仓库)和对应的 Folder(文件夹)不需要选择，进入工程之后我们再导入。</p><h3 id="建立完成"><a href="#建立完成" class="headerlink" title="建立完成"></a><strong>建立完成</strong></h3><p>建好的工程如下所示：诺，一片空白，不要慌，一步一步来。</p><div style="text-align:left;"><img src="新建完成.png" width="400px" style="display:inline-block;" alt="新建完成"></img></div><h3 id="额外补充：设置中文方式："><a href="#额外补充：设置中文方式：" class="headerlink" title="额外补充：设置中文方式："></a><strong>额外补充：设置中文方式：</strong></h3><p>DXP -&gt; Preferences -&gt; System -&gt; General</p><div style="text-align:left;"><img src="中文1.png" width="400px" style="display:inline;"></img>&nbsp;<img src="中文2.png" width="400px" style="display:inline;" alt="设置中文"></img></div><p>点选<strong>Use localized resources</strong>，弹窗点击 OK，然后点击 Apply。重启 AD 即可。</p><blockquote><p>不过不建议使用中文，如果连这点英文都不懂，英文芯片手册看不了，不适合做硬件了。</p></blockquote><p>重启后中文界面如下所示：</p><div style="text-align:left;"><img src="中文3.png" width="350px" style="display:inline-block;"></img></div><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a><strong>创建文件</strong></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：本步骤本来在绘制库中，二次修改做出调整。</span><br></pre></td></tr></table></figure><h3 id="新建原理图库"><a href="#新建原理图库" class="headerlink" title="新建原理图库"></a><strong>新建原理图库</strong></h3><p>打开刚才我们建立好的工程，点击 File -&gt; New -&gt; Library -&gt; Schematic Library 具体操作如下，新建原理图库：</p><div style="text-align:left;"><img src="新建库1.png" width="350px" style="display:inline-block;" alt="新建库"></img></div><p>建好的库如下所示：</p><div style="text-align:left;"><img src="新建库2.png" width="350px" style="display:inline-block;"></img></div><p>什么都没有，还是不要慌，我们先操作以下界面，鼠标点击界面一次，按下键盘 shift 键，滚动鼠标滚轮（没有鼠标请淘宝购买），屏幕会左右滚动，按下 ctrl 滚动鼠标滚轮，屏幕会放大缩小，右键长按，可以进行拖拽。</p><p>保存文件，自己重新命名。</p><p>具体的快捷键请见附录。</p><h3 id="新建封装库"><a href="#新建封装库" class="headerlink" title="新建封装库"></a><strong>新建封装库</strong></h3><p>我们建立好原理图库之后，要给对应的原理图库建立对应的封装库。</p><p>点击 File -&gt; New -&gt; Library -&gt; PCB Library 具体操作如下，新建封装库：</p><div style="text-align:left;"><img src="新建库3.png" width="350px" style="display:inline-block;"></img></div><p>快捷键与原理图库类似，自己保存。</p><h3 id="创建原理图文件"><a href="#创建原理图文件" class="headerlink" title="创建原理图文件"></a><strong>创建原理图文件</strong></h3><p>接下来我们创建<strong>原理图文件</strong><br>点击 File -&gt; New -&gt; Schematic 具体操作如下，新建封装库：</p><div style="text-align:left;"><img src="新建库4.png" width="350px" style="display:inline-block;"></img></div><p>自己保存并重命名。</p><h3 id="创建-PCB-文件"><a href="#创建-PCB-文件" class="headerlink" title="创建 PCB 文件"></a><strong>创建 PCB 文件</strong></h3><p>接下来我们创建<strong>PCB 文件</strong><br>点击 File -&gt; New -&gt; PCB 具体操作如下，新建封装库：</p><div style="text-align:left;"><img src="新建库5.png" width="350px" style="display:inline-block;"></img></div><p>自己保存并重命名。</p><div STYLE="page-break-after: always;"></div><h2 id="绘制库"><a href="#绘制库" class="headerlink" title="绘制库"></a><strong>绘制库</strong></h2><p>现在我们的文件结构如下所示：</p><ul><li>Project<ul><li>Source Documents<ul><li>TEST_SCH.SchDoc (原理图文件)</li><li>TEST_PCB.PcbDoc (PCB 文件)</li></ul></li><li>Libraies</li><li>PCB Lib<ul><li>TEST_PCB.PcbLib (PCB 库)</li></ul></li><li>Schematic Lib<ul><li>TEST_SCHLIB.SchLib (原理图库)</li></ul></li></ul></li></ul><div style="text-align:left;"><img src="文件结构.png" width="280px" style="display:inline-block;" alt="文件结构"></img></div><p>接下来，我们由 “0” 开始生 “1”。</p><h3 id="确定器件"><a href="#确定器件" class="headerlink" title="确定器件"></a><strong>确定器件</strong></h3><blockquote><p>说明：很多时候，我们参与一个项目，项目的库什么的并不需要我们自己去完成，很多实验室/公司/团体的前辈们已经完成了，我们需要尽快去熟悉查看被人绘制完毕的库即可。但是！！！这些都是基本功，还是得懂，因为总有些东西是你没有接触到的，是新的元器件，新的封装，所以深学必须掌握，工作可以选学。</p></blockquote><p>首先，我们要知道，我们要完成的是一个光控灯，光控灯的原理图如下图所示：</p><p><img src="光控灯原理图.png" width="350px" style="display:block" alt="光控灯原理图"></img></p><p>其实稍微懂点硬件的朋友一看就知道，电阻 R2 既是光敏电阻，Q1 为 NPN 三极管，由 R1 和 R2 进行分压，控制 Q1 开关，实现 LED1 的亮灭。</p><p>我们对以上的几个器件进行绘制，个人原因，具体物件图均来源于百度图片：<br>选择器件有：碳膜电阻 ｜ 光敏电阻 ｜ Φ5 直插 LED ｜ 2N3904</p><div style="width:160px; margin:auto; float:left; " ><img src="/posts/441b56a1/%E7%A2%B3%E8%86%9C%E7%94%B5%E9%98%BB.png" class="" title="碳膜电阻"></div><div style="width:160px; margin:auto; float:left; " ><img src="/posts/441b56a1/%E5%85%89%E6%95%8F%E7%94%B5%E9%98%BB.png" class="" title="光敏电阻"></div><div style="width:160px; margin:auto; float:left; " ><img src="/posts/441b56a1/%E7%9B%B4%E6%8F%92LED.png" class="" title="直插LED"></div><div style="width:160px; margin:auto; float:left; " ><img src="/posts/441b56a1/NPN%E4%B8%89%E6%9E%81%E7%AE%A1.png" class="" title="NPN三极管"></div><div style="clear:both;"></div><p>电池部分就不画了，直接留开窗接稳压电源即可。</p><p>现在我们已经确定了我们需要的东西(现实中的物件)，有了软件创建的工程以及对应的原理图库和封装库。</p><h3 id="绘制原理图库"><a href="#绘制原理图库" class="headerlink" title="绘制原理图库"></a><strong>绘制原理图库</strong></h3><h4 id="碳膜电阻原理图"><a href="#碳膜电阻原理图" class="headerlink" title="碳膜电阻原理图"></a><strong>碳膜电阻原理图</strong></h4><p>我们这里并不绘制集成封装，所以每个元件都是先绘制原理图库，再绘制封装库，首先绘制碳膜电阻原理图库，原理图库，顾名思义，是在我们绘制原理图时为我们提供方便的库，软件安装时，系统就已经提供了一些常用的库，其实已经有了电阻等元件。我们先不管官方提供的，我们自己从头开始画，学习永远是一个痛苦的过程，从无到有。</p><p>打开我们建立的原理图库。一片空白。</p><p>点击如下位置（或者按下快捷键 P + L ）：</p><div style="text-align:left;"><img src="绘制1.png" width="400px" style="display:inline-block;"></img></div><p>点击空白处，熟悉以下画线，然后画出一个矩形如下：</p><div style="text-align:left;"><img src="绘制矩形.png" width="280px" style="display:inline-block;"></img></div><p>当然如果你有多的时间，也可以逐一实验绘制区域的每一个功能。希望大家有兴趣可以尝试。</p><p>接下来双击矩形，在弹窗中双击 color，选择一种蓝色，看起来好看点的其他颜色其实也行。点击确认，矩形颜色变蓝。</p><p>点击如下位置（或者按下快捷键 P + P ）：</p><div style="text-align:left;"><img src="绘制2.png" width="400px" style="display:inline-block;"></img></div><p>此时鼠标点击空白处，会有一根引脚出现，按下<strong>空格键</strong>可以<strong>旋转 90 度</strong>，点击两次出现两个引脚，右键取消点选。</p><blockquote><p>所有的快捷键都需要自己一遍一遍的去熟悉。只要功夫深，铁杵磨成针，都是熟练的事。</p></blockquote><p>大家可能绘制的时候，遇到我现在遇到的尴尬境地：</p><div style="text-align:left;"><img src="绘制3.png" width="280px" style="display:inline-block;"></img></div><p>引脚怎么都移动不到蓝色的纵轴中间去。这时候点击栅格：</p><div style="text-align:left;"><img src="绘制4.png" width="400px" style="display:inline-block;"></img></div><p>在弹窗中将 10 改为 1，这是你可以移动的最小单位就变小了。</p><p>我们将引脚位置摆放如下：注意方向，仔细看<strong>引脚有一端是有个小白点</strong>，表示这一端是有电气连接的，一定要朝外。</p><p>双击引脚，可以对 Display Name(显示名)和 Designator(指示器)以及长度，大小进行修改。</p><blockquote><p>注：显示名可以随意，但是指示器一定要从 1 开始，1.2.3… 这样。根据元件自身封装引脚顺序定义来绘制。</p></blockquote><p>自己琢磨琢磨，把元件绘制成如下样式：</p><div style="text-align:left;"><img src="绘制5.png" width="300px" style="display:inline-block;"></img></div><p>这样我们的一个电阻原理图封装，就绘制完毕了。点击 Tools -&gt; Rename Compontent 对元件进行重命名为 TEST_RES 即可。</p><p>此时回到原理图文件，在右侧 Libraries 中找到我们的原理图库：</p><div style="text-align:left;"><img src="绘制6.png" width="300px" style="display:inline-block;"></img></div><p>点击，即可看到对应的元件，双击，在空白处即可放置。</p><h4 id="其他元件"><a href="#其他元件" class="headerlink" title="其他元件"></a><strong>其他元件</strong></h4><ul><li>光敏电阻，很简单，在这个电阻的基础上，加几个箭头表示光敏即可。回到原理图库，点击 Tools -&gt; New Component，新建一个元件。将之前的复制粘贴过来，然后画个箭头即可。就不做详细示范了。</li><li>绘制直插 LED，emmmm，我相信这个大家摸索摸索都可以画出来，就是画画。原理图主要是为了方便人类看得懂。</li><li>绘制 2N3904，同理，不详细说明，如果有问题可以联系作者。</li></ul><h3 id="绘制封装库"><a href="#绘制封装库" class="headerlink" title="绘制封装库"></a><strong>绘制封装库</strong></h3><h4 id="碳膜电阻封装"><a href="#碳膜电阻封装" class="headerlink" title="碳膜电阻封装"></a><strong>碳膜电阻封装</strong></h4><p>同理也只绘制简单的碳膜电阻封装，原理都是一样的，如果学习过程中遇到问题，可以联系作者。</p><p>大家要合理的培养自己解决问题的能力。</p><p>打开原理图库，直接使用快捷键（ P + P ）或者上方工具栏。就会出现一个焊盘，根据栅格作为基准，放置第一个焊盘如下：</p><div style="text-align:left;"><img src="绘制7.png" width="150px" style="display:inline-block;"></img></div><p>我们根据实物图可以看出，碳膜电阻共有两个引脚。我们选用的是直插电阻，在 PCB 上的封装是单列直插风格，就是两个焊盘在一条线上，具体间隔根据具体封装决定。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mil（中文译音：密耳），即千分之一英寸，等于0.0254mm（毫米）</span><br><span class="line">常用直径尺寸的密尔与毫米换算如下：</span><br><span class="line">- 1.0mil = 0.025mm</span><br><span class="line">- 1.2mil = 0.030mm</span><br><span class="line">- 1.25mil = 0.032mm</span><br><span class="line">- 100mil = 2.54mm</span><br></pre></td></tr></table></figure><p>我们一般用的排阵尺寸间距为 2.54mm，也就是 100mil。水平间隔 100mil 放置第二个焊盘。左上角有对应的做标尺，如果并不确定。放置之后按下快捷键（ R + M ）进行测量。然后进行微调即可。</p><p>测量图如下：</p><div style="text-align:left;"><img src="焊盘测量.png" width="300px" style="display:inline-block;" alt="焊盘测量"></img></div><p>由于我们要将电阻放倒焊接，经过测量，距离应该是 300mil，再<br>次调整至 300mil。</p><p>接下来，我们给固定好的焊盘绘制外边框，就是在 PCB 上显示的出的白色线条。点击选择 Top Overlay 层，按下 P + L 进行绘制。结果如下：</p><div style="text-align:left;"><img src="绘制8.png" width="300px" style="display:inline-block;"></img></div><p>保存即可，这样一个电阻元件的封装就绘制完成了，如果是其他元器件同理。</p><div STYLE="page-break-after: always;"></div><h2 id="绘制原理图"><a href="#绘制原理图" class="headerlink" title="绘制原理图"></a><strong>绘制原理图</strong></h2><p>点开原理图文件，我们将我们自己绘制的电阻放入原理图中，然后再加入光敏电阻，LED 灯以及 NPN 三极管。连线并完成原理图绘制。</p><div style="text-align:left;"><img src="摆放元件.png" width="300px" style="display:inline-block;" alt="摆放元件"></img> <img src="原理图绘制.png" width="300px" style="display:inline-block;" alt="原理图绘制"></img></div><h3 id="添加封装"><a href="#添加封装" class="headerlink" title="添加封装"></a><strong>添加封装</strong></h3><p>接下来，给每个元器件添加封装，双击元件。</p><div style="text-align:left;"><img src="添加封装.png" width="400px" style="display:inline-block;" alt="添加封装"></img></div><p>在 Models 中点击 Add，选择 Footprint 模型，Browse 浏览文件，会看到我们之前绘制的封装。</p><div style="text-align:left;"><img src="添加封装2.png" width="400px" style="display:inline-block;" alt="选择封装"></img></div><p>选择点击 OK 即可。其他对应的元件也选择对应的封装即可。</p><div STYLE="page-break-after: always;"></div><h2 id="生成-PCB"><a href="#生成-PCB" class="headerlink" title="生成 PCB"></a><strong>生成 PCB</strong></h2><p>原理图界面点击：Design -&gt; Update PCB Document。</p><p>在弹出界面，点击，Validate Changes 以及 Execute Changes。</p><div style="text-align:left;"><img src="生成原理图.png" width="400px" style="display:inline-block;" alt="生成原理图"></img></div><p>Close 即可。</p><div STYLE="page-break-after: always;"></div><h2 id="绘制-PCB"><a href="#绘制-PCB" class="headerlink" title="绘制 PCB"></a><strong>绘制 PCB</strong></h2><p>这时候自动跳转到了 PCB 绘制界面，一片漆黑，不要怕，其实元件已经被摆放在一边了，只是在界面之外。ctrl 滚轮，缩小界面。</p><div style="text-align:left;"><img src="绘制PCB.png" width="400px" style="display:inline-block;" alt="绘制PCB"></img></div><p>将元件先摆放好。</p><blockquote><p>摆放的时候会发现有白色的指示线，目的就是，避免白色指示线交叉过多。白色指示线表示电气连接，就是最后要将他们连接在一起的。</p></blockquote><p>摆放结束，切换层到 Top Layer 层，按下快捷键 P + T 进行连接。绘制完毕，如图所示。</p><div style="text-align:left;"><img src="绘制PCB2.png" width="350px" style="display:inline-block;" alt="布线"></img></div><p>切换到 Keep-Out Layer 层，绘制板子大小。绘制过程中，按下 shift + 空格 可以切换线型。</p><p>丝印层（Top Overlay）自行调节摆放位置。</p><p>绘制结果如下：</p><div style="text-align:left;"><img src="绘制PCB3.png" width="350px" style="display:inline-block;" alt="绘制外框"></img></div><p>选中边框，点击 Design -&gt; Board Shape -&gt; Define from selected objects。</p><p>重新定义板子外形。最终如下。</p><div style="text-align:left;"><img src="绘制PCB4.png" width="350px" style="display:inline-block;" alt="裁剪板子"></img></div><p>按下 3，观察 3D 视图如下：</p><div style="text-align:left;"><img src="绘制PCB5.png" width="350px" style="display:inline-block;" alt="3D视图"></img></div><div STYLE="page-break-after: always;"></div><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a><strong>结束语</strong></h2><p>其实这个案例非常简单，但是本文目的就是带大家走一遍过程，所谓入门，就是你知道一件事情的流程，知道如何实现。所谓进阶，就是一遍一遍的走这个流程，直到你闭着眼也知道怎么走。</p><p>这个工具我也很多年没用了。可是上手的一瞬间，各种快捷键，当年画板子的技巧，全都在心里了。这些教没用，要大家自己画然后去摸索。</p><blockquote><p>对我个人而言，任何一件事都是熟能生巧，大家在学习的过程中，学什么板子就画什么板子，学 8051 单片机，那就画几个 51 板子，学 STM32，那就画几个 32 板子。不同的封装，不同的型号，不同的功能。画的多了，就什么都会了。</p></blockquote><p>GitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Rvbmdwb1h1L0FELUxlYXJuL2Jsb2IvbWFzdGVyL0FE5YWl6ZeoLm1k" title="https://github.com/DongpoXu/AD-Learn/blob/master/AD入门.md">https://github.com/DongpoXu/AD-Learn/blob/master/AD入门.md<i class="fa fa-external-link"></i></span></p><p>之后会持续更新，敬请期待。</p><div STYLE="page-break-after: always;"></div><h2 id="引用致谢"><a href="#引用致谢" class="headerlink" title="引用致谢"></a><strong>引用致谢</strong></h2><p>非常感谢如下链接：</p><p>聚优致成的博客：<span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjkzNTAwMDEvYXJ0aWNsZS9kZXRhaWxzLzUyMTk5MzU2" title="http://blog.csdn.net/qq_29350001/article/details/52199356">http://blog.csdn.net/qq_29350001/article/details/52199356<i class="fa fa-external-link"></i></span>感谢您的博客让我受益匪浅。</p><p>单位换算：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmNodWFuMjMvYXJ0aWNsZS9kZXRhaWxzLzg4NjQ5Nzcx" title="https://blog.csdn.net/yanchuan23/article/details/88649771">https://blog.csdn.net/yanchuan23/article/details/88649771<i class="fa fa-external-link"></i></span></p><blockquote><p>强烈推荐： 上述博客推荐大家有时间看看，有些非常好，写的很详细，包括很多规则定义的进阶部分。</p></blockquote><div STYLE="page-break-after: always;"></div><h2 id="附录一：快捷键"><a href="#附录一：快捷键" class="headerlink" title="附录一：快捷键"></a><strong>附录一：快捷键</strong></h2><h3 id="原理图-amp-amp-PCB-通用"><a href="#原理图-amp-amp-PCB-通用" class="headerlink" title="原理图 &amp;&amp; PCB 通用"></a><strong>原理图 &amp;&amp; PCB 通用</strong></h3><div style="overflow-x: auto;    margin-bottom: 24px;"><table border="1" cellspacing="0" cellpadding="0" style="color:rgb(51,51,51);line-height:26px;"><tbody><tr><td valign="top"><p align="center"><span style="font-family:'Microsoft YaHei';font-size:18px;">快捷键</span></p></td><td valign="top"><p align="center"><span style="font-family:'Microsoft YaHei';font-size:18px;">相关操作</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Shift</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">当自动平移时，加速平移</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Y</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">放置元件时，上下翻转</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">X</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">放置元件时，左右翻转</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Shift+↑（↓、←、→）</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">在箭头方向以10个栅格为增量移动光标</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">↑、↓、←、→</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">在箭头方向以1个栅格为增量移动光标</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Esc</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">退出当前命令</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">End</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">刷新屏幕</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Home</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">以光标为中心刷新屏幕</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">PageDown或Ctrl+鼠标滑轮</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">以光标为中心缩小画面</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">PageUp或Ctrl+鼠标滑轮</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">以光标为中心放大画面</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">鼠标滑轮</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">上下移动画面</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Shift+鼠标滑轮</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">左右移动画面</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+Z</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">撤销上一次操作</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+Y</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">重复上一次操作</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+A</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">选择全部</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+S</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">存储当前文件</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+C</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">复制</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+X</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">剪切</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+V</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">粘贴</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+R</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">复制并重复粘贴选中的对象</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Delete</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">删除</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">V+D</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">显示整个文档</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">V+F</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">显示所有选中</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Tab</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">编辑正在放置的元件属性</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Shift+C</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">取消过滤</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Shift+F</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">查找相似对象</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Y</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Filter选单</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">F11</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开或关闭Inspector面板</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">F12</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开或关闭Sch Filter面板</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">H</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开Help菜单</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">F1</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开Knowledge center菜单</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">W</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开Window菜单</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">R</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开Report菜单</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">T</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开Tools菜单</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开Place菜单</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">D</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开Design菜单</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">C</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开Project菜单</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Shift+F4</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">将所有打开的窗口平均平铺在工作区内</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+Alt+O</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">选择需要打开的文件</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Alt+F5</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">全屏显示工作区</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+Home</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">跳转到绝对坐标原点</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+End</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">跳转到当前坐标原点</span></p></td></tr></tbody></table></div><div STYLE="page-break-after: always;"></div><div style="overflow-x: auto;    margin-bottom: 24px;"><table border="1" cellspacing="0" cellpadding="0"><tbody><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">鼠标左击 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">选择鼠标位置的文档 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">鼠标双击</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">编辑鼠标位置的文档</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">鼠标右击</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">显示相关的弹出菜单</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl + F4</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">关闭当前文档</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl + Tab</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">循环切换所打开的文档</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Alt + F4</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">关闭设计浏览器DXP</span></p></td></tr></tbody></table></div><h3 id="原理图编辑器快捷键"><a href="#原理图编辑器快捷键" class="headerlink" title="原理图编辑器快捷键"></a><strong>原理图编辑器快捷键</strong></h3><div style="overflow-x: auto;    margin-bottom: 24px;"><table border="1" cellspacing="0" cellpadding="0" style="color:rgb(51,51,51);line-height:26px;"><tbody><tr><td valign="top"><p align="center"><span style="font-family:'Microsoft YaHei';font-size:18px;">快捷键</span></p></td><td valign="top"><p align="center"><span style="font-family:'Microsoft YaHei';font-size:18px;">相关操作</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Alt</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">在水平和垂直线上限制</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Spacebar</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">将正在移动的物体旋转90<sup>。</sup></span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Shift+Spacebar</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">在放置导线、总线和多边形填充时，设置放置模式</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Backspace</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">在放置导线、总线和多边形填充时，移除最后一个顶点</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">鼠标左键单击对象的顶点不放，</span></p><p><span style="font-family:'Microsoft YaHei';font-size:18px;">按“Delete”键不放</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">删除选中线的顶点</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">鼠标左键单击对象上任意点不放，</span></p><p><span style="font-family:'Microsoft YaHei';font-size:18px;">按“Insert”键不放</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">在选中线处添加顶点</span></p></td></tr></tbody></table></div><div STYLE="page-break-after: always;"></div><div style="overflow-x: auto;    margin-bottom: 24px;"><table border="1" cellspacing="0" cellpadding="0"><tbody><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+F &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">查询 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">T+C</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">查询原理图对应PCB元器件位置</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">T+O</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">查找元件</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+P</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">放置元件</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+W</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">放置导线</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+B</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">放置总线</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+U</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">绘制总线分支线</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+M</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">放置电气节点</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+Power</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">放置电源和接地符号</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">D+O</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">放置网络标签</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+N</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">放置网络标签</span></p></td></tr></tbody></table></div><h3 id="PCB-编辑器快捷键"><a href="#PCB-编辑器快捷键" class="headerlink" title="PCB 编辑器快捷键"></a><strong>PCB 编辑器快捷键</strong></h3><div style="overflow-x: auto;    margin-bottom: 24px;"><table border="1" cellspacing="0" cellpadding="0" style="color:rgb(51,51,51);line-height:26px;"><tbody><tr><td valign="top"><p align="center"><span style="font-family:'Microsoft YaHei';font-size:18px;">快捷键</span></p></td><td valign="top"><p align="center"><span style="font-family:'Microsoft YaHei';font-size:18px;">相关操作</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Shift+R</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">切换3种布线模式</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Shift+E</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开或关闭捕获电气栅格功能</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+G</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">弹出捕获栅格对话框</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">G</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">弹出捕获栅格选单</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Backspace</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">在放置导线时，删除最后一个拐角</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Shift+Spacebar</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">旋转导线时设置拐角模式</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Shift+S</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开或关闭单层模式</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">O+D</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">显示或隐藏Preference对话框</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">L</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">浏览Board Layers对话框</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+H</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">选择连接层</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+Shift+Left_Click</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">切断线</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">+</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">切换工作层面为下一层</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">—</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">切换工作层面为上一层</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">暂时不显示电气栅格</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+M</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">测量距离</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Shift+Spacebar</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">旋转移动的物体（顺时针）</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Spacebar</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">旋转移动的物体（逆时针）</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Q</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">单位切换</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">I</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开Component placement菜单</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">U</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开Un-Route菜单</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">L</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开Board layer&amp;Colors菜单</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">F2</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开Insight菜单</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+PgUp</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">将工作区放大400%</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Ctrl+PgDn</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">将工作区缩小400%</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Shift+PgUp</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">以很小的增量放大整张图纸</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">Shift+PgDn</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">以很小的增量缩小整张图纸</span></p></td></tr></tbody></table></div><div STYLE="page-break-after: always;"></div><div style="overflow-x: auto;    margin-bottom: 24px;"><table border="1" cellspacing="0" cellpadding="0"><tbody><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">S+A &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">全选 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">E+O+S</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">设置参考点</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">shift+F</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">点击器件查询器件信息</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">选中元器件+L</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">元器件换层</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">E+S+N</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">选择网络线</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">E+D</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">删除信号线</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">V+S</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">最底层出现</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">T+P</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">显示preferences窗口</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">T+C</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">查询PCB元器件对应原理图位置</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">[&nbsp; ]</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">调节PCB亮度</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">V+C+S</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">显示网络连接</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">V+C+H</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">隐藏网络连接</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">ctrl+tab</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">打开的各个文件之间的切换</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+V</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">放置过孔</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+L</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">画线</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+S</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">放置文字</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+P</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">放置圆盘</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+V</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">放置过孔</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+T</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">布线</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+I</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">差分布线</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+G</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">铺铜</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">CTRL+A</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">选择所有信号</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">CTRL+B</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">选择网络信号</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">E+S+Y</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">选择单层上的所有信号</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">V+C+S</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">显示网络连接</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">V+C+H</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">隐藏网络连接</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">CTRL+D</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">试图配置显示和隐藏</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">T+E</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">加泪滴</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">P+C</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">放置元器件</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">M+M</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">移动元器件</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">R+B</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">查看PCB信息</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">CTRL+R</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">一次复制，连续多次粘贴</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">J+L</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">定位到指定的坐标位置</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">J+C</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">定位到指定的元件处</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">R+L</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">查看信号线长度</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">SHIFT+M</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">放大镜</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">D+O</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">板卡选项</span></p></td></tr><tr><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">G+G</span></p></td><td valign="top"><p><span style="font-family:'Microsoft YaHei';font-size:18px;">设置网格距离</span></p></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 硬件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AD教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/posts/798018f3/"/>
      <url>/posts/798018f3/</url>
      
        <content type="html"><![CDATA[<p style="font-size:20px;font-weight:800;">快速排序(Quick Sort)</p><blockquote><p><strong>快速排序</strong>，顾名思义是一种非常快的排序算法，该算法之所以非常快，是因为其高度优化的内部循环，目的就是快，效率高，是处理大数据最快的排序算法之一。</p></blockquote><p>基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分小，则可以分别对这两部分继续进行排序，以达到整个序列有序。</p><a id="more"></a><p>算法描述：</p><ul><li>从数列中挑出一个元素，称为“基准”(pivot)；</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以放到任意一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区(partition)操作；</li><li>递归地(recursive)把小于基准元素的子数列和大于基准值元素的子数列排序。</li></ul><p>JS 代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr, left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length,</span><br><span class="line">    partitionIndex,</span><br><span class="line">    left = <span class="keyword">typeof</span> left != <span class="string">&quot;number&quot;</span> ? <span class="number">0</span> : left,</span><br><span class="line">    right = <span class="keyword">typeof</span> right != <span class="string">&quot;number&quot;</span> ? len - <span class="number">1</span> : right;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = arr[right],</span><br><span class="line">      i = left - <span class="number">1</span>,</span><br><span class="line">      temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = left; j &lt;= right; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt;= x) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    quickSort(arr, left, i - <span class="number">1</span>);</span><br><span class="line">    quickSort(arr, i + <span class="number">1</span>, right);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好好读书，好好睡觉</title>
      <link href="/posts/7c99781e/"/>
      <url>/posts/7c99781e/</url>
      
        <content type="html"><![CDATA[<p>白天，你要好好读书，书里有你不知道的。<br>夜晚，你要好好睡觉，梦里都是你想要的。</p><p style="text-align: right">—— 佚名</p><a id="more"></a><p>听了华晨宇的《与火星的孩子对话》，明明是花花写给粉丝的，我想到的却都是你。篡改了花花的歌词：</p><p>你 看着爱笑 却还有些失落和悲伤<br>那些失落 那些悲伤 也在我心里</p><p>你 看着自信 却还有些退缩和逃避<br>那些退缩 那些逃避 请你别在意</p><p>你 看着坚强 却还有些脆弱和疑惑<br>那些脆弱 那些疑惑 有它的意义</p><p>我 看着坚持 却还有些放弃和冷漠<br>那些放弃 那些冷漠 要做你自己</p><p>你 看着勇敢 却还有些害怕和怯懦<br>那些害怕 那些怯懦 我会在这里</p><p>你一定要相信 好的结局<br>即使有声音说 可笑的你</p><p>你 虽然不说<br>至少有我在这陪你<br>你就是你 最好的你 是我的唯一</p><p>你 别再沉默<br>因为有我选择理解你<br>你就是你 最好的你 没人能代替</p><p>你 即使孤独<br>也还有些抚慰和感动<br>那些抚慰 那些感动 因为我爱你</p><p>如果<br>这个结局是你的期待<br>我就会一直为你祝福</p><p>我是一个很理性的瓶子，装了很多心事但是不会影响我的判断，真话假话，舍得舍不得，放下放不下我都感觉的到。未来本不明了，可我们不还是要各自努力嘛～</p><p>世界没你想象的那么好，世界也没你想象的那么坏。你过来，来我身边。月亮不抱你，时光摧毁你，可我爱你。</p><p>难熬的日子总会过去<br>不信你回头看看<br>你都已经在不知不觉中<br>熬过了很多苦难</p><p style="text-align: right">—— 网易云音乐热评《只好倔强》</p><p>雨霖铃·寒蝉凄切<br>  柳永<br>寒蝉凄切，对长亭晚，骤雨初歇。<br>都门帐饮无绪，留恋处，兰舟催发。<br>执手相看泪眼，竟无语凝噎。<br>念去去，千里烟波，暮霭沉沉楚天阔。<br>多情自古伤离别，更那堪，冷落清秋节！<br>今宵酒醒何处？杨柳岸，晓风残月。<br>此去经年，应是良辰好景虚设。<br>便纵有千种风情，更与何人说？</p><p>这大概就是我现在的心情吧。</p><p>昨晚，我的心因醉意而充满欢欣</p><p>今晚醒来，却徒留一片凄清</p><p>真是怪哉，相隔一夜</p><p>我的心竟然判若两人</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>姑娘</title>
      <link href="/posts/ce4df77c/"/>
      <url>/posts/ce4df77c/</url>
      
        <content type="html"><![CDATA[<p>《姑娘》</p><p>我想，我爱上一个姑娘，<br>我想，她<br>因我温柔而温柔，<br>因我善良而善良；<br>她会生气也会倔强，<br>她会为我心动为我荡漾；</p><a id="more"></a><p>我想她看我，眼里有光，<br>我眼中也倒映着她的衣裙和她俊俏的模样；<br>她那么的天真，那么纯洁，<br>我想她对我热情，对我疯狂；</p><p>她从天而降，像雷鸣掠过飞鸟的翅膀，<br>扑进我怀中，如流水轰击山谷的心脏；</p><p>我忍不住呐喊，却止步彷徨。<br>她，<br>点燃了我，点燃了我熄灭已久的心跳；<br>她，<br>推开了我，带给我那凋零一般的绝望；</p><p>姑娘你离开，飘飘带走了落叶，<br>姑娘你回来，轻轻踏着那白雪，<br>姑娘仰着头，看我炽热的眼神，<br>姑娘倚着我，听我弹奏的心跳。</p><p>献给你。</p>]]></content>
      
      
      <categories>
          
          <category> 诗歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让生命起舞</title>
      <link href="/posts/4881fded/"/>
      <url>/posts/4881fded/</url>
      
        <content type="html"><![CDATA[<p>最近在偶然看到了复旦大学<strong>陈果</strong>老师的人生哲学课，其中讲到活在当下，让生命起舞，让我颇为感触。</p><p>如同老师所愿意的，在这世界的某个地方，渺小的我了解到了，还有很多人是这样生活的，生活还可以这样去做。</p><p>我喜欢海子的诗，海子有一首诗《面朝大海，春暖花开》，讲：“从明天起，做一个幸福的人。”陈果老师问，从明天起，做一个幸福的人，那今天呢？那么今天永远都是不幸福的。</p><a id="more"></a><p>我们的未来是由每一个当下所延续出的时光。这一刻的时光，映照着你此生的种种可能。认真对待此时此刻，就是认真的对待着已经完成了的过去，和将要发生的未来。也就是认真的对待了这一生。</p><p>我前些日子和师弟师妹们开会，他们提出说每个人定一个目标什么的，然后去驱动自己努力。我说：“如果你们都没办法做到每一天都努力，凭什么相信定一个目标就可以努力？”我相信他们在我的强制要求下都可以做得到。但是他们现在是研究生了，如果还是要我强制去做什么事情，那他们和本科生相比又有什么区别呢？每个人都有自己人生的目的，做每一件事情的目的，这些目的成为了主观的驱动力，或者是对编程的兴趣，或者是来自生活的压力，又或者随波逐流别人做什么我就做什么。这些都不够重要，当下这一刻，你做了什么，才是最重要的。</p><p>我是很普通的人，高考失利后我一度陷入了颓废，在大一有幸接触到电子学会，接触到带我的老大，他把我从人群中拎出来说，你小子很不错，有股韧性，我觉得人生有光，我就一直想紧跟他的脚步，我记着他说的话，他说那时的实验室大部分人的思维是有问题的，学习无用论蔓延的很严重，他说，你小子课程不要拉下，这些都是基础，每天都要认真的学。我记下了这些话，但于此同时也沉浸在实验室的创造氛围中，就像女娲造人一样，做一件件的小作品，乐在其中。这一切造就了现在的我，硬件软件都会玩，学校项目都能干，日常工作绰绰有余，但我也感觉到在这一切浮华之下，我所亏欠的那些。就像练功，忽然间练着练着感觉到自己根基不稳，有走火入魔的趋势。然后从现在开始重新看数据结构，算法导论，各种权威指南。时至今日，我的每时每刻还是有收获。</p><p>未来为什么叫未来？未来是不会来的，没来的才叫未来。所以朋友们，请不要总让下一个明天去推卸你的梦想，不要让一个个的未来延续你的幸福。</p><p>尼采说：<strong>每一个不曾起舞的日子，都是对生命的辜负。</strong>全句是：每一个不曾起舞的日子，都是对生命的辜负。一个人知道自己为什么而活，就可以忍受任何一种生活。其实人跟树是一样的，越是向往高处的阳光，它的根就越要伸向黑暗的地底。</p><p>生命值得起舞，是因为你的人生实在值得庆祝，即使这一刻它埋藏在黑暗的地底。如果你知道自己为什么而活，那你就应该起舞，不是说现实中的跳舞，这里的起舞指的就是一个人用心的对自己生活的付出。<strong>最不辜负生命的就是把生活过好，过的充实。</strong></p><p>我们活在这个世界上，会看到很多有意义的事情，也会有很多有意思的事情。网上有句话很流行：<strong>有意义的很多没意思，有意思的很多没意义。</strong>可不就是嘛，很多事情都不能遂我们的愿，毕竟人生不如意事十之八九。</p><p>这时候我们该怎么办呢？我们要尽可能的将有意义的事情变得有意思，并且将有意思的事情变得有意义。对大家来说没意思的事情，你可以做到趣味横生，这就是个性。</p><p>忽然想到一句很有意思的话：<strong>“你想要脱离大众做不一样的烟火,结果发现满地的鞭炮都比你使劲。”</strong></p><p>有着一颗别致的心，看这个世界时候，有着独到的眼光，所有的别人乏味的事情，在你这里都趣味横生。这才是智慧。</p><p>我是一个多愁善感的人，妈妈说我很善良，看到别人受苦就会心软，其实她不知道，我都是跟她学的，从小我们走在路上，我妈妈就会说：“堆儿啊，你说妈上辈子是不是乞丐啊，为什么看到别人乞讨就想哭呢，就想把钱都给人呢。”我初中的时候在外求学，家境着实贫困，炎热的夏天才会有一块钱买冰糕。我都给后宰门路口的乞讨老奶奶了。直到有一天我做完卫生和小伙伴放学玩的很晚，走到小北门那边坐车回家。看到老奶奶被一个年轻人接上了车，那一刻我才感受到深深的欺骗。自此杞人忧天，多愁善感，同时也优柔寡断。</p><p>我想把自己活成一束光～ 活得自由，自信，从容，优雅～ 我想活得闪闪发光～</p><p>我尽心尽力对待你，你喜欢我还是讨厌我，已经无所谓了。</p><p>说是无所谓了，可谁又做得到不渴求呢？</p><p>自爱，必会带来热爱生活。</p><p>命运你随意，我用我的方式自由。</p>]]></content>
      
      
      <categories>
          
          <category> 哲学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敬岁月一杯酒</title>
      <link href="/posts/3a02eda3/"/>
      <url>/posts/3a02eda3/</url>
      
        <content type="html"><![CDATA[<p>上天很有意思，猫喜欢吃鱼，猫却不能下水，鱼喜欢吃蚯蚓，鱼却不能上岸。人生，就是一边拥有，一边失去，一边选择，一边放弃。人生，哪有事事如意，生活，哪有样样顺心。所以，不和别人较真，因为不值得，不和自己较真，因为伤不起，不和往事较真，因为回不去。</p><p style="text-align: right">—— 网易云音乐热评《鱼》陈绮贞</p><a id="more"></a><p>人的一生中，总有那么几年，暗淡无光，负重前行；这一切都是为了让未来的人生变得更加辽阔宽广。</p><p>在知乎看到有人提问：“看了知乎后越来越自卑怎么办？”<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3Blb3BsZS9ab2UyMDEy" title="https://www.zhihu.com/people/Zoe2012">大猫布丁<i class="fa fa-external-link"></i></span>回答，大部分人都只是普通人。</p><p>不提前准备，考试就一定会挂。<br>也许遇到喜欢的人，对方可能并不喜欢你。<br>喜欢你的人，也许并不太完美。<br>会长痘会晒黑会剪糟糕发型，而且不管哪个状态，拍照片都不好看。<br>偶尔尝试录音，才发现声音也并不好听。<br>无意看照片，走路含胸驼背表情呆滞标准路人甲。<br>曾经有向往的事情，但最后没有得到那个机会。<br>遇到大大牛，而自己只是帮忙协作的围观者。<br>有想去的地方，最后并没有去成。<br>向往意外的剧情，但最后什么都没有发生。<br>看书看过很多次，最后还是不记得要点。<br>玛丽苏的主角光环，一次都没发生过。</p><p>这不是病，这是普通人。<br>你不想当普通人，没关系的，这个世界上有很多很多不甘心的普通人。他们付出着成倍的努力去挥洒汗水去让自己变得优秀。</p><p>我就是这么个普通人，普通到丢到人群中就不见了，可能除了个子稍微高点～<br>因为我是普通人，所以我会犯错，会偷懒，也时常躲在角落多愁善感。可是我不想原谅自己的过错；我不想躺在床上，脑海中盘算着今天的计划，斤斤计较早上赖在床上的 10 分钟；<br>但我只是个普通人，稠密的心思没几人能懂，到头来怕只把自己感动。</p><p>博客很久没更新了，想一想其实心里很愧疚哈，明明是自己想要做的事情，都没有做好，还谈什么其他呢？</p><p>敬岁月一杯酒，今年我 23 岁了。</p><p>昨晚我给实验室的师弟师妹们开会，我给他们打气，告诉他们什么该学，该怎么学，想要给他们积极向上的正能量。<br>今晨和老师开会，却发现老师并不在意这些。老师不在意学生们过的怎么样，学的怎么样，老师在意的是你未来要完成什么，你可以完成什么。</p><p>忽然就想到一个词，<strong>人因事显</strong>。这个世界不关心你是怎么样的人，不关心你有什么样的品质，有什么样的想法，这个世界在乎的是，你做了什么。</p><p>要自由的人，其实要担最大的责任，选别人少走的路的人，背负最沉重的枷锁。从来就没有不需要抵抗重力的飞翔。</p><p>我想画一幅画，缩影我的一天。<br>早上朦胧中睁开眼睛，我的画开始了，洗脸刷牙，喝一杯温热水，锻炼八分钟，画出了完美的第一笔。绷紧神经，一笔一笔地画下去。<br>接下来呢～滑着滑板抵达实验室，打开电脑，放首音乐，计划着今天要做的事情。<br>然后起来转一转，理一理思路，坐好开始工作～工作过程中不要忘记喝水哦～ 对了，如果可以，请关掉 qq 微信，必要的联系是要有的，真的要找你的人，一定会找到你。<br>工作闲暇之余，写一写博客，看一看书，做些让自己心情平静的事情。<br>按时吃饭就不必说啦，好的饮食习惯会让我更得心应手的驾驭生活。<br>下午抽出 1 个小时健身。健完身顺路买第二天的早餐～<br>晚上带着疲惫回到住处，不要懈怠，耐心的对待这幅画的尾巴，接点热水，清洗衣物，泡个脚丫，用牙线认真清洁牙齿。然后刷牙洗脸，如果可以再做一下护肤，靠在床上读书半小时。带着对美好生活的向往，放下书，闭上眼。<br>就这样，晚安～</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各有渡口，各有归舟</title>
      <link href="/posts/893bbabc/"/>
      <url>/posts/893bbabc/</url>
      
        <content type="html"><![CDATA[<p>以下内容已经被作者删除。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canvas绘图写字</title>
      <link href="/posts/d95146f2/"/>
      <url>/posts/d95146f2/</url>
      
        <content type="html"><![CDATA[<p>内容借鉴慕课网 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaW1vb2MuY29tL2xlYXJuLzI4NA==" title="https://www.imooc.com/learn/284">学写一个字<i class="fa fa-external-link"></i></span>，老师<span class="exturl" data-url="aHR0cHM6Ly93d3cuaW1vb2MuY29tL3QvMTA4OTU1" title="https://www.imooc.com/t/108955">@liuyubobobo<i class="fa fa-external-link"></i></span>讲的不错，值得学习。</p><p>学一个技术，最重要的就是练。我自己还是个没啥想法的人，那就借鉴别人的想法，跟着老师学习，模仿大神。</p><p>本练习目标是在 PC 和移动端完成一个手写板，以此来练习 canvas 的基础知识。</p><a id="more"></a><h2 id="绘制米字格"><a href="#绘制米字格" class="headerlink" title="绘制米字格"></a>绘制米字格</h2><p>首先要绘制米字格，第一步当然是在 html 中添加 canvas：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span>您的浏览器不支持canvas<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后定义相应的样式。</p><p>注意不推荐在 CSS 中定义 canvas 的大小，因为 CSS 定义的 canvas 大小只是它在 html 文档中显示的大小，而不是具体的 canvas 的分辨率。如果想要定义分辨率的话，通常要定义 width 和 height，在 JS 中定义会更好。</p><p>进行一段绘制的时候，可以将代码进行封装，另外，如果进行了状态设置，为了不然设置的状态影响到我们其他部分的绘制，要使用 <strong>context.save();</strong> 和 <strong>context.restore();</strong> 这样就不会影响其他部分的状态。</p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvasWidth;</span><br><span class="line"><span class="keyword">let</span> canvasHeight = (canvasWidth = <span class="number">800</span>);</span><br><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> context = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">canvas.width = canvasWidth;</span><br><span class="line">canvas.height = canvasHeight;</span><br><span class="line"><span class="comment">// 绘制米字格：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawGrid</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  context.save();</span><br><span class="line">  context.strokeStyle = <span class="string">&quot;rgb(230,11,9)&quot;</span>;</span><br><span class="line">  <span class="comment">// 绘制外框</span></span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.moveTo(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">  context.lineTo(canvasWidth - <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">  context.lineTo(canvasWidth - <span class="number">3</span>, canvasHeight - <span class="number">3</span>);</span><br><span class="line">  context.lineTo(<span class="number">3</span>, canvasHeight - <span class="number">3</span>);</span><br><span class="line">  context.closePath();</span><br><span class="line">  context.lineWidth = <span class="number">6</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绘制米字</span></span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.moveTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  context.lineTo(canvasWidth, canvasHeight);</span><br><span class="line">  context.moveTo(canvasWidth, <span class="number">0</span>);</span><br><span class="line">  context.lineTo(<span class="number">0</span>, canvasHeight);</span><br><span class="line">  context.moveTo(canvasWidth / <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  context.lineTo(canvasWidth / <span class="number">2</span>, canvasHeight);</span><br><span class="line">  context.moveTo(<span class="number">0</span>, canvasHeight / <span class="number">2</span>);</span><br><span class="line">  context.lineTo(canvasWidth, canvasHeight / <span class="number">2</span>);</span><br><span class="line">  context.lineWidth = <span class="number">1</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line">  context.restore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="鼠标响应"><a href="#鼠标响应" class="headerlink" title="鼠标响应"></a>鼠标响应</h2><p>我们的目的是要在 PC 端用鼠标来写字，那我们就需要对鼠标的时间做一个响应。</p><p>分别有 onmousedown, onmouseup, onmouseout, onmousemove。我们对每一个事件做响应的操作。</p><p>注： e.preventDefault(); 组织浏览器默认动作。（虽然在这个练习的鼠标事件处并没有什么用，但是为了规范写上好一些）</p><h2 id="坐标转换"><a href="#坐标转换" class="headerlink" title="坐标转换"></a>坐标转换</h2><p>画布位置的屏幕和鼠标点击的屏幕位置需要调整。<br>我们获取鼠标给回来的文档坐标，然后减去 canvas 的 left 和 top 即可。</p><p>使用 <strong>canvas.getBoundingClientRect()</strong> 获取 canvas 距离上边缘和左边缘的距离即可。</p><p>通过对象进行数据传递</p><h2 id="鼠标绘制实现"><a href="#鼠标绘制实现" class="headerlink" title="鼠标绘制实现"></a>鼠标绘制实现</h2><p>在鼠标移动的时候，利用循环在短时间绘从上一次的位置到当前位置绘制直线。</p><p>粗线条问题：如果线条过粗，绘制的直线就变成了一个个矩形，会导致绘制的线条有毛边。</p><p>利用 <strong>context.lineCap = ‘round’</strong> 以及 <strong>context.lineJoin = ‘round’</strong> 使得线条更加自然。</p><h2 id="运笔速度对画笔影响"><a href="#运笔速度对画笔影响" class="headerlink" title="运笔速度对画笔影响"></a>运笔速度对画笔影响</h2><p>类似一条线的绘制，从初始到终止位置有距离 S 和时间 T，我们通过计算出速度 V 来改变笔画的速度。速度越快画笔越细。</p><p>由于速度的变化其实很快，带来的数值变化也非常的大，所以我们需要记录 lastLineWidth 来使得画笔的宽度变化变得更平滑一些。</p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标速度太快导致不平滑，利用之前的信息做过度</span></span><br><span class="line"><span class="keyword">if</span> (lastLineWidth === -<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> resultLineWidth;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> lastLineWidth * (<span class="number">7</span> / <span class="number">10</span>) + resultLineWidth * (<span class="number">1</span> - <span class="number">7</span> / <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>学写一个字<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &lt;meta</span><br><span class="line">      name=&quot;viewport&quot;</span><br><span class="line">      content=&quot;width=device-width,height = device-height,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../jquery-3.3.1/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/main.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span></span><br><span class="line">      您的浏览器不支持canvas</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;controller&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;black_btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;color_btn color_btn_selected&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;blue_btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;color_btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;green_btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;color_btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red_btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;color_btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;orange_btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;color_btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;yellow_btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;color_btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;clear_btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;op_btn&quot;</span>&gt;</span>清除<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearFix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#canvas</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#controller</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.op_btn</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#aaa</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">5px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">5px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft Sans Serif&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.op_btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#def</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearFix</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.color_btn</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid white;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.color_btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid violet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.color_btn_selected</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid blueviolet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#black_btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#blue_btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#green_btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#red_btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#orange_btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#yellow_btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvasWidth;</span><br><span class="line"><span class="keyword">let</span> canvasHeight = (canvasWidth = <span class="built_in">Math</span>.min(<span class="number">800</span>, $(<span class="built_in">window</span>).width() - <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strokeColor = <span class="string">&quot;black&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> isMouseDown = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> lastLoc = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> lastTimeStamp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> lastLineWidth = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> context = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line">canvas.width = canvasWidth;</span><br><span class="line">canvas.height = canvasHeight;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">windowToCanvas</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 窗口坐标系转换为canvas坐标系</span></span><br><span class="line">  <span class="keyword">let</span> bbox = canvas.getBoundingClientRect();</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="built_in">Math</span>.round(x - bbox.left), <span class="attr">y</span>: <span class="built_in">Math</span>.round(y - bbox.top) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配底部宽度</span></span><br><span class="line">$(<span class="string">&quot;#controller&quot;</span>).css(<span class="string">&quot;width&quot;</span>, canvasWidth + <span class="string">&quot;px&quot;</span>);</span><br><span class="line"></span><br><span class="line">drawGrid();</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#clear_btn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  context.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvasWidth, canvasHeight);</span><br><span class="line">  drawGrid();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;.color_btn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;.color_btn&quot;</span>).removeClass(<span class="string">&quot;color_btn_selected&quot;</span>);</span><br><span class="line">  $(<span class="built_in">this</span>).addClass(<span class="string">&quot;color_btn_selected&quot;</span>);</span><br><span class="line">  strokeColor = $(<span class="built_in">this</span>).css(<span class="string">&quot;background-color&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">beginStroke</span>(<span class="params">point</span>) </span>&#123;</span><br><span class="line">  isMouseDown = <span class="literal">true</span>;</span><br><span class="line">  lastLoc = windowToCanvas(point.x, point.y);</span><br><span class="line">  lastTimeStamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">endStroke</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  isMouseDown = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveStroke</span>(<span class="params">point</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// console.log(&#x27;mouse move&#x27;)</span></span><br><span class="line">  <span class="keyword">let</span> curLoc = windowToCanvas(point.x, point.y);</span><br><span class="line">  <span class="keyword">let</span> curTimeStamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">  <span class="keyword">let</span> s = calcDistance(curLoc, lastLoc); <span class="comment">// 路程</span></span><br><span class="line">  <span class="keyword">let</span> t = curTimeStamp - lastTimeStamp; <span class="comment">// 时间</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> lineWidth = calcLineWidth(t, s);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> draw</span></span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.moveTo(lastLoc.x, lastLoc.y);</span><br><span class="line">  context.lineTo(curLoc.x, curLoc.y);</span><br><span class="line">  context.strokeStyle = strokeColor;</span><br><span class="line">  context.lineWidth = lineWidth;</span><br><span class="line">  context.lineCap = <span class="string">&quot;round&quot;</span>; <span class="comment">// 解决线变粗导致的线条衔接问题</span></span><br><span class="line">  context.lineJoin = <span class="string">&quot;round&quot;</span>; <span class="comment">// 线条衔接问题</span></span><br><span class="line">  context.stroke();</span><br><span class="line"></span><br><span class="line">  lastLoc = curLoc;</span><br><span class="line">  lastTimeStamp = curTimeStamp;</span><br><span class="line">  lastLineWidth = lineWidth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">canvas.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  beginStroke(&#123; <span class="attr">x</span>: e.clientX, <span class="attr">y</span>: e.clientY &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">canvas.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">if</span> (isMouseDown) &#123;</span><br><span class="line">    moveStroke(&#123; <span class="attr">x</span>: e.clientX, <span class="attr">y</span>: e.clientY &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">canvas.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  endStroke();</span><br><span class="line">&#125;;</span><br><span class="line">canvas.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  endStroke();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">canvas.addEventListener(<span class="string">&quot;touchstart&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  touch = e.touches[<span class="number">0</span>];</span><br><span class="line">  beginStroke(&#123; <span class="attr">x</span>: touch.pageX, <span class="attr">y</span>: touch.pageY &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">canvas.addEventListener(<span class="string">&quot;touchmove&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">if</span> (isMouseDown) &#123;</span><br><span class="line">    touch = e.touches[<span class="number">0</span>];</span><br><span class="line">    moveStroke(&#123; <span class="attr">x</span>: touch.pageX, <span class="attr">y</span>: touch.pageY &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">canvas.addEventListener(<span class="string">&quot;touchend&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  endStroke();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> maxLineWidth = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> minLineWidth = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> maxStrokeV = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> minStrokeV = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calcLineWidth</span>(<span class="params">t, s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> v = s / t;</span><br><span class="line">  <span class="keyword">let</span> resultLineWidth;</span><br><span class="line">  <span class="keyword">if</span> (v &lt;= minStrokeV) &#123;</span><br><span class="line">    resultLineWidth = maxLineWidth;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v &gt;= maxStrokeV) &#123;</span><br><span class="line">    resultLineWidth = minLineWidth;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resultLineWidth =</span><br><span class="line">      maxLineWidth -</span><br><span class="line">      ((v - minStrokeV) / (maxStrokeV - minStrokeV)) *</span><br><span class="line">        (maxLineWidth - minLineWidth);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(resultLineWidth);</span><br><span class="line">  <span class="comment">// 鼠标速度太快导致不平滑，利用之前的信息做过度</span></span><br><span class="line">  <span class="keyword">if</span> (lastLineWidth === -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> resultLineWidth;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lastLineWidth * (<span class="number">7</span> / <span class="number">10</span>) + resultLineWidth * (<span class="number">1</span> - <span class="number">7</span> / <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calcDistance</span>(<span class="params">loc1, loc2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 计算两点距离</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(</span><br><span class="line">    (loc1.x - loc2.x) * (loc1.x - loc2.x) +</span><br><span class="line">      (loc1.y - loc2.y) * (loc1.y - loc2.y)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawGrid</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  context.save();</span><br><span class="line">  context.strokeStyle = <span class="string">&quot;rgb(230,11,9)&quot;</span>;</span><br><span class="line">  <span class="comment">// 绘制外框</span></span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.moveTo(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">  context.lineTo(canvasWidth - <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">  context.lineTo(canvasWidth - <span class="number">3</span>, canvasHeight - <span class="number">3</span>);</span><br><span class="line">  context.lineTo(<span class="number">3</span>, canvasHeight - <span class="number">3</span>);</span><br><span class="line">  context.closePath();</span><br><span class="line">  context.lineWidth = <span class="number">6</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绘制米字</span></span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.moveTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  context.lineTo(canvasWidth, canvasHeight);</span><br><span class="line">  context.moveTo(canvasWidth, <span class="number">0</span>);</span><br><span class="line">  context.lineTo(<span class="number">0</span>, canvasHeight);</span><br><span class="line">  context.moveTo(canvasWidth / <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  context.lineTo(canvasWidth / <span class="number">2</span>, canvasHeight);</span><br><span class="line">  context.moveTo(<span class="number">0</span>, canvasHeight / <span class="number">2</span>);</span><br><span class="line">  context.lineTo(canvasWidth, canvasHeight / <span class="number">2</span>);</span><br><span class="line">  context.lineWidth = <span class="number">1</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line">  context.restore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式-观察者模式</title>
      <link href="/posts/a8371eb1/"/>
      <url>/posts/a8371eb1/</url>
      
        <content type="html"><![CDATA[<p style="font-size:20px;font-weight:800;">观察者模式(Observer)</p><blockquote><p><strong>观察者模式定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。又称为发布-订阅模式。</strong></p></blockquote><p>观察者模式最主要的就是完美的将观察者与被观察的对象分离开来。由于面向对象的单一职责原则，使得系统中的每一个类将重点放在某一个功能上，而不是其他方面。观察者模式在模块之间划定了情绪的界限，提高了应用程序的可维护性和重用性。</p><a id="more"></a><h2 id="发布-订阅模式的作用"><a href="#发布-订阅模式的作用" class="headerlink" title="发布-订阅模式的作用"></a>发布-订阅模式的作用</h2><p>发布-订阅模式可以广泛应用于异步编程之中，这是一种替代传递回调函数的方案。比如，我们可以订阅 ajax 请求的 error、succ 等事件。或者如果想在动画的每一帧完成之后做一些事情，那么我们可以订阅一个事件，然后在动画的每一帧完成之后发布这个事件。在异步编程中使用发布-订阅模式，我们就无需过多关注对象在异步运行期间的内部状态，而只需要订阅感兴趣的事件发生点。</p><p>第二点说明发布-订阅模式可以取代对象之间硬编码的通知机制，一个对象不再显试的调用另外一个对象的某个接口。发布 -订阅模式让两个怼系那个松耦合地联系在一起，虽然不太清楚彼此的细节，但这不影响它们之间相互通信。当有新的订阅者出现时，发布者的代码不需要任何修改；同样发布者需要改变时，也不会影响到之前的订阅者。只要之前约定的事件名没有变化，就可以自由地改变它们。</p><h2 id="DOM-事件"><a href="#DOM-事件" class="headerlink" title="DOM 事件"></a>DOM 事件</h2><p>实际上，只要我们曾经在 DOM 节点上面绑定过事件函数，那我们就曾经使用过发布-订阅模式，来看看如下两句简单代码发生了什么事情：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.click(); <span class="comment">// 模拟用户点击</span></span><br></pre></td></tr></table></figure><p>这里需要监控用户点击 document.body 的动作，但是我们没办法预知用户将在什么时候点击。所以我们订阅 document.body 上面的 click 事件，当 body 节点被点击时，body 节点便会向订阅者发送这个消息。</p><p>我们还可以随意增加或者删除订阅者，增加任何订阅者都不会影响发布者代码的编写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">3</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">4</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.click(); <span class="comment">// 模拟用户点击</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>，手动触发事件更好的做法是 IE 下用 fireEvent，标准浏览器下用 dispatchEvent 实现。</p><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>除了 DOM 事件，我们还会经常实现一些自定义的事件，这种依靠自定义事件完成的发布-订阅模式可以用于任何 JavaScript 代码中。</p><p>现在看看如何一步步实现发布-订阅模式。</p><ul><li>首先要指定好谁充当发布者；</li><li>然后给发布者添加一个缓存列表，用于存放回调函数以便通知订阅者；</li><li>最后发布消息的时候，发布者会遍历这个缓存列表，依次触发里面存放的订阅者回调函数。</li></ul><p>另外，我们还可以往回调函数里填入一些参数，订阅者可以接收这些参数。这是很有必要的，订阅者接收到这些信息之后可以进行各自的处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;; <span class="comment">// 定义售楼处</span></span><br><span class="line"></span><br><span class="line">salesOffices.clientList = []; <span class="comment">// 缓存列表，存放订阅者的回调函数</span></span><br><span class="line"></span><br><span class="line">salesOffices.listen = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 增加订阅者</span></span><br><span class="line">  <span class="built_in">this</span>.clientList.push(fn); <span class="comment">// 订阅的消息添加进缓存列表</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">salesOffices.trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//发布消息</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn; (fn = <span class="built_in">this</span>.clientList[i++]); ) &#123;</span><br><span class="line">    fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>); <span class="comment">// (2) // arguments是发布消息时带上的参数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面进行一些简单测试：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">salesOffices.listen(<span class="function"><span class="keyword">function</span>(<span class="params">price, squareMeter</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 小明订阅消息</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;价格=&quot;</span> + price);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;squareMeter=&quot;</span> + squareMeter);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="function"><span class="keyword">function</span>(<span class="params">price, squareMeter</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 小红订阅消息</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;价格=&quot;</span> + price);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;squareMeter=&quot;</span> + squareMeter);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">salesOffices.trigger(<span class="number">2000000</span>, <span class="number">88</span>);</span><br><span class="line">salesOffices.trigger(<span class="number">3000000</span>, <span class="number">110</span>);</span><br></pre></td></tr></table></figure><p>至此，我们已经实现了一个最简单的发布-订阅模式，但这里还存在一定的问题。我们看到订阅者接收到了发布者的每个消息，虽然小明只想买 88 平的房子，但是发布者把所有的信息都推送给了小明，这对小明来说是不必要的困然。所以我们有必要添加一个标示 key，让订阅者只订阅自己感兴趣的消息。改写后的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;; <span class="comment">// 定义售楼处</span></span><br><span class="line"></span><br><span class="line">salesOffices.clientList = &#123;&#125;; <span class="comment">// 缓存列表，存放订阅者的回调函数</span></span><br><span class="line"></span><br><span class="line">salesOffices.listen = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.clientList[key]) &#123;</span><br><span class="line">    <span class="built_in">this</span>.clientList[key] = []; <span class="comment">// 如果还没有过此类消息，给该类消息创建一个缓存列表</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.clientList[key].push(fn); <span class="comment">// 订阅的消息添加进缓存列表</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">salesOffices.trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//发布消息</span></span><br><span class="line">  <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>), <span class="comment">// 取出消息类型</span></span><br><span class="line">    fns = <span class="built_in">this</span>.clientList[key]; <span class="comment">// 取出该消息对应的回调函数集合</span></span><br><span class="line">  <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果没有订阅该消息，则返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn; (fn = fns[i++]); ) &#123;</span><br><span class="line">    fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>); <span class="comment">// (2) // arguments是发布消息时带上的参数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="string">&quot;squareMeter88&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 小明订阅消息</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;价格=&quot;</span> + price);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="string">&quot;squareMeter110&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 小红订阅消息</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;价格=&quot;</span> + price);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">salesOffices.trigger(<span class="string">&quot;squareMeter88&quot;</span>, <span class="number">2000000</span>);</span><br><span class="line">salesOffices.trigger(<span class="string">&quot;squareMeter110&quot;</span>, <span class="number">2000000</span>);</span><br></pre></td></tr></table></figure><p>很明显，现在订阅者可以只订阅自己感兴趣的事件了。</p><h2 id="发布-订阅模式的通用实现"><a href="#发布-订阅模式的通用实现" class="headerlink" title="发布-订阅模式的通用实现"></a>发布-订阅模式的通用实现</h2><p>现在我们已经看到了如何让售楼处拥有订阅和发布事件的能力。如果现在小明去另一个售楼处买房子，那么这段代码是否必须重写一次呢？？我们要考虑如何实现所有对象都可以拥有发布-订阅功能。</p><p>所以我们把发布-订阅的功能提取出来，放在一个单独的对象内：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = &#123;</span><br><span class="line">  clientList: [],</span><br><span class="line">  listen: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.clientList[key]) &#123;</span><br><span class="line">      <span class="built_in">this</span>.clientList[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.clientList[key].push(fn); <span class="comment">// 订阅的消息添加进缓存列表</span></span><br><span class="line">  &#125;,</span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>), <span class="comment">// (1)</span></span><br><span class="line">      fns = <span class="built_in">this</span>.clientList[key];</span><br><span class="line">    <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> fasle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn; (fn = fns[i++]); ) &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>.arguments); <span class="comment">// (2) // arguments是trigger时带上的参数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再定义一个 installEvent 函数，这个函数可以给所有的对象都动态的安装发布-订阅功能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> installEvent = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> event) &#123;</span><br><span class="line">    obj[i] = event[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再来测试一下，我们来动态添加发布-订阅功能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;;</span><br><span class="line">installEvent(salesOffices);</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="string">&quot;squareMeter88&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 小明订阅消息</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;价格=&quot;</span> + price);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">salesOffices.listen(<span class="string">&quot;squareMeter110&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 小红订阅消息</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;价格=&quot;</span> + price);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">salesOffices.trigger(<span class="string">&quot;squareMeter88&quot;</span>, <span class="number">2000000</span>);</span><br><span class="line">salesOffices.trigger(<span class="string">&quot;squareMeter110&quot;</span>, <span class="number">2000000</span>);</span><br></pre></td></tr></table></figure><h2 id="取消订阅事件"><a href="#取消订阅事件" class="headerlink" title="取消订阅事件"></a>取消订阅事件</h2><p>有时候，我们也许需要取消订阅事件的功能。比如小明突然不想房子了，为了避免继续收到短信，小明需要取消之前的订阅事件。现在我们给 event 对象添加了 remove 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">event.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fns = <span class="built_in">this</span>.clentList[key];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!fns) &#123;</span><br><span class="line">    <span class="comment">// 如果key对应的消息没有被人订阅，则直接返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">    <span class="comment">// 如果没有传入具体的回调函数，表示需要取消key对应消息的所有订阅</span></span><br><span class="line">    fn &amp;&amp; (fns.length = <span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> l = fns.length - <span class="number">1</span>; l &gt;= <span class="number">0</span>; l--) &#123;</span><br><span class="line">      <span class="comment">// 反向遍历订阅的回调函数列表</span></span><br><span class="line">      <span class="keyword">var</span> _fn = fns[l];</span><br><span class="line">      <span class="keyword">if</span> (_fn === fn) &#123;</span><br><span class="line">        fns.splice(l, <span class="number">1</span>); <span class="comment">// 删除订阅者的回调函数</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> installEvent = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> event) &#123;</span><br><span class="line">    obj[i] = event[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">installEvent(salesOffices);</span><br><span class="line"></span><br><span class="line">salesOffices.listen(</span><br><span class="line">  <span class="string">&quot;squareMeter88&quot;</span>,</span><br><span class="line">  (fn1 = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 小明订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;价格=&quot;</span> + price);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">salesOffices.listen(</span><br><span class="line">  <span class="string">&quot;squareMeter110&quot;</span>,</span><br><span class="line">  (fn2 = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 小红订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;价格=&quot;</span> + price);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">salesOffices.remove(<span class="string">&quot;squareMeter88&quot;</span>, fn1); <span class="comment">// 删除小明的订阅</span></span><br><span class="line">salesOffices.trigger(<span class="string">&quot;squareMeter110&quot;</span>, <span class="number">2000000</span>);</span><br></pre></td></tr></table></figure><h2 id="真实的例子-网站登录"><a href="#真实的例子-网站登录" class="headerlink" title="真实的例子 - 网站登录"></a>真实的例子 - 网站登录</h2><p>假设我们现在正在开发一个商城网站，网站里有 header、nav、消息列表、购物车等模块。这几个模块的渲染有一个共同的前提条件，就是必须先用 ajax 异步请求获取用户的登录信息。</p><p>至于 ajax 请求什么时候能成功返回用户信息，这点我们没法确定，这像极了售楼处的例子。但是这点还不足以说服我们使用发布-订阅模式，因为异步的问题通常也可以用回调函数来解决。更重要的一点是，我们不知道除了 header、nav、消息列表和购物车之外，将来还有哪些模块需要用户信息。如果它们和用户信息模块产生了强耦合，比如下面这样的形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">login.succ(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  header.setAvatar(data.avatar); <span class="comment">// 设置header模块的头像</span></span><br><span class="line">  nav.setAvatar(data.avatar); <span class="comment">// 设置导航模块的头像</span></span><br><span class="line">  message.refresh(); <span class="comment">// 刷新消息列表</span></span><br><span class="line">  cart.refresh(); <span class="comment">// 刷新购物车列表</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在登录模块是我们负责编写的，但我们还必须了解 header 模块里面设置头像的方法叫 setAvatar，这种耦合性导致 header 模块不能再随意改变 setAvatar 的方法名，他自身的名字也不能被改为 header1、header2。这是针对具体实现编程的典型例子，针对具体实现编程是不被赞同的。</p><p>等到有一天，项目中要添加一个收货地址管理的模块，这个模块本来是另一个同事写的，但是你此时需要放下手头的事情，打开 3 个月前写的登录模块，在最后部分加上代码。这样我们就会越来越疲于应付这些突如其来的业务要求，要么跳槽了事，要么必须来重构这些代码。</p><p>用发布-订阅模式重写之后，对用户信息感兴趣的业务模块将自行订阅登录成功的消息事件。当登录成功时，登录模块只需要发布登录成功的消息，而业务方接受到消息之后，就会开始进行各自的业务处理，登录模块并不关心业务方究竟要做什么，也不想去了解它们的内部细节。改善后的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(<span class="string">&quot;http://xxx.com?login&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 登录成功</span></span><br><span class="line">  login.trigger(<span class="string">&quot;loginSucc&quot;</span>, data); <span class="comment">// 发布登录成功的消息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>各模块监听登录成功的消息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> header = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  login.listen(<span class="string">&quot;loginSucc&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    header.setAvatar(data.avatar);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setAvatar: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;设置header模块的头像&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nav = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  login.listen(<span class="string">&quot;loginSucc&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    nav.setAvatar(data.avatar);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setAvatar: <span class="function"><span class="keyword">function</span>(<span class="params">avatar</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;设置nav模块的头像&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这样，我们就随时可以把 setAvatar 的方法名改为 setTouxiang。如果有一天登录模块完成后，又要增加一个刷新收货地址的行为，那么只要在收获地址模块上年加上监听消息的方法即可，这可以让开发该模块的同事自行完成。</p><h2 id="全局的发布-订阅对象"><a href="#全局的发布-订阅对象" class="headerlink" title="全局的发布-订阅对象"></a>全局的发布-订阅对象</h2><p>回想一下刚实现的发布-订阅模式，我们给售楼处对象和登录对象都添加了订阅和发布的功能，这里还有两个小问题：</p><ul><li>我们给每个发布者对象都添加了 listen 和 trigger 方法，以及一个缓存列表 clientList，这其实是一种资源浪费。</li><li>小明跟售楼处对象还是存在着一定的耦合性，小明至少要知道售楼处对象的名字是 salesOffices，才能顺利的订阅到事件。</li></ul><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">salesOffices.listen(<span class="string">&quot;squareMeter100&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 小红订阅消息</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;价格=&quot;</span> + price);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果小明还关心 300 平米的房子，而这个卖家是 salesOffices2，那么小明还需要订阅 salesOffices2 的对象。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">salesOffices2.listen(<span class="string">&quot;squareMeter300&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 小红订阅消息</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;价格=&quot;</span> + price);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现实中，买房子为必要自己亲自去售楼处，我们只需要把信息提交给中介公司即可，房产公司也只需要通过中介公司来发布房子信息。这样一来我们不需要关心消息来源于哪个房产公司，我们在意的是能否顺利的收到房屋提示的消息。当然为了保证发布和订阅的顺利通信，订阅者和发布者都需要知道这个中介公司。</p><p>同样在程序中，发布-订阅模式可以用一个全局的 Event 对象来实现，订阅者不需要了解消息来自哪个发布者，发布者也不知道消息会推送给哪些订阅者，Event 作为一个类似“中介者”的角色，把订阅者和发布者联系起来。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clientList = &#123;&#125;,</span><br><span class="line">    listen,</span><br><span class="line">    trigger,</span><br><span class="line">    remove;</span><br><span class="line">  listen = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!clientList[key]) &#123;</span><br><span class="line">      clientList[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    clientList[key].push(fn);</span><br><span class="line">  &#125;;</span><br><span class="line">  trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>),</span><br><span class="line">      fns = clientList[key];</span><br><span class="line">    <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn; (fn = fns[i++]); ) &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>.arguments);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  remove = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fns = clientList[key];</span><br><span class="line">    <span class="keyword">if</span> (!fns) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">      fns &amp;&amp; (fns.length = <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> l = fns.length - <span class="number">1</span>; l &gt;= <span class="number">0</span>; l--) &#123;</span><br><span class="line">        <span class="keyword">var</span> _fn = fns[l];</span><br><span class="line">        <span class="keyword">if</span> (_fn === fn) &#123;</span><br><span class="line">          fns.splice(l, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    listen: listen,</span><br><span class="line">    trigger: trigger,</span><br><span class="line">    remove: remove</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">Event.listen(<span class="string">&quot;squareMeter88&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;价格=&quot;</span> + price); <span class="comment">// 输出：价格=2000000</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Event.trigger(<span class="string">&quot;squareMeter88&quot;</span>, <span class="number">2000000</span>);</span><br></pre></td></tr></table></figure><h2 id="模块间的通信"><a href="#模块间的通信" class="headerlink" title="模块间的通信"></a>模块间的通信</h2><p>上一节中实现的发布-订阅模式的实现，是基于一个全局的 Event 对象，我们利用它可以在两个封装良好的模块中进行通信，这两个模块可以完全不知道对方的存在。比如现在有两个模块，a 模块中又一个按钮，每次点击后，b 模块里的 div 会显示按钮点击的总数，我们利用全局发布-订阅模式完成下面的代码，使得 a 模块和 b 模块可以在保持封装性的前提下进行通信。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&quot;count&quot;</span>);</span></span><br><span class="line"><span class="javascript">      button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        Event.trigger(<span class="string">&quot;add&quot;</span>, count++);</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> b = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;show&quot;</span>);</span></span><br><span class="line"><span class="javascript">      Event.listen(<span class="string">&quot;add&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">count</span>) </span>&#123;</span></span><br><span class="line">        div.innerHTML = count;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)();</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们要留意另一个问题，模块之间如果用了太多的全局发布-订阅模式来通信，那么模块与模块之间的联系就会被隐藏到了背后。我们最终会搞不清楚消息来自哪个模块，或者消息会流向哪些模块，这又会给我们的维护带来一些麻烦，也许某个模块的作用就是暴露一些接口给其他模块调用。</p><h2 id="必须先订阅再发布吗"><a href="#必须先订阅再发布吗" class="headerlink" title="必须先订阅再发布吗"></a>必须先订阅再发布吗</h2><p>以上我们所了解的发布-订阅模式，都是订阅者必须先订阅一个消息，随后才能接收到发布者发布的消息。如果把顺序反过来，发布者先发布一条消息，而在此之前并没有对象来订阅它，这条消息无疑会丢失。</p><p>在某些情况下我们必须先把这条消息保存下来，等到有对象来订阅它的时候，再重新把消息发布给订阅者。就如同 QQ 的离线消息一样，离线消息被保存在服务器中，接收人下次登录上线之后，可以重新收到这条消息。</p><p>这种需求再实际项目中是存在的，比如之前的商城网站中，获取用户信息之后才能渲染用户导航模块，而获取用户信息操作是一个 ajax 异步请求。当 ajax 请求成功返回之后会发布一个事件，在此之前订阅了此事件的用户导航模块可以接收到这些用户信息。</p><p>但这指示理想状态，因为异步的原因，我们不能保证 ajax 请求返回的时间，有时候它返回得比较快，而此时用户导航模块的代码还没有加载好（还没有订阅相应事件），特别是在用了一些模块化惰性加载的技术后，这是很可能发生的事情。也许我们还需要一个方案，使得我们的发布-订阅对象拥有先发布后订阅的能力。</p><p>为了满足这个需求，我们要建立一个存放离线事件的堆栈，当事件发布的时候，如果此时还没有订阅者来订阅这个事件，我们暂时把发布事件的动作包裹在一个函数里，这些包装函数将被存入堆栈中，等到终于有对象来订阅此事件的时候，我们将遍历堆栈并一次执行这些包装函数，也就是重新发布里面的事件。当然离线事件的生命周期只有一次，就像 QQ 的未读消息只会被重新阅读一次，所以刚才的操作我们只能进行一次。</p><h2 id="全局事件的命名冲突"><a href="#全局事件的命名冲突" class="headerlink" title="全局事件的命名冲突"></a>全局事件的命名冲突</h2><p>全局的发布-订阅对象里只有一个 clinetList 来存放消息名和回调函数，大家都通过它来订阅和发布各种消息，久而久之，难免会出现事件名冲突的情况，所以我们还可以给 Event 对象提供创建命名空间的功能。</p><p>在提供最终代码之前，我们来感受一下这么使用这两个新增的功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********** 先发布后订阅 **********/</span></span><br><span class="line">Event.trigger(<span class="string">&quot;click&quot;</span>, <span class="number">1</span>);</span><br><span class="line">Event.listen(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/********** 使用命名空间 **********/</span></span><br><span class="line">Event.create(<span class="string">&quot;namespace1&quot;</span>).listen(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;);</span><br><span class="line">Event.create(<span class="string">&quot;namespace1&quot;</span>).trigger(<span class="string">&quot;click&quot;</span>, <span class="number">1</span>);</span><br><span class="line">Event.create(<span class="string">&quot;namespace2&quot;</span>).listen(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;);</span><br><span class="line">Event.create(<span class="string">&quot;namespace2&quot;</span>).trigger(<span class="string">&quot;click&quot;</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="JavaScript-实现发布-订阅模式的便利性"><a href="#JavaScript-实现发布-订阅模式的便利性" class="headerlink" title="JavaScript 实现发布-订阅模式的便利性"></a>JavaScript 实现发布-订阅模式的便利性</h2><p>这里要提出的是，我们一直讨论的发布-订阅模式，跟一些别的语言（比如 Java）中的实现还是有区别的。在 Java 中实现一个自己的发布-订阅模式，通常会把订阅者对象自身当成引用传入发布者对象时，同时订阅者对象还需提供一个名为诸如 update 的方法，供发布者对象在适合的时候调用。而在 JavaScript 中，我们用注册回调函数的形式来代替传统的发布-订阅模式，显得更加优雅和简单。</p><p>另外，在 JavaScript 中，我们无需去选择使用推模型还是拉模型。<strong>推模型</strong>是指在事件发生时，发布者一次性把所有更改的状态和数据都推送给订阅者。<strong>拉模型</strong>不同的地方在于，发布者仅仅通知订阅者时间已经发生了，此外发布者需要提供一些公开的接口供订阅者来主动拉取数据。拉模型的好处是可以让订阅者“按需获取”，但同时有可能让发布者变成一个“门户大开”的对象，同时增加了代码量和复杂度。</p><p>刚好在 JS 中，arguments 可以很方便的表示参数列表，所以我们一般都会选择推模型，使用 Function.prototype.apply 方法把所有参数都推送给订阅者。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>发布-订阅模式（观察者模式）在实际开发中非常有用。</p><p>其优点非常明显：</p><ul><li>时间上的解耦</li><li>对象之间的解耦</li></ul><p>应用非常广泛，既可以用在异步编程中，也可以帮助我们完成更松耦合的代码编写。发布-订阅模式还可以用来帮助实现一些别的设计模式，比如中介者模式。从架构上来看，无论是 MVC 还是 MVVM，都少不了发布-订阅模式的参与，而且 JS 本身也是一门基于事件驱动的语言。</p><p>当然，发布-订阅模式也不是完全没有缺点。创建订阅者本身要消耗一定的时间和内存，而且你订阅一个消息后，也许此消息最后都未发生，但这个订阅者会始终存在于内存中。另外，发布-订阅模式虽然可以弱化对象之间的联系，但如果过度使用的话，对象和对象之间的必要联系也将被深埋在背后，会导致程序难以跟踪维护和理解。特别是有多个发布者和订阅者嵌套到一起的时候，要跟踪一个 BUG 不是一件轻松的事情。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式-单一职责原则</title>
      <link href="/posts/e90fd04d/"/>
      <url>/posts/e90fd04d/</url>
      
        <content type="html"><![CDATA[<p style="font-size:20px;font-weight:800;">单一职责原则(SRP)</p><blockquote><p><strong>就一个类而言，应该仅有一个引起它变化的原因。</strong></p></blockquote><p>单一职责原则的职责被定义为“引起变化的原因”。如果我们有两个动机去改写一个方法，那么这个方法就有了两个职责。每一个职责都是变化的一个轴线，如果一个方法承担了过多的职责，那么在需求的变迁过程中，需要改写这个方法的可能性就越大。特别是当两个职责耦合在一起的时候，一个职责发生变化可能会影响到其他职责的实现，造成意想不到的破坏。这种耦合性得到的是低内聚和脆弱的设计。</p><p>因此 SRP 原则体现为：一个对象（方法）只做一件事情。</p><a id="more"></a><h2 id="设计模式中的-SRP-原则"><a href="#设计模式中的-SRP-原则" class="headerlink" title="设计模式中的 SRP 原则"></a>设计模式中的 SRP 原则</h2><p>SRP 原则在很多设计模式中都有着广泛的运用，例如代理模式、迭代器模式、单例模式和装饰者模式。</p><p>其中每个方法都应该只对应着一个职责。</p><h2 id="何时应该分离职责"><a href="#何时应该分离职责" class="headerlink" title="何时应该分离职责"></a>何时应该分离职责</h2><p>SRP 原则是所有原则中最简单也是最难正确运用的原则之一。</p><p>要明确的是，并不是所有的职责都应该一一分离。</p><p>一方面，如果随着需求的变化，有两个职责总是同时变化，那么就不必分离他们。比如在 ajax 请求的时候，创建 xhr 对象和发送 xhr 请求几乎总是在一起，那么创建 xhr 对象的职责和发送 xhr 请求的职责就没必要分开。</p><p>另一方面，职责的变化轴线仅当它们确定会发生变化时才有意义，即使两个职责已经被耦合在一起，但它们还没有发生改变的征兆，那么也许没有必要主动分离它们，在代码需要重构的时候再分离也不迟。</p><h2 id="违反-SRP-原则"><a href="#违反-SRP-原则" class="headerlink" title="违反 SRP 原则"></a>违反 SRP 原则</h2><p>在人的常规思维中，总是习惯性地把一组相关的行为放到一起，如何正确地分离职责不是一件容易的事情。</p><p>一方面，我们受设计原则的指导，另一方面，我们未必要在任何时候都一成不变的遵守原则。在实际开发中，因为种种原因违反 SRP 的情况并不少见。比如 jQuery 的 attr 等方法，就是明显违反 SRP 原则的做法。jQuery 的 attr 是一个非常庞大的方法，既负责赋值，又负责取值，这对于 jQuery 的维护者来说，会带来一些困难，但对于 jQuery 的用户来说，却简化了用户的使用。</p><p>在方便性和稳定性之间要有一些取舍。具体是选择方便性还是稳定性，没有标准答案，而是要取决于具体的应用环境。</p><h2 id="SRP-原则的优缺点"><a href="#SRP-原则的优缺点" class="headerlink" title="SRP 原则的优缺点"></a>SRP 原则的优缺点</h2><p>SRP 原则的优点是见底了单个类或者对象的复杂度，按照职责把对象分解成更小的粒度，这有助于代码的复用，也有利于进行单元测试。当一个职责需要变更的时候，不会影响到其他的职责。</p><p>但 SRP 原则也有一些缺点，最明显的是会增加编写代码的复杂度。当我们按照职责把对象分解成更小的粒度之后，实际上也增大了这些对象之间相互联系的难度。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式-适配器模式</title>
      <link href="/posts/9703bc63/"/>
      <url>/posts/9703bc63/</url>
      
        <content type="html"><![CDATA[<p style="font-size:20px;font-weight:800;">适配器模式(Adapter)</p><blockquote><p><strong>提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</strong></p></blockquote><p>适配器模式的作用是解决两个软件实体间的接口不兼容问题。使用适配器模式之后，原本由于接口不兼容而不能工作的两个软件实体可以一起工作。</p><p>适配器的别名是包装器(wrapper)，这是一个相对简单的模式。在程序开发中有许多这样的场景：当我们试图调用模块或者对象的某个接口时，却发现这个接口的格式并不符合目前的需求。<a id="more"></a>这时候有两种解决办法，第一种是修改原来的接口实现，但如果原来的模块很复杂，或者我们拿到的模块是一段别人编写的经过压缩的代码，修改原接口就显得不太现实了。第二种办法是创建一个适配器，将原接口转换为客户希望的另一个接口，客户只需要和适配器打交道。</p><h2 id="适配器模式的应用"><a href="#适配器模式的应用" class="headerlink" title="适配器模式的应用"></a>适配器模式的应用</h2><p>如果现有的接口已经能够正常工作，那我们就永远不会用上适配器模式。适配器模式是一种“亡羊补牢”的模式，没有人会在程序的设计之初就使用它。因为没有人可以完全预料到未来的事情，也许现在好好工作的接口，未来某天却不再适用于新系统，那么我们可以用适配器模式把旧接口包装成一个新的接口，使它继续保持生命力。比如在 JSON 格式流行之前，很多 cgi 返回的都是 XML 格式的数据，如果今天仍然想用这些接口，显然我们可以创造一个 XML-JSON 的适配器。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>适配器模式是一种相对简单的模式。还有一些设计模式与之相似，如：装饰者模式、代理模式和外观模式。这几种模式都属于“包装模式”，都是由一个对象来包装另一个对象。区别它们的关键仍然是模式的意图。</p><ul><li>适配器模式主要用来解决两个已有接口之间不匹配的问题，它不考虑这些接口是怎样实现的，也不考虑它们将来会如何演化。适配器模式不需要改变已有的接口，就能够使他们协同作用。</li><li>装饰者模式和代理模式也不会改变原有对象的接口，但装饰者模式的作用是为了给对象增加功能。装饰者模式常常形成一条长的装饰链，而适配器模式通常只包装一次。代理模式是为了控制对对象的访问，通常也只包装一次。</li><li>外观模式的作用倒是和适配器比较相似，有人把外观模式看成一组对象的适配器，但外观模式最显著的特点是定义了一个新的接口。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式-迭代器模式</title>
      <link href="/posts/3495e34/"/>
      <url>/posts/3495e34/</url>
      
        <content type="html"><![CDATA[<p style="font-size:20px;font-weight:800;">迭代器模式(Iterator)</p><blockquote><p><strong>提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</strong></p></blockquote><p>迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按照顺序访问其中的每个元素。</p><p>目前，几乎所有流行的语言如 Java、Ruby 等都已经有了内置迭代器的实现，许多浏览器也支持 JavaScript 的 Array.prototype.forEach。</p><a id="more"></a><h2 id="jQuery-中的迭代器"><a href="#jQuery-中的迭代器" class="headerlink" title="jQuery 中的迭代器"></a>jQuery 中的迭代器</h2><p>迭代器模式无非就是循环访问聚合对象中的各个元素。比如 jQuery 中的$.each 函数，其中回调函数职工的参数 i 为当前索引，n 为当前元素，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;当前下标为: &quot;</span> + i);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;当前值为: &quot;</span> + n);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="实现自己的迭代器"><a href="#实现自己的迭代器" class="headerlink" title="实现自己的迭代器"></a>实现自己的迭代器</h2><p>现在我们来自己实现一个 each 函数，each 函数接受两个参数，第一个为被循环的数组，第二个为循环中的每一步后将被触发的回调函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span>(<span class="params">ary, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = ary.length; i &lt; l; i++) &#123;</span><br><span class="line">    callback.call(ary[i], i, ary[i]); <span class="comment">// 把下标和元素当作参数传给callback函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">  alert([i, n]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="内部迭代器和外部迭代器"><a href="#内部迭代器和外部迭代器" class="headerlink" title="内部迭代器和外部迭代器"></a>内部迭代器和外部迭代器</h2><p>迭代器可以分为内部迭代器和外部迭代器，它们有各自的适用场景。</p><h3 id="内部迭代器"><a href="#内部迭代器" class="headerlink" title="内部迭代器"></a>内部迭代器</h3><p>刚编写过的 each 属于内部迭代器，each 内部已经定义好了迭代规则，它完全接手整个迭代过程，外部只需要一次初始调用。</p><p>内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。由于内部迭代器的迭代规则已经被提前规定好，上面的 each 函数就无法同时迭代 2 个数组了。</p><p>比如现在有个需求，要判断 2 个数组里元素的值是否完全相等，如果不改写 each 函数本身的代码，我们能够入手的地方似乎只剩下 each 的回调函数了，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span>(<span class="params">ary1, ary2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ary1.length !== ary2.length) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;ary1和ary2不相等&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  each(ary1, <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n !== ary2[i]) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;ary1和ary2不相等&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  alert(<span class="string">&quot;ary1和ary2相等&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">compare([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]); <span class="comment">// throw new Error(&quot;ary1和ary2不相等&quot;);</span></span><br></pre></td></tr></table></figure><p>感谢 JavaScript 里可以把函数当作参数传递的特性，但是在其他语言中未必就能如此幸运。</p><p>在一些没有闭包的语言中，内部迭代器本身的实现也相当复杂。比如 C 语言中的内部迭代器是用函数指针来实现的，循环处理所需要的数据都要以参数的形式明确地从外面传递进去。</p><h3 id="外部迭代器"><a href="#外部迭代器" class="headerlink" title="外部迭代器"></a>外部迭代器</h3><p>外部迭代器必须显式地请求迭代下一个元素。</p><p>外部迭代器增加了一些调用的复杂度，但相对也增加了迭代器的灵活性，我们可以手工控制迭代的过程或者顺序。</p><p>下面代码来源于《松本行弘的程序世界》，原文是 Ruby，翻译为 JavaScript。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Iterator = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> current = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    current += <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> isDone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> current &gt;= obj.length;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> getCurrItem = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[current];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next: next,</span><br><span class="line">    isDone: isDone,</span><br><span class="line">    getCurrItem: getCurrItem</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看看如何改写 compare 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span>(<span class="params">iterator1, iterator2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (!iterator1.isDone() &amp;&amp; !iterator2.isDone()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (iterator1.getCurrItem() !== iterator2.getCurrItem()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;iterator1和iterator2不相等&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    iterator1.next();</span><br><span class="line">    iterator2.next();</span><br><span class="line">  &#125;</span><br><span class="line">  alert(<span class="string">&quot;iterator1和iterator2相等&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator1 = Iterator([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> iterator2 = Iterator([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">compare(iterator1, iterator2); <span class="comment">// 输入：iterator1和iterator2相等</span></span><br></pre></td></tr></table></figure><p>外部迭代器虽然调用方式相对复杂，但它的适用面更广，也能满足更多变的需求。内部迭代器和外部迭代器在实际生产中没有优劣之分，使用哪个需要视情况而定。</p><h2 id="迭代类数组对象和字面量对象"><a href="#迭代类数组对象和字面量对象" class="headerlink" title="迭代类数组对象和字面量对象"></a>迭代类数组对象和字面量对象</h2><p>迭代器模式不仅可以迭代数组，还可以迭代一些类数组的对象。比如 arguments、{“0”:’a’,”1”:’b’}等。通过上面的编码可以观察到，无论是内部迭代器还是外部迭代器，只要被迭代的聚合对象拥有 length 属性而且可以用下标访问，那它就可以被迭代。</p><p>在 JavaScript 中，for in 语句可以用来迭代普通字面量对象的属性。jQuery 中提供了$.each 函数来封装各种迭代行为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$.each = <span class="function"><span class="keyword">function</span>(<span class="params">obj, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    length = obj.length,</span><br><span class="line">    isArray = isArraylike(obj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isArray) &#123;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">      vallue = callback.call(obj[i], i, obj[i]);</span><br><span class="line">      <span class="keyword">if</span> (value === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      value = callback.call(obj[i], i, obj[i]);</span><br><span class="line">      <span class="keyword">if</span> (value === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="倒序迭代器"><a href="#倒序迭代器" class="headerlink" title="倒序迭代器"></a>倒序迭代器</h2><p>由于 GoF 中对迭代器模式的定义非常松散，所以我们可以有多种多样的迭代器实现。总的来说，迭代器模式提供了循环访问一个聚合对象中每个元素的方法，但它没有规定我们可以顺序，倒序还是中序来循环遍历聚合对象。</p><p>下面实现一个倒序访问的迭代器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseEach = <span class="function"><span class="keyword">function</span>(<span class="params">ary, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> l = ary.length - <span class="number">1</span>; l &gt;= <span class="number">0</span>; l--) &#123;</span><br><span class="line">    callback(l, ary[l]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">reverseEach([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(n); <span class="comment">// 分别输出：2,1,0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="中止迭代器"><a href="#中止迭代器" class="headerlink" title="中止迭代器"></a>中止迭代器</h2><p>迭代器可以像普通的 for 循环中的 break 一样，提供一种跳出循环的方法。下面修改之前的 each 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span>(<span class="params">ary, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = ary.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (callback(i, ary[i]) === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(n); <span class="comment">// 分别输出：1,2,3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="迭代器模式的应用举例"><a href="#迭代器模式的应用举例" class="headerlink" title="迭代器模式的应用举例"></a>迭代器模式的应用举例</h2><p>如下代码，目的是根据不同的浏览器获取相应的上传组件对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;TXFTNActiveX.FTNUpload&quot;</span>); <span class="comment">// IE上传控件</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (supportFlash()) &#123;</span><br><span class="line">      <span class="keyword">var</span> str = <span class="string">&#x27;&lt;object type=&quot;application/x-shockwave-falsh&quot;&gt;&lt;/object&gt;&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> $(str).appendTo($(<span class="string">&quot;body&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> str = <span class="string">&#x27;&lt;input name=&quot;file&quot; type=&quot;file&quot;/&gt;&#x27;</span>; <span class="comment">// 表单上传</span></span><br><span class="line">      <span class="keyword">return</span> $(str).appendTo($(<span class="string">&quot;body&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在不同的浏览器环境下，选择的上传方式是不一样的。因为使用浏览器的上传控件进行上传速度快，可以暂停和续传，所以我们首先会优先使用控件上传。如果浏览器没有安装上传控件，则使用 Flash 上传，如果连 Flash 也没用，则使用原生表单上传。</p><p>以上代码为了得到一个 upload 对象，这个 getUploadObj 函数里充满了 try，catch 和 if 条件语句。缺点显而易见。第一是很难阅读，第二是严重违反开闭原则。在开发和调试过程中，我们需要来回切换不同的上传方式，每次改动都相当痛苦。如果之后我们要增加一些其他的上传方式，比如 HTML5 上传，这时候唯一的办法就是继续往 getUploadObj 函数里增加条件分支。</p><p>此时我们就可以使用迭代器来迭代这些上传方式，直到获取到一个可用的为止：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getActiveUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;TXFTNActiveX.FTNUpload&quot;</span>); <span class="comment">// IE上传控件</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFlashUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (supportFlash()) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&lt;object type=&quot;application/x-shockwave-falsh&quot;&gt;&lt;/object&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> $(str).appendTo($(<span class="string">&quot;body&quot;</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFormUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&#x27;&lt;input name=&quot;file&quot; type=&quot;file&quot;/&gt;&#x27;</span>; <span class="comment">// 表单上传</span></span><br><span class="line">  <span class="keyword">return</span> $(str).appendTo($(<span class="string">&quot;body&quot;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 getActiveUploadObj()、getFlashUploadObj()、getFormUploadObj() 这 3 个函数中都有同一个约定：如果函数的 upload 对象可用，则返回对象，否则返回 false，提示继续向后迭代。</p><p>所以我们的迭代器只需要一下几步工作：</p><ul><li>提供一个可以被迭代的方法，使得 getActiveUploadObj()、getFlashUploadObj()、getFormUploadObj()按照优先级被循环迭代。</li><li>如果正在被迭代的对象返回了一个对象，说明找到了正确的 upload 对象，反之如果返回 false，则继续迭代。</li></ul><p>迭代器代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iteratorUploadObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn; (fn = <span class="built_in">arguments</span>[i++]); ) &#123;</span><br><span class="line">    <span class="keyword">var</span> uploadObj = fn();</span><br><span class="line">    <span class="keyword">if</span> (uploadObj !== <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> uploadObj;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploadObj = iteratorUploadObj(</span><br><span class="line">  getActiveUploadObj,</span><br><span class="line">  getFlashUploadObj,</span><br><span class="line">  getFormUploadObj</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>重构之后，我们可以看到，获取不同上传对象的方法被隔离在各自的函数中互不干扰，try、catch 和 if 分支不再纠缠在一起，使得我们可以很方便的维护和扩展代码。比如我们添加了 HTML5 上传方式。我们要做的仅仅是一下工作：</p><ul><li>增加 HTML5 上传对象的函数；</li><li>按照优先级添加到迭代器中。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>迭代器模式是一种相对简单的模式，简单到我们很多人都不认为它是一种设计模式。目前绝大部分语言都内置了迭代器。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《许三观卖血记》读后感</title>
      <link href="/posts/dd0ab196/"/>
      <url>/posts/dd0ab196/</url>
      
        <content type="html"><![CDATA[<p>一盘炒猪肝，二两黄酒，黄酒给我温一温。</p><p style="text-align: right">—— 余华《许三观卖血记》</p><p>出差几天，工作起来也是没日没夜，身心俱疲也心神不宁，忽然觉得生活没了意思。没有人关心，也没有人爱。没那么高大的目标，也不知道未来在何方。</p><p>正巧在书店看到《许三观卖血记》，早就听别人说《许三观卖血记》中的活着要比《活着》更现实。便特意的读了一读，看了一看，再写上一写。</p><a id="more"></a><p>书，没有一口气读完，大概读了 2 个多小时，中途 4 次抬头长叹，1 次瘫在椅子里望天花板。满脑子都是：生活，为什么就对我们这些没有爪牙的小羊羔下手了呢？？？</p><p>顾名思义，这本书讲的是一个叫许三观的人，卖血的故事。我们就来看看这个人怎么卖的血，又为什么要卖血？</p><p>第一幕</p><blockquote><p>许三观是城里丝厂的送茧工，这一天他回到村里来看望他的爷爷。他爷爷年老以后眼睛昏花，看不见许三观在门口的脸，就把他叫到面前，看了一会后问他：“我儿，你的脸在哪里？”<br>许三观说：“爷爷，我不是你儿，我是你孙子，我的脸在这里……”<br>许三观把他爷爷的手拿过来，往自己脸上碰了碰，又马上把爷爷的手送了回去。爷爷的手掌就像他们工厂的砂纸。<br>…<br>他爷爷继续说：“我儿，你也常去卖血？”<br>许三观摇摇头：“没有，我从来不卖血。”<br>“我儿……”爷爷说，“你没有卖血，你还说身子骨结实？我儿，你是在骗我。”<br>“爷爷，你在说些什么？我听不懂，爷爷，你是不是老糊涂了？”<br>…<br>许三观的四叔说：“桂花下个月就要出嫁了吧？”<br>…<br>年长的女人压低声音说：“那男的身体败掉了，吃饭只能吃这么一碗，我们桂花都能吃两碗……”<br>许三观的叔叔也压低了声音问：“他身体怎么败的？”<br>“不知道是怎么败的……”年长的女人说，“我先是听人说，说他快有一年没去城里医院卖血了，我心里就打起了锣鼓，想着他的身体是不是不行了，就托人把他请到家里来吃饭，看他能吃多少，他要是吃两大碗，我就会放心些，他要是吃了三碗，桂花就是他的人了……他吃完了一碗，我要去给他添饭，他说吃饱了，吃不下去了……一个粗粗壮壮的男人，吃不下饭，身体肯定是败掉了……”<br>许三观的四叔听完以后点起了头，对年长的女人说：<br>“你这做妈的心细。”<br>年长的女人说：“做妈的心都细。”</p></blockquote><p>村里人认为只有卖了血，身子骨才结实。</p><p>从这时候，许三观就对卖血产生了好奇，在遇到阿方和根龙的时候，他因为好奇和他们一同去买了第一次血，收获了一笔钱，人生第一次卖血吃了甜头，在他往后的人生中，一次次迫于生计靠卖血度过难关。在穷困的旧中国，生活在社会底层的大部分人只能解决自己的温饱，当生活突如其来的遭遇，把他们逼到悬崖边上的时候，许三观们想到的只有“卖血”，也只能去“卖血”，生活和生命就这样奇妙又残酷地交织在一起，精神上的折磨、身体上的摧残，残酷一次比一次剧烈。</p><p>那句“一盘炒猪肝，二两黄酒，黄酒给我温一温。”许三观从结巴说到了老练，从年轻说到了苍老。</p><p>许三观的一生一共卖了十一次血：</p><ul><li>第一次卖血，看别人卖，他便也卖了，但是他知道卖血的钱贵重，用这钱娶了许玉兰；</li><li>第二次卖血，一乐闯祸砸破了方铁匠孩子的头，许三观本想置身事外不管不顾，却最终还是卖了血；</li><li>第三次卖血，和林芬芳一夜情之后，好像自己抚平了自己心中的那些风言风语带来的不快，恰巧遇到了阿方和根龙，便又去卖了血，琢磨这些钱要自己花；</li><li>第四次，在饥荒来临，一家人扛不住了，卖血给家人换饭钱；</li><li>第五次是，一乐下乡走时给孩子的生活费；</li><li>第六次是为了让儿子二乐回城请队长吃饭；第七次是给儿子一乐治病并且买了若干回差点把命没了；</li><li>第八次是单纯地想要吃一盘炒猪肝喝二两黄酒。</li></ul><p>只有最后一次卖血，是年老之时，想要下馆子吃一盘炒猪肝喝二两黄酒，其余的时候大都是为了这个家。许三观是个什么样的人呢？在那个年代也是个不折不扣的小人物，命苦、思想狭隘，有着自己的小聪明，也心地善良。这样的小人物，却因为不屈不挠的意志在绝境中脱颖而出。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 许三观卖血记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python书籍借阅系统</title>
      <link href="/posts/ee5e73e7/"/>
      <url>/posts/ee5e73e7/</url>
      
        <content type="html"><![CDATA[<p>持续一周的出差在今天结束了，忙忙碌碌的工作，零零散散的时间，出差前我留了个小练习给实验室小朋友，自己当然也要完成一下，出差第二天我就写完了这个系统，一直没时间整理，今天上飞机前抽点时间写一写。</p><p>前几个月给实验室买了几本书，本来说用 LabVIEW 写个实验室书籍借阅系统来着，但是一是懒、二也是懒，一直拖着没做，正好赶着这个机会，用 Python 弄个出来。GUI 界面我就不弄了，时间太紧迫，也不立 Flag 说之后完善什么的，等回去再用 LabVIEW 弄一个吧。</p><a id="more"></a><p>今天正式回来上班了，把之前没弄完的整理完吧。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>首先我要对自己的需求进行分析。</p><ol><li>书籍数据需要存储下来（文本格式即可）</li><li>可以增加新书籍，删除旧书籍</li><li>可以借阅书籍，归还书籍</li><li>可以查阅书籍信息，列出所有书籍</li><li>借阅时候记录下借阅人姓名，借阅时间，方便管理员查询</li><li>设定用户账户和管理员账户，权限分开</li><li>用户账号可以借阅&amp;归还&amp;查询，管理员账号可以额外对书籍信息进行修改</li></ol><p>需求我列出来了，归根结底无非最基础的 CURD(create,update,retrieve,delete)，所以我建立了三个 py 文件，一个是 main.py 用于放最上层的交互逻辑，然后是中间层 func.py 用户放功能函数，以及最底层的 file.py 用于封装文件操作。</p><h2 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h2><p>在 main.py 中我们定义的函数有如下几个：</p><ul><li>main 函数 —— 系统主函数</li><li>register 函数 —— 用户注册函数</li><li>login 函数 —— 用户登录函数</li><li>admin 函数 —— 管理员登录函数</li><li>CURD 函数 —— 增删改查</li></ul><p>main.py 主要用于最顶层和用户交互的逻辑，如用户登录、用户注册、管理员登录等等，再将具体的功能封装再下一层中。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line"><span class="comment"># mock数据</span></span><br><span class="line"><span class="comment"># 书籍格式 [书名, 作者]</span></span><br><span class="line"><span class="comment"># 用户格式 [用户名, 密码]</span></span><br><span class="line"><span class="comment"># books = [[&#x27;1&#x27;, &#x27;1&#x27;], [&#x27;2&#x27;, &#x27;2&#x27;], [&#x27;3&#x27;, &#x27;3&#x27;]]</span></span><br><span class="line"><span class="comment"># # users = [[&#x27;user1&#x27;, &#x27;psw1&#x27;], [&#x27;user2&#x27;, &#x27;psw2&#x27;]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增删改查</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CURD</span>(<span class="params">user, username</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="string">&#x27;admin&#x27;</span>):</span><br><span class="line">            print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;-------------------------------&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 增加书籍 --- 1 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 删除书籍 --- 2 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 查询书籍 --- 3 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 查看所有 --- 4 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 修改信息 --- 5 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 查看用户 --- 6 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 添加用户 --- 7 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 删除用户 --- 8 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 返回菜单 --- 9 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 退出系统 --- 0 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;-------------------------------&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                iNum = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请您输入操作对应的数字并按下回车键：&#x27;</span>))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">&#x27;------- 请您输入对应的数字 -------&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> iNum == <span class="number">1</span>:</span><br><span class="line">                    func.create()</span><br><span class="line">                <span class="keyword">elif</span> iNum == <span class="number">2</span>:</span><br><span class="line">                    func.delete()</span><br><span class="line">                <span class="keyword">elif</span> iNum == <span class="number">3</span>:</span><br><span class="line">                    func.retrieve()</span><br><span class="line">                <span class="keyword">elif</span> iNum == <span class="number">4</span>:</span><br><span class="line">                    func.showAll()</span><br><span class="line">                <span class="keyword">elif</span> iNum == <span class="number">5</span>:</span><br><span class="line">                    func.update()</span><br><span class="line">                <span class="keyword">elif</span> iNum == <span class="number">6</span>:</span><br><span class="line">                    func.showAllUser()</span><br><span class="line">                <span class="keyword">elif</span> iNum == <span class="number">7</span>:</span><br><span class="line">                    register()</span><br><span class="line">                <span class="keyword">elif</span> iNum == <span class="number">8</span>:</span><br><span class="line">                    func.deleteUser()</span><br><span class="line">                <span class="keyword">elif</span> iNum == <span class="number">9</span>:</span><br><span class="line">                    main()</span><br><span class="line">                <span class="keyword">elif</span> iNum == <span class="number">0</span>:</span><br><span class="line">                    os._exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> (user == <span class="string">&#x27;user&#x27;</span>):</span><br><span class="line">            print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;-------------------------------&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 归还书籍 --- 1 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 借阅书籍 --- 2 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 查询书籍 --- 3 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 查看所有 --- 4 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 返回菜单 --- 9 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;******** 退出系统 --- 0 ********&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;-------------------------------&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                iNum = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请您输入操作对应的数字并按下回车键：&#x27;</span>))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">&#x27;------- 请您输入对应的数字 -------&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> iNum == <span class="number">1</span>:</span><br><span class="line">                    func.giveBack()</span><br><span class="line">                <span class="keyword">elif</span> iNum == <span class="number">2</span>:</span><br><span class="line">                    func.borrowBook(username)</span><br><span class="line">                <span class="keyword">elif</span> iNum == <span class="number">3</span>:</span><br><span class="line">                    func.retrieve()</span><br><span class="line">                <span class="keyword">elif</span> iNum == <span class="number">4</span>:</span><br><span class="line">                    func.showAll()</span><br><span class="line">                <span class="keyword">elif</span> iNum == <span class="number">5</span>:</span><br><span class="line">                    func.update()</span><br><span class="line">                <span class="keyword">elif</span> iNum == <span class="number">9</span>:</span><br><span class="line">                    main()</span><br><span class="line">                <span class="keyword">elif</span> iNum == <span class="number">0</span>:</span><br><span class="line">                    os._exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;CURD---error&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    users = func.findUsers()</span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;----------- 用户登录 -----------&#x27;</span>)</span><br><span class="line">    data = func.inputData(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">in</span> users:</span><br><span class="line">        print(<span class="string">&#x27;----------- 登录成功 -----------&#x27;</span>)</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        CURD(<span class="string">&#x27;user&#x27;</span>, data[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;----------- 登录失败 -----------&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;---- 用户名不存在 或 密码错误 ----&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;----- 请重新登录 或 注册账户 -----&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin</span>():</span></span><br><span class="line">    users = func.findAdmins()</span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;---------- 管理员登录 -----------&#x27;</span>)</span><br><span class="line">    data = func.inputData(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">in</span> users:</span><br><span class="line">        print(<span class="string">&#x27;----------- 登录成功 -----------&#x27;</span>)</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        CURD(<span class="string">&#x27;admin&#x27;</span>, data[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;----------- 登录失败 -----------&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;---- 管理员不存在 或 密码错误 ----&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;----- 请重新登录 或 联系主管 -----&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;----------- 用户注册 -----------&#x27;</span>)</span><br><span class="line">    data = func.inputData(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    func.addUser(data)</span><br><span class="line">    print(<span class="string">&#x27;----------- 注册完毕 -----------&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;-------------------------------&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;            欢迎使用            &#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;        实验室书籍借阅系统        &#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;-------------------------------&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">        print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;-------------------------------&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;********** 登录 --- 1 **********&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;********** 注册 --- 2 **********&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;********** 管理 --- 3 **********&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;********** 退出 --- 0 **********&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;-------------------------------&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            iNum = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请您输入操作对应的数字并按下回车键：&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">&#x27;------- 请您输入对应的数字 -------&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> iNum == <span class="number">1</span>:</span><br><span class="line">                login()</span><br><span class="line">            <span class="keyword">elif</span> iNum == <span class="number">2</span>:</span><br><span class="line">                register()</span><br><span class="line">            <span class="keyword">elif</span> iNum == <span class="number">3</span>:</span><br><span class="line">                admin()</span><br><span class="line">            <span class="keyword">elif</span> iNum == <span class="number">0</span>:</span><br><span class="line">                os._exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;------- 请您输入对应的数字 -------&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="func-py"><a href="#func-py" class="headerlink" title="func.py"></a>func.py</h2><p>在 func.py 中我们定义的函数有如下几个：</p><ul><li>inputData(‘user’) —— 输入信息提取</li><li>create() —— 增加书籍</li><li>delete() —— 删除书籍</li><li>update() —— 更新书籍</li><li>retrieve() —— 查询书籍</li><li>giveBack() —— 归还书籍</li><li>borrowBook(‘username’) —— 借阅书籍</li><li>showAllUser() —— 显示所有用户</li><li>deleteUser() —— 删除用户</li><li>showAll() —— 显示所有书籍</li><li>findUsers() —— 查询用户</li><li>findAdmins() —— 查询管理员</li><li>addUser([‘username’,’password’]) —— 添加用户</li></ul><p>func.py 中主要封装了 CURD 操作所对应的一系列函数，将每个函数功能封装起来，方便上层调用，数据的读写再由底层实现。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能函数</span></span><br><span class="line"><span class="keyword">import</span> file</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">books = <span class="string">&#x27;books.txt&#x27;</span>  <span class="comment"># 书籍仓库</span></span><br><span class="line">borrow = <span class="string">&#x27;borrow.txt&#x27;</span>  <span class="comment"># 借出书籍</span></span><br><span class="line">users = <span class="string">&#x27;users.txt&#x27;</span>  <span class="comment"># 用户信息</span></span><br><span class="line">admins = <span class="string">&#x27;admins.bin&#x27;</span>  <span class="comment"># 管理员</span></span><br><span class="line">title = [<span class="string">&#x27;书名:&#x27;</span>, <span class="string">&#x27;作者：&#x27;</span>, <span class="string">&#x27;借阅人：&#x27;</span>, <span class="string">&#x27;  时间：&#x27;</span>]</span><br><span class="line">userTitle = [<span class="string">&#x27;用户名：&#x27;</span>, <span class="string">&#x27;密码：&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入信息提取</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inputData</span>(<span class="params">keywords</span>):</span></span><br><span class="line">    <span class="keyword">if</span> keywords == <span class="string">&#x27;book&#x27;</span>:</span><br><span class="line">        key = <span class="built_in">input</span>(<span class="string">&#x27;请输入书名：   \t&#x27;</span>)</span><br><span class="line">        value = <span class="built_in">input</span>(<span class="string">&#x27;请输入作者名：\t&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> keywords == <span class="string">&#x27;user&#x27;</span>:</span><br><span class="line">        key = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户名：\t&#x27;</span>)</span><br><span class="line">        value = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：   \t&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> [key, value]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加书籍</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;----------- 添加书籍 -----------&#x27;</span>)</span><br><span class="line">    data = inputData(<span class="string">&#x27;book&#x27;</span>)</span><br><span class="line">    file.writeData(books, data, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;----------- 添加成功 -----------&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除书籍</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;----------- 删除书籍 -----------&#x27;</span>)</span><br><span class="line">    data = inputData(<span class="string">&#x27;book&#x27;</span>)</span><br><span class="line">    new = []  <span class="comment"># 定义一个空列表，用来存储结果</span></span><br><span class="line">    new = file.splitData(books)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">in</span> new:</span><br><span class="line">        new.remove(data)</span><br><span class="line">        fobj = <span class="built_in">open</span>(books, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> new:</span><br><span class="line">            file.writeData(books, item, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        fobj.close()  <span class="comment"># 特别注意文件操作完毕后要close</span></span><br><span class="line">        print(<span class="string">&#x27;----------- 删除成功 -----------&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;------ 书籍不存在，自动返回 ------&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新书籍</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;----------- 修改书籍 -----------&#x27;</span>)</span><br><span class="line">    data = inputData(<span class="string">&#x27;book&#x27;</span>)</span><br><span class="line">    new = []</span><br><span class="line">    new = file.splitData(books)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">in</span> new:</span><br><span class="line">        new.remove(data)</span><br><span class="line">        bookname = <span class="built_in">input</span>(<span class="string">&#x27;请输入修改后的书名：&#x27;</span>)</span><br><span class="line">        author = <span class="built_in">input</span>(<span class="string">&#x27;请输入修改后的作者：&#x27;</span>)</span><br><span class="line">        data = [bookname, author]</span><br><span class="line">        new.append(data)</span><br><span class="line">        fobj = <span class="built_in">open</span>(books, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> new:</span><br><span class="line">            file.writeData(books, item, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        fobj.close()  <span class="comment"># 特别注意文件操作完毕后要close</span></span><br><span class="line">        print(<span class="string">&#x27;----------- 修改成功 -----------&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;------ 书籍不存在，自动返回 ------&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询书籍</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">retrieve</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;----------- 查找书籍 -----------&#x27;</span>)</span><br><span class="line">    bookname = <span class="built_in">input</span>(<span class="string">&#x27;请输入书名：&#x27;</span>)</span><br><span class="line">    new = file.splitData(books)</span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> book <span class="keyword">in</span> new:</span><br><span class="line">        <span class="keyword">if</span> book[<span class="number">0</span>] == bookname:</span><br><span class="line">            print(<span class="string">&#x27;书名：&#x27;</span>, book[<span class="number">0</span>], <span class="string">&#x27; 作者：&#x27;</span>, book[<span class="number">1</span>])</span><br><span class="line">            flag = flag + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&#x27;----- 没有找到该书，自动返回 -----&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;----------- 查找结束 -----------&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 归还书籍</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">giveBack</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;----------- 归还书籍 -----------&#x27;</span>)</span><br><span class="line">    data = inputData(<span class="string">&#x27;book&#x27;</span>)</span><br><span class="line">    new = []  <span class="comment"># 定义一个空列表，用来存储结果</span></span><br><span class="line">    new = file.splitData(borrow)</span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> new:</span><br><span class="line">        <span class="keyword">if</span> data == [item[<span class="number">0</span>], item[<span class="number">1</span>]]:</span><br><span class="line">            new.remove(item)</span><br><span class="line">            fborrow = <span class="built_in">open</span>(borrow, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> new:</span><br><span class="line">                file.writeData(borrow, item, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            fborrow.close()</span><br><span class="line">            fbooks = <span class="built_in">open</span>(books, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            file.writeData(books, [data[<span class="number">0</span>], data[<span class="number">1</span>]], <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            fbooks.close()</span><br><span class="line">            flag = flag + <span class="number">1</span></span><br><span class="line">            print(<span class="string">&#x27;----------- 归还成功 -----------&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&#x27;------ 书本未借出，归还失败 ------&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 借阅书籍</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">borrowBook</span>(<span class="params">username</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;----------- 借阅书籍 -----------&#x27;</span>)</span><br><span class="line">    data = inputData(<span class="string">&#x27;book&#x27;</span>)</span><br><span class="line">    new = []  <span class="comment"># 定义一个空列表，用来存储结果</span></span><br><span class="line">    new = file.splitData(books)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">in</span> new:</span><br><span class="line">        new.remove(data)</span><br><span class="line">        fbooks = <span class="built_in">open</span>(books, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> new:</span><br><span class="line">            file.writeData(books, [item[<span class="number">0</span>], item[<span class="number">1</span>]], <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        fbooks.close()</span><br><span class="line">        fborrow = <span class="built_in">open</span>(borrow, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        data.append(username)</span><br><span class="line">        data.append(datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>))</span><br><span class="line">        file.writeData(borrow, data, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        fborrow.close()</span><br><span class="line">        print(<span class="string">&#x27;----------- 借书成功 -----------&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;------ 书籍不存在，自动返回 ------&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有用户</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showAllUser</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;----------- 所有用户 -----------&#x27;</span>)</span><br><span class="line">    new = file.splitData(users)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> new:</span><br><span class="line">        print(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            print(<span class="string">&#x27;&#123;&#125; &#123;&#125; \t&#x27;</span>.<span class="built_in">format</span>(userTitle[i], item[i], <span class="built_in">chr</span>(<span class="number">12288</span>)), end=<span class="string">&#x27;&#x27;</span>)  <span class="comment"># format格式化字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteUser</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;----------- 删除用户 -----------&#x27;</span>)</span><br><span class="line">    data = inputData(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    new = []  <span class="comment"># 定义一个空列表，用来存储结果</span></span><br><span class="line">    new = file.splitData(users)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">in</span> new:</span><br><span class="line">        new.remove(data)</span><br><span class="line">        fobj = <span class="built_in">open</span>(users, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> new:</span><br><span class="line">            file.writeData(users, item, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        fobj.close()  <span class="comment"># 特别注意文件操作完毕后要close</span></span><br><span class="line">        print(<span class="string">&#x27;----------- 删除成功 -----------&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;------ 用户不存在，自动返回 ------&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有书籍</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showAll</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;----------- 所有书籍 -----------&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;---******** 在库书籍 ********---&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    new = file.splitData(books)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> new:</span><br><span class="line">        print(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            print(<span class="string">&#x27;&#123;&#125; &#123;&#125; \t&#x27;</span>.<span class="built_in">format</span>(title[i], item[i], <span class="built_in">chr</span>(<span class="number">12288</span>)), end=<span class="string">&#x27;&#x27;</span>)  <span class="comment"># format格式化字符串</span></span><br><span class="line">    print(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;---******** 借出书籍 ********---&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    new = file.splitData(borrow)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> new:</span><br><span class="line">        print(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            print(<span class="string">&#x27;&#123;&#125; &#123;&#125;   \t&#x27;</span>.<span class="built_in">format</span>(title[i], item[i], <span class="built_in">chr</span>(<span class="number">12288</span>)), end=<span class="string">&#x27;&#x27;</span>)  <span class="comment"># format格式化字符串</span></span><br><span class="line">    print(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询用户</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findUsers</span>():</span></span><br><span class="line">    new = []</span><br><span class="line">    new = file.splitData(users)</span><br><span class="line">    <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询管理员</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findAdmins</span>():</span></span><br><span class="line">    new = []</span><br><span class="line">    new = file.splitData(admins)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(new) == <span class="number">0</span>):</span><br><span class="line">        new = [[<span class="string">&#x27;XDP&#x27;</span>, <span class="string">&#x27;Admin&#x27;</span>], ]</span><br><span class="line">    print(<span class="string">&quot;管理员账号：XDP 密码：Admin&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加用户</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addUser</span>(<span class="params">data</span>):</span></span><br><span class="line">    file.writeData(users, data, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="file-py"><a href="#file-py" class="headerlink" title="file.py"></a>file.py</h2><p>在 file.py 中我们定义的函数有如下几个：</p><ul><li>readData(‘books.txt’) —— 读取信息</li><li>writeData(‘books.txt’, [‘测试书籍 1’, ‘作者 1’], ‘a’) —— 写入信息</li><li>splitData(‘books.txt’) —— 处理读取的信息</li></ul><p>file.py 中，封装了最底层的文件读写函数，将数据读取出来交给上层的功能函数处理。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 文件读写底层</span></span><br><span class="line">title = [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;,&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readData</span>(<span class="params">fName</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fobj = <span class="built_in">open</span>(fName, <span class="string">&#x27;a&#x27;</span>)  <span class="comment"># 读取</span></span><br><span class="line">        fobj.close()</span><br><span class="line">        fobj = <span class="built_in">open</span>(fName, <span class="string">&#x27;r&#x27;</span>)  <span class="comment"># 读取</span></span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        print(<span class="string">&#x27;--- 数据获取失败，请联系管理员。 --&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># else中处理正常情况</span></span><br><span class="line">        <span class="keyword">return</span> fobj</span><br><span class="line">        fobj.close()  <span class="comment"># 特别注意文件操作完毕后要close</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeData</span>(<span class="params">fName, data, way</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fobj = <span class="built_in">open</span>(fName, way)  <span class="comment"># 这里的a意思是追加，这样在加了之后就不会覆盖掉源文件中的内容，如果是w则会覆盖。</span></span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        print(<span class="string">&#x27;--- 数据获取失败，请联系管理员。 --&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> data:</span><br><span class="line">            fobj.write(title[i] + <span class="built_in">str</span>(value))</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">        fobj.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        fobj.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理读取的信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">splitData</span>(<span class="params">fName</span>):</span></span><br><span class="line">    fobj = readData(fName)</span><br><span class="line">    sourceInLines = fobj.readlines()</span><br><span class="line">    new = []  <span class="comment"># 定义一个空列表，用来存储结果</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> sourceInLines:</span><br><span class="line">        temp1 = line.strip(<span class="string">&#x27;\n&#x27;</span>)  <span class="comment"># 去掉每行最后的换行符&#x27;\n&#x27;</span></span><br><span class="line">        temp2 = temp1.split(<span class="string">&#x27;,&#x27;</span>)  <span class="comment"># 以&#x27;,&#x27;为标志，将每行分割成列表</span></span><br><span class="line">        new.append(temp2)  <span class="comment"># 将上一步得到的列表添加到new中</span></span><br><span class="line">    <span class="keyword">return</span> new</span><br></pre></td></tr></table></figure><h2 id="生成可执行文件"><a href="#生成可执行文件" class="headerlink" title="生成可执行文件"></a>生成可执行文件</h2><p>最终通过 pyinstaller 来将代码包装起来成为可执行文件，最终命令行版本的书籍借阅系统成型。</p><ul><li>pip install pyinstaller —— 安装 pyinstaller</li><li>pyinstaller -F main.py —— 生成可执行文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo升级NexT</title>
      <link href="/posts/6b13abeb/"/>
      <url>/posts/6b13abeb/</url>
      
        <content type="html"><![CDATA[<p>很久没有登录 NexT 官网了，这几天去官网查看，发现 NexT 已经升级到 NexT7 了。便想到了升级主题的方法。一查资料发现好像升级还可以提升访问速度。那就必须得大干一番了。</p><h2 id="升级-Hexo"><a href="#升级-Hexo" class="headerlink" title="升级 Hexo"></a>升级 Hexo</h2><p>首先进行 Hexo 版本升级</p><p>Hexo 版本升级可以通过 npm 实现，相关命令如下：</p><a id="more"></a><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br><span class="line">npm update</span><br></pre></td></tr></table></figure><p>再输入<code>hexo vesion</code>查看当前版本，发现版本已经更新成功了。</p><h2 id="升级-NexT"><a href="#升级-NexT" class="headerlink" title="升级 NexT"></a>升级 NexT</h2><p>接下来升级 NexT 主题版本</p><p>事关软件，凡事都要先查资料，github，官方文档等等。我们按照官方文档链接<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L3RyZWUvbWFzdGVyL2RvY3MvemgtQ04=" title="https://github.com/theme-next/hexo-theme-next/tree/master/docs/zh-CN">从 NexT v5.1.x 更新<i class="fa fa-external-link"></i></span>一步步来，从 NexT5 升级到 6 并没有太大的变动，而且不需要对原本的主题进行修改，只需要把新主题下载下来引入即可。然后按照官方文档所说的，将各种自己的配置文件引入到新主题中即可。</p><h3 id="移动配置文件"><a href="#移动配置文件" class="headerlink" title="移动配置文件"></a>移动配置文件</h3><p>1.将之前的主题配置文件 config.yml 对照修改到新的主题配置文件。注意不要直接复制过来。<strong>文件都不一样，里面很多配置内容也不同，不推荐直接复制。</strong></p><p>2.移动自定义的 CSS 配置，NexT5 的 next/source/css/_custom/* 和 NexT6 的 next/source/css/_variables/* 中。<strong>注意要同时在 NexT6 的 next/source/css/_custom/_中也复制一份。</strong></p><p>3.自定义的排布配置，它们应在 next/layout/_custom/* 中。</p><p>4.任何其它可能的附加自定义内容；为了定位它们，你可以通过某些工具在仓库间比较。<strong>比如自定义的百度推广，百度分享文件修改，页面崩溃欺骗等等自定义的文件。</strong></p><h3 id="Clone-仓库"><a href="#Clone-仓库" class="headerlink" title="Clone 仓库"></a>Clone 仓库</h3><p>克隆新的 v6.x 仓库到任一异于 next 的目录（如 next-reloaded）：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next-reloaded</span><br></pre></td></tr></table></figure><p>如此，你可以在不修改原有的 NexT v5.1.x 目录的同时使用 next-reloaded 目录中的新版本主题。</p><h3 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h3><p>将主题文件夹名称改为你想要的，比如我改为 next7(发现具体版本为 7.1.x)，然后在 Hexo 的 config.yml 文件中修改如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next7</span><br></pre></td></tr></table></figure><p>如此，你的 next7 主题将在生成站点时被加载。这时，你也可以随时和之前的老版本做切换。</p><h3 id="配置语言"><a href="#配置语言" class="headerlink" title="配置语言"></a>配置语言</h3><p>从 v6.0.3 版本起，zh-Hans 改名为 zh-CN：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L3JlbGVhc2VzL3RhZy92Ni4wLjM=" title="https://github.com/theme-next/hexo-theme-next/releases/tag/v6.0.3">https://github.com/theme-next/hexo-theme-next/releases/tag/v6.0.3<i class="fa fa-external-link"></i></span></p><p>升级到 v6.0.3 及以后版本的用户，需要显式修改_config.xml 里的 language 配置，否则语言显示不正确。</p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>配置完毕之后，本地运行，发现只有侧边栏，文章内容位置没有显示。打开控制台调试。</p><blockquote><p>在控制台中显示，fancybox 没有找到。</p></blockquote><p>于是我们定位到<code>主题</code>&gt;<code>source</code>&gt;<code>lib</code>中，没有找到 fancybox 文件，看来需要下载。</p><p>在主题配置文件中，查找 fancybox，将 fancybox 配置为 true，可以看到有下载链接。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Fancybox. There is support for old version 2 and new version 3.</span><br><span class="line"># Please, choose only any one variant, do not need to install both.</span><br><span class="line"># For install 2.x: https://github.com/theme-next/theme-next-fancybox</span><br><span class="line"># For install 3.x: https://github.com/theme-next/theme-next-fancybox3</span><br><span class="line">fancybox: true</span><br></pre></td></tr></table></figure><p>告诉你要下载这个 fancybox，那就下载吧。</p><p>1.命令行定位到 next7 主题文件夹下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd next7</span><br></pre></td></tr></table></figure><p>2.下载 fancybox 文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox</span><br></pre></td></tr></table></figure><p>再次重新开启本地服务，发现页面完美运行，剩下的就自己修修补补吧。其实官网也给出了怎么按照 fancybox 文件，放出链接<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvdGhlbWUtbmV4dC1mYW5jeWJveA==" title="https://github.com/theme-next/theme-next-fancybox">fancyBox 2 for NexT<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式-代理模式</title>
      <link href="/posts/31856cc3/"/>
      <url>/posts/31856cc3/</url>
      
        <content type="html"><![CDATA[<p style="font-size:20px;font-weight:800;">代理模式(Proxy)</p><blockquote><p><strong>为一个对象提供一个代用品或占位符，以便控制对它们的访问。</strong></p></blockquote><p>代理模式是一种非常有意义的模式，在生活中可以找到很多代理模式的场景。比如，明星都有经纪人作为代理。</p><p>代理模式的关键是，当客户不方便直接访问一个对象或者不满足需要的时候，提供一个替身对象来控制对这个对象的访问，客户实际上访问的是替身对象。替身对象对请求做出做出一些处理之后，再把请求转交给本体对象。</p><a id="more"></a><h2 id="小明追-MM"><a href="#小明追-MM" class="headerlink" title="小明追 MM"></a>小明追 MM</h2><p>小明追女孩 A，因为内向，所以找了他和 A 的共同好友 B，帮助小明完成送花的壮举。首先看看不实用代理的情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Flower = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">  sendFlower: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">    target.receiveFlower(flower);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;收到花&quot;</span> + flower);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.sendFlower(A);</span><br></pre></td></tr></table></figure><p>接下来我们引入代理 B，小明通过 B 来给 A 送花：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Flower = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">  sendFlower: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">    target.receiveFlower(flower);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">    A.receiveFlower(flower);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;收到花&quot;</span> + flower);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.sendFlower(B);</span><br></pre></td></tr></table></figure><p>显然第二段结果和第一段一样，这是最简单的代理模式的编写。从这段代码看起来，代理模式除了把事情变得复杂没啥用了。但是如果 A 在不同的情况下接收到花会有不同的结果，如果小明送花的时候不合时宜，那就不会有正确的结果了。但是 B 很了解 A，她知道 A 什么时候心情好，所以这时候代理的用处就来了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Flower = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">  sendFlower: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">    target.receiveFlower(flower);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">    A.listenGooodMood(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 监听A的状态</span></span><br><span class="line">      A.receiveFlower(flower);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;收到花&quot;</span> + flower);</span><br><span class="line">  &#125;</span><br><span class="line">  listenGoodMood:<span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 假定10秒后心情变好</span></span><br><span class="line">      fn();</span><br><span class="line">    &#125;,<span class="number">10000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.sendFlower(B);</span><br></pre></td></tr></table></figure><p>预祝小明求爱成功。</p><h2 id="保护代理和虚拟代理"><a href="#保护代理和虚拟代理" class="headerlink" title="保护代理和虚拟代理"></a>保护代理和虚拟代理</h2><p>虽然这是一个虚拟案例，但是我们从中可以看到两种代理模式的身影。代理 B 可以帮助 A 过滤掉一些请求，比如送花的人中年龄太大的或者没有宝马的，这种请求就可以直接在代理 B 处被拒绝掉。这种代理就叫做<strong>保护代理</strong>。</p><p>另外，在程序世界中，new Flower 是一个代价昂贵的操作，我们可以把 new Flower 的操作交给代理 B 去执行，代理 B 会在 A 心情好的时候去 new Flower，这是代理的另一种模式，称为<strong>虚拟代理</strong>。虚拟代理会把一些开销很大的对象，延迟到真正需要它的时候才去创建。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">    A.listenGoodMood(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">      A.receiveFlower(flower);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>保护代理用于控制不同权限的对象对目标对象的访问，但在 JavaScript 并不容易实现保护代理，因为我们无法判断谁访问了某个对象。而虚拟代理是最常用的一种代理模式。</p></blockquote><p>接下来我们看一个真实案例。</p><h2 id="虚拟代理实现图片预加载"><a href="#虚拟代理实现图片预加载" class="headerlink" title="虚拟代理实现图片预加载"></a>虚拟代理实现图片预加载</h2><p>在 Web 开发中，图片预加载是一种常用的技术，如果直接给 img 标签节点设置 src 属性，由于图片过大或者网络不佳，图片的位置往往会有段时间是一片空白。常见做法是先用一张 loading 图片占位，然后用异步的方式加载图片，等图片加载好了再把它填充到 img 节点里，这种场景就很适合使用虚拟代理。</p><p>下面我们来实现这个虚拟代理，首先创建一个普通的本体对象，这个对象负责往页面中创建一个 img 标签，并且提供一个对外的 setSrc 接口，外界调用这个接口，便可以给该 img 标签设置 src 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(imgNode);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">      imgNode.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">myImage.setSrc(<span class="string">&quot;http://x/x/x.jpg&quot;</span>);</span><br></pre></td></tr></table></figure><p>现在引入代理对象 proxyImage，通过这个代理对象，在图片真正被加载好之前，页面中将出现一张占位图，来提示用户图片正在加载。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(imgNode);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">      imgNode.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myImage.setSrc(<span class="built_in">this</span>.src);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">      myImage.setSrc(<span class="string">&quot;file://x/x/x.jpg&quot;</span>);</span><br><span class="line">      img.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">proxyImage.setSrc(<span class="string">&quot;http://x/x/x.jpg&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们通过 proxyImage 间接的访问 MyImage。proxyImage 控制了客户对 MyImage 的访问，并且在此过程中加入一些额外操作，比如在图片加载好之前，先把 img 的节点设置为一张本地图片。</p><h2 id="代理的意义"><a href="#代理的意义" class="headerlink" title="代理的意义"></a>代理的意义</h2><p>不用代理的预加载图片函数实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(imgNode);</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    imgNode.src = img.src;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">      imgNode.src = <span class="string">&quot;file://x/x/x.jpg&quot;</span>;</span><br><span class="line">      img.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">MyImage.setSrc(<span class="string">&quot;http://x/x/x.jpg&quot;</span>);</span><br></pre></td></tr></table></figure><p>为了说明代理的意义，我们引入一个面向对象设计的原则——<strong>单一职责原则</strong></p><p>单一职责原则指的是：就<strong>一个类</strong>(通常也包括对象和函数等)而言，应当<strong>仅有一个</strong>引起它变化的原因。</p><p>如果一个对象承担了多项职责，就意味着这个对象将变得巨大，引起它变化的原因可能会有多个。面向对象设计鼓励将行为分布到细粒度的对象之中，如果一个对象承担的职责过多，等于把这些职责耦合到了一起，这种耦合会导致脆弱和低内聚的设计。当变化发生时，设计可能会遭到意外的破坏。</p><p>纵观整个程序，我们并没有改变或者增加 MyImage 的接口，但是通过代理对象，实际上给系统添加了新的行为。这是符合<strong>开放-封闭原则</strong>的。给 img 节点设置 src 和图片预加载这两个功能，被隔离在两个对象里，它们可以各自变化而不影响对方。何况就算有一天我们不需要预加载了，那么我们只需要改为请求本体而不是请求代理对象即可。</p><h2 id="代理和本体接口的一致性"><a href="#代理和本体接口的一致性" class="headerlink" title="代理和本体接口的一致性"></a>代理和本体接口的一致性</h2><p>如果我们有一天不需要预加载功能了，我们可以直接将目标指向本体。在客户看来，代理对象和本体是一致的，代理接手请求的过程对于用户来说是透明的，用户并不清楚代理和本体的区别，这样有两个好处：</p><ul><li>用户可以放心的请求代理，他只关心是否能得到想要的结果。</li><li>在任何使用本体的地方都可以替换成使用代理。</li></ul><p>在 JAVA 中，代理和本体都要显式的实现同一个接口才行，一方面接口保证了它们会拥有同样的方法，另一方面，面向接口编程迎合依赖倒置原则，通过接口进行向上转型，从而避开编译器的类型检查，代理和本体将来可以被替换使用。</p><p>但是在 JS 这类动态语言中，我们有时通过鸭子类型检测代理和本体是否都实现了 setSrc 方法，另外大多数时候干脆不做检查，全靠自觉。</p><p>另外：如果代理对象和本体对象都为一个函数(函数也是对象)，函数必然都能被执行，则认为它们也具有一致的“接口”，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(imgNode);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    imgNode.src = src;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myImage.setSrc(<span class="built_in">this</span>.src);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    myImage.setSrc(<span class="string">&quot;file://x/x/x.jpg&quot;</span>);</span><br><span class="line">    img.src = src;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">proxyImage(<span class="string">&quot;http://x/x/x.jpg&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="虚拟代理合并-HTTP-请求"><a href="#虚拟代理合并-HTTP-请求" class="headerlink" title="虚拟代理合并 HTTP 请求"></a>虚拟代理合并 HTTP 请求</h2><p>先想象这样一个场景：每周我们都要写一份工作周报，周报要交给总监，总监手下管理着 150 个员工，如果我们每个人都直接把周报发给总监，总监估计要 GG。</p><p>现在我们把周报发给组长，组长作为代理，把内容提炼后一次性发给总监。</p><p>这个例子在程序世界里很容易引起共鸣，<strong>在 Web 开发中，也许最大的开销就是网络请求</strong>。假设我们在做一个文件同步的功能，当我们选中 checkbox 的时候，它对应的文件就会被同步到另一台备用服务器上面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> syncronousFile = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;开始同步文件，id为：&quot;</span> + id);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> checkbox = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, c; (c = checkbox[i++]); ) &#123;</span><br><span class="line">  c.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.checked === <span class="literal">true</span>) &#123;</span><br><span class="line">      synchronousFile(<span class="built_in">this</span>.id);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可想而知，我们点了 3 个 checkbox，依次往服务器发送了 3 次文件同步的请求。可以预见，如此频繁的网络操作会带来相当大的开销。</p><p>解决方案是，我们可以通过一个代理函数 proxySynchronousFile 来收集一段时间之内的请求，最后一次性发送给服务器，比如说我们等待 2 秒之后才把这 2 秒之内需要同步的文件 ID 打包发送给服务器，如果不是实时性非常高的系统，2 秒的延迟不会有太大副作用，却能大大减少服务器压力。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> syncronousFile = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;开始同步文件，id为：&quot;</span> + id);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxySynchronousFile = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cache = [], <span class="comment">// 保存一段时间内需要同步的ID</span></span><br><span class="line">    timer; <span class="comment">// 定时器</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    cache.push(id);</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="comment">// 保证不会覆盖已经启动的定时器</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      syncronousFile(cache.join(<span class="string">&quot;,&quot;</span>)); <span class="comment">// 2秒后向本体发送需要同步的ID集合</span></span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer); <span class="comment">// 清空定时器</span></span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">      cache.length = <span class="number">0</span>; <span class="comment">// 清空ID集合</span></span><br><span class="line">    &#125;，<span class="number">2000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> checkbox = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, c; (c = checkbox[i++]); ) &#123;</span><br><span class="line">  c.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.checked === <span class="literal">true</span>) &#123;</span><br><span class="line">      proxySynchronousFile(<span class="built_in">this</span>.id);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚拟代理在惰性加载中的应用"><a href="#虚拟代理在惰性加载中的应用" class="headerlink" title="虚拟代理在惰性加载中的应用"></a>虚拟代理在惰性加载中的应用</h3><p>惰性加载 emmm 就是延迟加载，或者说在需要的情况下进行加载，例如：无限滚动、瀑布流，这是一种设计模式。</p><h2 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h2><p>缓存代理可以为一些开销打的运算结果提供暂时的存储，在下次运算时，如果传递进来的参数和之前的一致，则可以直接返回前面存储的运算结果。</p><h3 id="缓存代理例子——计算乘积"><a href="#缓存代理例子——计算乘积" class="headerlink" title="缓存代理例子——计算乘积"></a>缓存代理例子——计算乘积</h3><p>先创建一个用于求乘积的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;开始计算乘积&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; <span class="number">1</span>; i++) &#123;</span><br><span class="line">    a = a * <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">mult(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 6</span></span><br><span class="line">mult(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 24</span></span><br></pre></td></tr></table></figure><p>现在加入缓存代理函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxyMult = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (args <span class="keyword">in</span> cache) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[args];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (cache[args] = mult.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">proxyMult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 24</span></span><br><span class="line">proxyMult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 24</span></span><br></pre></td></tr></table></figure><p>当我们第二次调用 proxyMult(1,2,3,4)的时候，本体 mult 函数并没有被计算，proxyMult 直接返回了之前缓存好的计算结果。</p><p>通过增加缓存代理的方式，mult 函数可以继续专注于自身的职责——计算乘积，缓存的功能是由代理对象实现的。</p><h3 id="缓存代理用于-ajax-异步请求数据"><a href="#缓存代理用于-ajax-异步请求数据" class="headerlink" title="缓存代理用于 ajax 异步请求数据"></a>缓存代理用于 ajax 异步请求数据</h3><p>我们常在项目中遇到分页的需求，同一页的数据理论上只需要去后台拉取一次，这些已经拉取到的数据在某个地方被缓存之后，下次再请求同一页的时候，便可以直接使用之前的数据。</p><p>显然这里也可以引入缓存代理，实现方式跟计算乘积的例子差不多，唯一不同的是，请求数据是个异步的操作，我们无法直接把计算结果放到代理对象的缓存中，而是要通过回调的方式。</p><h2 id="用高阶函数动态创建代理"><a href="#用高阶函数动态创建代理" class="headerlink" title="用高阶函数动态创建代理"></a>用高阶函数动态创建代理</h2><p>通过传入高阶函数这种更加灵活的方式，可以为各种计算方法创建缓存代理。现在这些计算方法被当作参数传入一个专门用于创建缓存代理的工厂中，这样一来，我们就可以为乘法、加法、减法等创建缓存代理，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********** 计算乘积 **********/</span></span><br><span class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; <span class="number">1</span>; i++) &#123;</span><br><span class="line">    a = a * <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********** 计算加和 **********/</span></span><br><span class="line"><span class="keyword">var</span> plus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; <span class="number">1</span>; i++) &#123;</span><br><span class="line">    a = a + <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********** 创建缓存代理的工厂 **********/</span></span><br><span class="line"><span class="keyword">var</span> createProxyFactory = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (args <span class="keyword">in</span> cache) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[args];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (cache[args] = fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyMult = createProxyFactory(mult),</span><br><span class="line">  proxyPlus = createProxyFactory(plus);</span><br><span class="line"></span><br><span class="line">alert(proxyMult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 24</span></span><br><span class="line">alert(proxyMult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 24</span></span><br><span class="line">alert(proxyPlus(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 10</span></span><br><span class="line">alert(proxyPlus(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h2 id="其他代理模式"><a href="#其他代理模式" class="headerlink" title="其他代理模式"></a>其他代理模式</h2><p>代理模式的变体种类非常多，限于篇幅以及在 JS 的适用性，就只说这些代理，不一一详解。</p><ul><li>防火墙代理：控制网络资源的访问，保护主题不让“坏人”接近。</li><li>远程代理：为一个对象在不同的地址空间提供局部代表，在 JAVA 中，远程代理可以是另一个虚拟机重的对象。</li><li>保护代理：用于对象应该有不同访问权限的情况。</li><li>智能引用代理：取代了简单的指针，它在访问对象时执行一些附加操作，比如计算一个对象被引用的次数。</li><li>写时复制代理：通常用于复制一个庞大对象的情况。写时复制代理延迟了复制的过程，当对象被真正修改时，才对它进行复制操作。写时复制代理是虚拟代理的一种变体，DLL(操作系统中的动态链接库)是其典型运动场景。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>代理模式包括许多小分类，在 JavaScript 开发中最常用的是虚拟代理和缓存代理。虽然代理模式非常游泳，但我们在编写业务代码的时候，往往不需要去预先猜测是否需要使用代理模式。当真正发现不方便直接访问某个对象的时候，再编写代理也不迟。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式-策略模式</title>
      <link href="/posts/3837d4a2/"/>
      <url>/posts/3837d4a2/</url>
      
        <content type="html"><![CDATA[<p style="font-size:20px;font-weight:800;">策略模式(Strategy)</p><blockquote><p><strong>定义一系列的算法，把它们一个个封装起来，并且使他们可以互相替换。</strong></p></blockquote><p>策略模式有着广泛的应用。我们用例子来说明：</p><h2 id="策略模式计算奖金"><a href="#策略模式计算奖金" class="headerlink" title="策略模式计算奖金"></a>策略模式计算奖金</h2><p>公司年终奖根据员工的工资基数和绩效来发放，例如，绩效为 S 的年终奖有 4 倍工资，绩效为 A 的有三倍工资，B 为 2 倍工资。我们用代码来实现：</p><a id="more"></a><h3 id="最初代码实现"><a href="#最初代码实现" class="headerlink" title="最初代码实现"></a>最初代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编写calculateBonus函数计算，输入参数为工资以及绩效。</span></span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params">performanceLevel, salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (performanceLevel === <span class="string">&quot;S&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (performanceLevel === <span class="string">&quot;A&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (performanceLevel === <span class="string">&quot;B&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">calculateBonus(<span class="string">&quot;B&quot;</span>, <span class="number">20000</span>); <span class="comment">// 40000</span></span><br><span class="line">calculateBonus(<span class="string">&quot;S&quot;</span>, <span class="number">6000</span>); <span class="comment">// 24000</span></span><br></pre></td></tr></table></figure><p>这段代码非常简单，同时存在着很多显而易见的缺点：</p><ul><li>calculateBonus 函数比较庞大，包含了很多 if-else 语句，这些语句需要覆盖所有的逻辑分支。</li><li>calculateBonus 函数缺乏弹性，如果增加了一种新的绩效 C，或者想把 S 的系数做修改，那我们必须深入函数内部来实现，这是违反<strong>开放-封闭原则</strong>的。</li><li>算法的复用性差，如果在程序的其他地方需要重用这些计算奖金的算法呢？我们的选择只有复制粘贴。</li></ul><p>所以我们需要重构代码。</p><h3 id="组合函数重构代码"><a href="#组合函数重构代码" class="headerlink" title="组合函数重构代码"></a>组合函数重构代码</h3><p>一般比较容易想到的就是使用组合函数来重构代码，我们把各种算法封装到一个个的小函数里面，这些<strong>小函数有着良好的命名</strong>，可以一目了然地知道它对应着那种算法，它们也可以被复用在程序的其他地方。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> performanceS = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> performanceA = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> performanceB = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params">performanceLevel, salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (performanceLevel === <span class="string">&quot;S&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> performanceS(salary);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (performanceLevel === <span class="string">&quot;A&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> performanceA(salary);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (performanceLevel === <span class="string">&quot;B&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> performanceB(salary);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">calculateBonus(<span class="string">&quot;A&quot;</span>, <span class="number">10000</span>); <span class="comment">// 30000</span></span><br></pre></td></tr></table></figure><p>目前程序得到了一定的改善，但是这种改善非常的有限，我们依然没有解决最重要的问题：calculateBonus 函数有可能越来越庞大，而且在系统变化的时候缺乏弹性。</p><h3 id="策略模式重构代码"><a href="#策略模式重构代码" class="headerlink" title="策略模式重构代码"></a>策略模式重构代码</h3><p>有更好的办法来重构代码——策略模式。策略模式是将一系列算法一个个封装起来。将不变的部分和变化的部分隔开是每个设计模式的主题，策略模式也不例外，策略模式的目的就是将<strong>算法的使用与算法的实现分离开来</strong>。</p><p>在这个例子中，算法的使用方式是不变的，都是根据某个算法取得计算后的奖金数。算法的实现是各异和变化的，每种绩效对应着不同的计算规则。</p><p>一个策略模式的程序至少由两部分组成：</p><ul><li>第一部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。</li><li>第二部分是环境类 Context，Context 接受用户的请求，随后把请求委托给某一个策略类。要做到这一点，说明 Context 中要维持对某个策略对象的饮用。</li></ul><p>现在用策略模式来重构代码。第一个版本是模仿传统面向对象语言中的实现。我们先把每种绩效的计算规则都封装在对应的策略类里面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> performanceS = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">performanceS.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> performanceA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">performanceA.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> performanceB = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">performanceB.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来定义奖金类 Bonus：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Bonus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.salary = <span class="literal">null</span>; <span class="comment">// 原始工资</span></span><br><span class="line">  <span class="built_in">this</span>.strategy = <span class="literal">null</span>; <span class="comment">// 绩效等级对应的策略对象</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Bonus.prototype.setSalary = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.salary = salary; <span class="comment">// 设置员工的原始工资</span></span><br><span class="line">&#125;;</span><br><span class="line">Bonus.prototype.setStrategy = <span class="function"><span class="keyword">function</span>(<span class="params">strategy</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.strategy = strategy; <span class="comment">// 设置员工绩效等级对应的策略对象</span></span><br><span class="line">&#125;;</span><br><span class="line">Bonus.prototype.getBonus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 取得奖金数额</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.strategy.calculate(<span class="built_in">this</span>.salary); <span class="comment">// 把计算奖金的操作委托给对应的策略对象</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来，创建 bonus 对象，并给 bonus 对象设置一些原始数据，比如工资，绩效等等。然后把某个计算奖金的策略对象也传入 bonus 对象内部保存起来。当调用 bonus.getBonus()来计算奖金的时候，bonus 对象本身没有计算能力，而是把请求委托给了之前保存好的策略对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bonus = <span class="keyword">new</span> Bonus();</span><br><span class="line"></span><br><span class="line">bonus.setSalary(<span class="number">10000</span>);</span><br><span class="line">bonus.setStrategy(<span class="keyword">new</span> performanceS()); <span class="comment">// 设置策略对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bonus.getBonus()); <span class="comment">// 40000</span></span><br><span class="line"></span><br><span class="line">bonus.setStrategy(<span class="keyword">new</span> performanceA()); <span class="comment">// 设置策略对象</span></span><br><span class="line"><span class="built_in">console</span>.log(bonus.getBonus()); <span class="comment">// 30000</span></span><br></pre></td></tr></table></figure><p>可以看到通过策略模式重构代码之后，代码变得更加清晰，各个类的职责更加鲜明。但是这段代码是基于传统的面向对象语言的模仿。接下来我们了解 JavaScript 实现的策略模式。</p><h3 id="JavaScript-版本的策略模式"><a href="#JavaScript-版本的策略模式" class="headerlink" title="JavaScript 版本的策略模式"></a>JavaScript 版本的策略模式</h3><p>在之前的代码中，我们让 strategy 对象从各个策略类中创建而来，实际上在 JS 中，函数就是对象，我们直接将 strategy 定义为函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">  S: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  A: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  B: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同样，Context 也没必要用 Bonus 类来表示，我们依然用 calculateBonus 函数充当 Context 来接受用户请求。经过改造，代码结构变得更加简洁：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">  S: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  A: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  B: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params">level, salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> strategies[level](salary);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(calculateBonus(<span class="string">&quot;S&quot;</span>, <span class="number">20000</span>)); <span class="comment">// 80000</span></span><br><span class="line"><span class="built_in">console</span>.log(calculateBonus(<span class="string">&quot;A&quot;</span>, <span class="number">10000</span>)); <span class="comment">// 30000</span></span><br></pre></td></tr></table></figure><h3 id="多态在策略模式中的体现"><a href="#多态在策略模式中的体现" class="headerlink" title="多态在策略模式中的体现"></a>多态在策略模式中的体现</h3><p>通过使用策略模式重构代码，我们消除了原本程序中大片的条件分支语句。所有跟计算奖金有关的逻辑不再放在 Context 中，而是分布在各个策略对象中。Context 并没有计算奖金的能力，而是把这个职责委托给了某个策略对象。每个策略对象负责的算法已被各自封装在对象内部。当我们对这些策略对象发出“计算奖金”的请求时，它们会返回各自不同的计算结构，这正是对象多态性的体现，也是“它们可以相互替换”的目的。替换 Context 中当前保存的策略对象，便能执行不同的算法来得到我们想要的结果。</p><h2 id="策略模式实现动画"><a href="#策略模式实现动画" class="headerlink" title="策略模式实现动画"></a>策略模式实现动画</h2><p>接下来跟着 demo 编写一个比较直观的例子，实现动画效果。</p><p>用 JS 实现动画效果原理和动画片一样～，动画片是把一些差距不大的原画以较快的帧数播放，达到视觉效果。在 JS 中，可以通过连续改变元素的某个 CSS 属性，比如 left、top、background-position 来实现动画效果。</p><h3 id="思路和准备工作"><a href="#思路和准备工作" class="headerlink" title="思路和准备工作"></a>思路和准备工作</h3><p>我们的目标是编写一个动画类和一些缓动算法，让小球以各种各样的缓动效果在页面中运动。</p><p>现在来分析这个程序的思路。在运动开始前，需要提前记录一些有用的信息如下：</p><ul><li>动画开始时，小球所在的原始位置；</li><li>小球移动的目标位置；</li><li>动画开始的准确时间；</li><li>动画的持续时间；</li></ul><p>随后，我们用 setInterval 创建一个定时器，定时器每隔 19ms 循环一次。在定时器的每一帧中，我们会把动画已经消耗的时间、小球的原始位置、小球的目标位置和动画持续的总时间等信息传入缓动算法。该算法会通过这几个参数，计算出小球当前应该所在的位置。最后再更新该 div 对应的 CSS 属性，小球就可以顺利动起来了。</p><h3 id="让小球动起来"><a href="#让小球动起来" class="headerlink" title="让小球动起来"></a>让小球动起来</h3><p>我们来认识几个常见的缓动算法，来源于 Flash，可以方便的移植到其他语言中。</p><p>这些算法都接受 4 个参数，这 4 个参数的含义分别是 <strong>动画已经消耗的时间</strong>、<strong>小球原始位置</strong>、<strong>小球目标位置</strong>、<strong>动画持续的总时间</strong>，返回的值则是动画元素应该处在的当前位置。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tween = &#123;</span><br><span class="line">  linear: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c * t) / d + b;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeIn: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c * (t /= d) * t + b;</span><br><span class="line">  &#125;,</span><br><span class="line">  strongEaseIn: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c * (t /= d) * t * t * t * t + b;</span><br><span class="line">  &#125;,</span><br><span class="line">  strongEaseOut: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t * t * t + <span class="number">1</span>) + b;</span><br><span class="line">  &#125;,</span><br><span class="line">  sineaseIn: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c * (t /= d) * t * t + b;</span><br><span class="line">  &#125;,</span><br><span class="line">  sineaseOut: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t + <span class="number">1</span>) + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面我们开始编写完整代码，代码思想来源于 jQuery 库。</p><p>首先在页面中放置一个 div：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute;background:blue&quot;</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来定义 Animate 类，Animate 的构造函数接受一个参数：即将运动起来的 dom 节点。Animate 类的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Animate = <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.dom = dom; <span class="comment">// 进行动画的dom节点</span></span><br><span class="line">  <span class="built_in">this</span>.startTime = <span class="number">0</span>; <span class="comment">// 动画开始时间</span></span><br><span class="line">  <span class="built_in">this</span>.startPos = <span class="number">0</span>; <span class="comment">// dom节点初始位置</span></span><br><span class="line">  <span class="built_in">this</span>.endPos = <span class="number">0</span>; <span class="comment">// dom节点目标位置</span></span><br><span class="line">  <span class="built_in">this</span>.propertyName = <span class="literal">null</span>; <span class="comment">// dom节点需要被改变的css属性名</span></span><br><span class="line">  <span class="built_in">this</span>.easing = <span class="literal">null</span>; <span class="comment">// 缓动算法</span></span><br><span class="line">  <span class="built_in">this</span>.duration = <span class="literal">null</span>; <span class="comment">// 动画持续时间</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来 Animate.prototype.start 方法负责启动这个动画，在动画被启动的瞬间，要记录一些信息，供缓动算法在以后计算小球当前位置的时候使用。在记录完这些信息之后，此方法还要负责启动定时器。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Animate.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params">propertyName, endPos, duration, easing</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 动画启动时间</span></span><br><span class="line">  <span class="built_in">this</span>.startPos = <span class="built_in">this</span>.dom.getBoundingClientRect()[propertyName]; <span class="comment">// dom节点初始位置</span></span><br><span class="line">  <span class="built_in">this</span>.propertyName = propertyName; <span class="comment">// dom节点需要被改变的CSS属性名</span></span><br><span class="line">  <span class="built_in">this</span>.endPos = endPos; <span class="comment">// dom节点目标位置</span></span><br><span class="line">  <span class="built_in">this</span>.duration = duration; <span class="comment">// 动画持续时间</span></span><br><span class="line">  <span class="built_in">this</span>.easing = tween[easing]; <span class="comment">//缓动算法</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> timeId = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 启动定时器，开始执行动画</span></span><br><span class="line">    <span class="keyword">if</span> (self.step() === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果动画已经结束，则清楚定时器</span></span><br><span class="line">      <span class="built_in">clearInterval</span>(timeId);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">19</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Animate.prototype.start 方法接受以下 4 个参数：</p><ul><li>propertyName：要改变的 CSS 属性名，比如”left”、”top”分别表示左右移动和上下移动。</li><li>endPos：小球运动的目标位置。</li><li>duration：动画持续时间。</li><li>easing：缓动算法。</li></ul><p>接下来是 Animate.prototype.step 方法，该方法代表小球运动的每一帧要做的事情。在此处，这个方法负责计算小球当前位置和调用更新 CSS 属性值的方法 Animate.prototype.update。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Animate.prototype.step = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 取得当前时间</span></span><br><span class="line">  <span class="keyword">if</span> (t &gt;= <span class="built_in">this</span>.startTime + <span class="built_in">this</span>.duration) &#123;</span><br><span class="line">    <span class="comment">// (1)</span></span><br><span class="line">    <span class="built_in">this</span>.update(<span class="built_in">this</span>.endPos); <span class="comment">// 更新小球的CSS属性</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> pos = <span class="built_in">this</span>.easing(</span><br><span class="line">    t - <span class="built_in">this</span>.startTime,</span><br><span class="line">    <span class="built_in">this</span>.startPos,</span><br><span class="line">    <span class="built_in">this</span>.endPos - <span class="built_in">this</span>.startPos,</span><br><span class="line">    <span class="built_in">this</span>.duration</span><br><span class="line">  ); <span class="comment">// pos为小球当前位置</span></span><br><span class="line">  <span class="built_in">this</span>.update(pos); <span class="comment">// 更新小球的CSS属性值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>(1)处表示，如果当前时间大于动画开始时间加上动画持续时间，说明动画已经结束，此时应该修正小球的位置。因为在这一帧开始之后，小球的位置已经接近了目标位置，但是很可能不完全等于目标位置。此时我们主动修正小球当前位置为目标位置。此外让 Animate.prototype.step 方法返回 false ，可以通知 Animate.prototype.start 方法清除定时器。</p><p>最后是负责更新小球 CSS 属性的 Animate.prototype.update 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Animate.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params">pos</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.dom.style[<span class="built_in">this</span>.propertyName] = pos + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们做一些小测试:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> animate = <span class="keyword">new</span> Animate(div);</span><br><span class="line">animate.start(<span class="string">&quot;left&quot;</span>, <span class="number">500</span>, <span class="number">1000</span>, <span class="string">&quot;strongEaseOut&quot;</span>);</span><br><span class="line"><span class="comment">// animate.start(&quot;top&quot;, 1500, 500, &quot;strongEaseIn&quot;);</span></span><br><span class="line"><span class="comment">// 注：同时执行，只会执行后一个。</span></span><br></pre></td></tr></table></figure><p>利用我们编写的动画类和一些缓动算法就可以让小球运动起来。我们使用策略模式把算法传入动画类中，来达到各种不同的缓动效果，这些算法都可以轻易地被替换为另一个算法，这是策略模式的经典运用之一。策略模式的实现并不复杂，<strong>关键是如何从策略模式的实现背后，找到封装变化、委托和多态性这些思想的价值</strong>。</p><h3 id="更广义的“算法”"><a href="#更广义的“算法”" class="headerlink" title="更广义的“算法”"></a>更广义的“算法”</h3><p>策略模式指的是定义一系列的算法，并把它们封装起来。从定义上来看，策略模式就是用来封装算法的。但是如果把策略模式仅仅用来封装算法，必然有些大材小用。在实际开发中，我们通常会把算法的含义扩散开来，使用策略模式也可以用来封装一系列的“业务规则”。只要这些业务规则指向的<strong>目标一致</strong>，并且可以被<strong>替换使用</strong>，我们就可以用策略模式来封装它们。</p><h2 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h2><p>在一个 Web 项目中，注册、登录、修改用户信息等功能的实现都离不开提交表单。</p><p>在将用户输入的数据交给后台之前，常常要做一些客户端力所能及的校验工作，比如注册的时候需要校验是否填写了用户名，密码的长度是否符合规定等等。这样可以避免因为提交不合法的数据而带来不必要的网络开销。</p><p>我们编写如下规则：</p><ul><li>用户名不能为空</li><li>密码长度不小于 6 位</li><li>手机号码必须符合格式</li></ul><h3 id="表单校验的初始版本"><a href="#表单校验的初始版本" class="headerlink" title="表单校验的初始版本"></a>表单校验的初始版本</h3><p>此时没有引入策略模式，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://xudongpo.cn/register&quot;</span> <span class="attr">id</span>=<span class="string">&quot;registerForm&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">      请输入用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span> 请输入密码：&lt;input</span><br><span class="line">        type=&quot;text&quot;</span><br><span class="line">        name=&quot;password&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">      请输入手机号码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phoneNumber&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> registerForm = <span class="built_in">document</span>.getElementById(<span class="string">&quot;registerForm&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      registerForm.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (registerForm.userName.value === <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">          alert(<span class="string">&quot;用户名不能为空&quot;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (registerForm.password.value.length &lt; <span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="javascript">          alert(<span class="string">&quot;密码长度不能少于6位&quot;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!<span class="regexp">/(^[3|5|8][0-9]&#123;9&#125;$)/</span>.test(registerForm.phoneNumber.value)) &#123;</span></span><br><span class="line"><span class="javascript">          alert(<span class="string">&quot;手机号码格式不正确&quot;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是一种很常见的编码方式，它的缺点跟计算奖金的最初版本一模一样。</p><ul><li>registerForm.onsubmit 函数比较庞大，包含了很多 if-else 语句，这些语句需要覆盖所有的校验规则。</li><li>registerForm.onsubmit 函数缺乏弹性，如果增加了一种新的校验规则，或者想把密码长度从 6 改为 8，就需要深入 registerForm.onsubmit 函数内部去实现，这是违反<strong>开放-封闭原则</strong>的。</li><li>算法的复用性差，如果在程序中增加了另外一个表单，这个表单也需要进行一些类似的校验，我们很可能将这些校验逻辑复制的漫山遍野。</li></ul><h3 id="用策略模式重构表单"><a href="#用策略模式重构表单" class="headerlink" title="用策略模式重构表单"></a>用策略模式重构表单</h3><p>我们将使用策略模式来重构表单校验代码。我们首先将校验逻辑都封装成策略对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">  isNonEmpty: <span class="function"><span class="keyword">function</span>(<span class="params">value, errorMsg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  minLength: <span class="function"><span class="keyword">function</span>(<span class="params">value, length, errorMsg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value.length &lt; length) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  isMobile: <span class="function"><span class="keyword">function</span>(<span class="params">value, errorMsg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(value)) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来实现 Validator 类。在这里将作为 Context，负责接受用户请求并委托给 strategy 对象。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> validateFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> validator = <span class="keyword">new</span> Validator(); <span class="comment">// 创建一个validator对象</span></span><br><span class="line">  <span class="comment">/***** 添加一些校验规则 *****/</span></span><br><span class="line">  validator.add(registerForm.userName,<span class="string">&#x27;isNonEmpty&#x27;</span>,<span class="string">&#x27;用户名不能为空&#x27;</span>);</span><br><span class="line">  validator.add(registerForm.password,<span class="string">&#x27;minLength&#x27;</span>,<span class="string">&#x27;密码长度不少于6&#x27;</span>);</span><br><span class="line">  validator.add(registerForm.phoneNumber,<span class="string">&#x27;isMobile&#x27;</span>,<span class="string">&#x27;手机号格式不正确&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> errorMsg = validator.start(); <span class="comment">// 获得校验结果</span></span><br><span class="line">  <span class="keyword">return</span> errorMsg; <span class="comment">// 返回校验结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> registerForm = focument.getElementById(<span class="string">&#x27;registerForm&#x27;</span>);</span><br><span class="line">registerForm.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span>.errorMsg = validateFunc();  <span class="comment">// 如果errorMsg有返回值，说明没有通过校验</span></span><br><span class="line">  <span class="keyword">if</span>(errorMsg)&#123;</span><br><span class="line">    alert(errorMsg);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 阻止表单提交</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们首先创建了一个 validator 对象，然后通过 validator.add 方法，往 validator 对象中添加一些校验规则。validator.add 方法接受 3 个参数，以下面这个代码说明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">validator.add(registerForm.password, <span class="string">&quot;minLength&quot;</span>, <span class="string">&quot;密码长度不少于6&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>registerForm.password 为参与校验的 input 输入框。</li><li>‘minLength:6’是一个以冒号隔开的字符串。冒号前面的 minLength 代表客户挑选的 strategy 对象，冒号后面的数字 6 表示校验过程中的一些必要参数。’minLength:6’的意思就是校验 registerForm.password 这个文本输入框的 value 最小长度为 6。如果这个字符串中不包含冒号，说明校验过程中不需要额外的参数信息，比如’isNonEmpty’。</li><li>第 3 个参数是当前校验未通过时返回的错误信心。</li></ul><p>当我们往 validator 对象里面添加完一系列的校验规则之后，会调用 validator.start()方法来启动校验。如果 validator.start()返回了一个确切的 errorMsg 字符串当作返回值，说明校验没通过，此时需要让 registerForm.onsubmit 方法返回 false 来阻止表单的提交。</p><p>最后时 Validator 类的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Validator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.cache = []; <span class="comment">// 保存校验规则</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Validator.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">dom, rule, errorMsg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ary = rule.split(<span class="string">&quot;:&quot;</span>); <span class="comment">// 把strategy和参数分开</span></span><br><span class="line">  <span class="built_in">this</span>.cache.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 把校验的步骤用空函数包装起来，放入cache</span></span><br><span class="line">    <span class="keyword">var</span> strategy = ary.shift(); <span class="comment">// 用户挑选的strategy</span></span><br><span class="line">    ary.unshift(dom.value); <span class="comment">// 把input的value添加进参数列表</span></span><br><span class="line">    ary.push(errorMsg); <span class="comment">// 把errorMsg添加进参数列表</span></span><br><span class="line">    <span class="keyword">return</span> strategies[strategy].apply(dom, ary);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Validator.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, validatorFunc; (validatorFunc = <span class="built_in">this</span>.cache[i++]); ) &#123;</span><br><span class="line">    <span class="keyword">var</span> msg = validatorFunc(); <span class="comment">// 开始校验，并取得校验后的返回信息</span></span><br><span class="line">    <span class="keyword">if</span> (msg) &#123;</span><br><span class="line">      <span class="comment">// 如果有确切的返回值，说明校验没有通过</span></span><br><span class="line">      <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用策略模式重构代码之后，我们仅仅通过“配置”的方式就可以完成表单的校验，这些校验规则也可以复用在程序的任何地方，还能作为插件的形式，方便的被移植到其他项目中。</p><p>在修改某个检验规则的时候，只要编写或者改写少量的代码。比如我们想要将用户名输入框的校验规则改为用户名不能少于 10 个字符。可以看到这时候的修改是毫不费力的。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">validator.add(registerForm.userName, <span class="string">&quot;isNonEmpty&quot;</span>, <span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line"><span class="comment">// 改为</span></span><br><span class="line">validator.add(registerForm.userName, <span class="string">&quot;minLength:10&quot;</span>, <span class="string">&quot;用户名长度不能小于10位&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="添加多种校验规则"><a href="#添加多种校验规则" class="headerlink" title="添加多种校验规则"></a>添加多种校验规则</h3><p>目前我们的表单校验已经基本完成，但是有一点点小遗憾：一个文本输入框只能对应一种校验规则。</p><p>如果我们既想要校验它是否为空，又想校验它输入的文本长度不少于 10 呢？我们期望以这样的形式进行校验：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">validator.add(registerForm.userName, [</span><br><span class="line">  &#123;</span><br><span class="line">    startegy: <span class="string">&quot;isNonEmpty&quot;</span>,</span><br><span class="line">    errorMsg: <span class="string">&quot;用户名不能为空&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    startegy: <span class="string">&quot;minLength:10&quot;</span>,</span><br><span class="line">    errorMsg: <span class="string">&quot;用户名长度不能小于10位&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>下面提供的代码可以用于一个文本输入框对应多种校验规则：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://xudongpo.cn/register&quot;</span> <span class="attr">id</span>=<span class="string">&quot;registerForm&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">      请输入用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span> 请输入密码：&lt;input</span><br><span class="line">        type=&quot;text&quot;</span><br><span class="line">        name=&quot;password&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">      请输入手机号码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phoneNumber&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">      /********** 策略对象 **********/</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> strategies = &#123;</span></span><br><span class="line"><span class="javascript">        isNonEmpty: <span class="function"><span class="keyword">function</span>(<span class="params">value, errorMsg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (value === <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> errorMsg;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        minLength: <span class="function"><span class="keyword">function</span>(<span class="params">value, length, errorMsg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (value.length &lt; length) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> errorMsg;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        isMobile: <span class="function"><span class="keyword">function</span>(<span class="params">value, errorMsg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!<span class="regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(value)) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> errorMsg;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      /********** Validator类 **********/</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> Validator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.cache = []; <span class="comment">// 保存校验规则</span></span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      Validator.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">dom, rules</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, rule; (rule = rules[i++]); ) &#123;</span></span><br><span class="line"><span class="javascript">          (<span class="function"><span class="keyword">function</span>(<span class="params">rule</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> strategyAry = rule.strategy.split(<span class="string">&quot;:&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> errorMsg = rule.errorMsg;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            self.cache.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> strategy = strategyAry.shift();</span></span><br><span class="line">              strategyAry.unshift(dom.value);</span><br><span class="line">              strategyAry.push(errorMsg);</span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> strategies[strategy].apply(dom, strategyAry);</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;)(rule);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      Validator.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, validatorFunc; (validatorFunc = <span class="built_in">this</span>.cache[i++]); ) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> errorMsg = validatorFunc();</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (errorMsg) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 如果有确切的返回值，说明校验没有通过</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> errorMsg;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      /********** 客户调用代码 **********/</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> registerForm = <span class="built_in">document</span>.getElementById(<span class="string">&quot;registerForm&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> validateFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> validator = <span class="keyword">new</span> Validator();</span></span><br><span class="line"></span><br><span class="line">        validator.add(registerForm.userName, [</span><br><span class="line">          &#123;</span><br><span class="line"><span class="javascript">            startegy: <span class="string">&quot;isNonEmpty&quot;</span>,</span></span><br><span class="line"><span class="javascript">            errorMsg: <span class="string">&quot;用户名不能为空&quot;</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="javascript">            startegy: <span class="string">&quot;minLength:10&quot;</span>,</span></span><br><span class="line"><span class="javascript">            errorMsg: <span class="string">&quot;用户名长度不能小于10位&quot;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        ]);</span><br><span class="line">        validator.add(registerForm.password, [</span><br><span class="line">          &#123;</span><br><span class="line"><span class="javascript">            startegy: <span class="string">&quot;minLength:6&quot;</span>,</span></span><br><span class="line"><span class="javascript">            errorMsg: <span class="string">&quot;密码长度不能小于6位&quot;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        ]);</span><br><span class="line">        validator.add(registerForm.phoneNumber, [</span><br><span class="line">          &#123;</span><br><span class="line"><span class="javascript">            startegy: <span class="string">&quot;isMobile&quot;</span>,</span></span><br><span class="line"><span class="javascript">            errorMsg: <span class="string">&quot;手机号码格式不正确&quot;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        ]);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      registerForm.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> errorMsg = validateFunc();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (errorMsg) &#123;</span></span><br><span class="line">          alert(errorMsg);</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="策略模式的优缺点"><a href="#策略模式的优缺点" class="headerlink" title="策略模式的优缺点"></a>策略模式的优缺点</h2><p>策略模式是一种常用且有效的设计模式，通过以上例子，我们可以总结出策略模式的一些优缺点：</p><p>优点：</p><ul><li>策略模式利用组合、委托和多态等技术和思想，可以有效的避免多重条件选择语句。</li><li>策略模式提供了对<strong>开放-封闭原则</strong>的完美支持，将算法封装在独立的 strategy 中，使得它们易于切换，易于理解，易于扩展。</li><li>策略模式中的算法也可以复用在系统的其他地方，从而避免许多重复的复制粘贴工作。</li><li>在策略模式中利用组合和委托来让 Context 拥有执行算法的能力，这也是继承的一种更轻便的替代方案。</li></ul><p>缺点，但不严重：</p><ul><li>使用策略模式会在程序中增加许多策略类或者策略对象，但实际上这比把它们负责的逻辑堆砌在 Context 中好。</li><li>想要使用策略模式，必须了解所有的 strategy，必须了解各个 strategy 之间的不同点，这样才能选择一个合适的 strategy。此时 strategy 要向客户暴露它的所有实现，这是违反<strong>最少知识原则</strong>的。</li></ul><h2 id="一等函数对象与策略模式"><a href="#一等函数对象与策略模式" class="headerlink" title="一等函数对象与策略模式"></a>一等函数对象与策略模式</h2><p>以上几个示例，既有模拟传统面向对象语言的版本，又有针对 JS 的特有实现。在以类为中心的传统面向对象语言中，不同的算法或者行为被封装在各个策略类中，Context 将请求委托给这些策略对象，这些策略对象会根据请求返回不同的执行结果，这样便能表现出对象的多态性。</p><p>Peter Norvig 在他的演讲中曾说过：“在函数作为一等对象的语言中，策略模式是隐形的。strategy 就是值为函数的变量。”在 JS 中，除了使用类来封装算法和行为之外，使用函数当然也是一种选择。这些“算法”可以被封装在函数中并且四处传递，也就是我们常说的“高阶函数”。实际上在 JS 这种以函数作为一等对象的语言中，策略模式已经融入到语言本身当中，我们经常用高阶函数来封装不同的行为，并把它传递到另一个函数当中。我们对这些函数发出“调用”消息，不同的函数返回不同的结果。在 JS 中，函数对象的“多态性”来的更简单。</p><p>如下代码，我们能否认出来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> S = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> B = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params">func, salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> func(salary);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">calculateBonus(S, <span class="number">10000</span>); <span class="comment">// 40000</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活中的仪式感</title>
      <link href="/posts/f426f44c/"/>
      <url>/posts/f426f44c/</url>
      
        <content type="html"><![CDATA[<h2 id="仪式感"><a href="#仪式感" class="headerlink" title="仪式感"></a>仪式感</h2><p>什么是仪式感？？以下来源百度百科：</p><blockquote><p>仪式感是人们表达内心情感最直接的方式，仪式感无处不在。法国童话《小王子》里说，仪式感就是使某一天与其他日子不同，使某一时刻与其他时刻不同。中国人向来是注重“仪式感”的。</p></blockquote><p>我现在所处的这个时代已经和父母亲的那个时代天差地别了，想起有句话：“现在这个年纪，千万不要和家人说一个“累”字。他们所理解的累，应该是工厂那种披星戴月，早出晚归，体力不支那种。而他们并不曾理解我们所谓的累，是一种对过去没啥怀念，对现在没啥追求，更不知未来在哪里的茫然感。”<a id="more"></a>当时看到确实觉得很对，因为我也总会处在这个时候，总会莫名的给自己奇怪的压力，莫名的觉得自己很累。现在大多数年轻人都处在这样的一个状态，仪式感也应运而生。</p><h3 id="仪式感的定义"><a href="#仪式感的定义" class="headerlink" title="仪式感的定义"></a>仪式感的定义</h3><p>《小王子》里说，仪式感是使得某一天与其他日子不同，这个我们赞同，看日剧《逃避虽可耻但很有用》中，Gakki 和星野源约定好了周二的拥抱日。喜欢新垣结衣也是在这一部剧，很多人说，程序员都会喜欢 Gakki，我觉得和什么职业没有关系，而是喜欢在剧中美栗那种对待生活的认真态度，当然颜值也是有一定比例的～想想看，那一天，无论我们开心、难过，无论有无矛盾，无论怎样逃避，我们都面对面站好，迎接即将到来的拥抱。</p><p>所以每个人对待仪式感的定义都是不同的，比如：出门前给爱人一个亲吻，每周三和家人打电话聊聊天，周末一个人去书店看书，定期给朋友打个问候电话，生活中的仪式感，无处不在。仪式感是把本来单调普通的事情，变得不一样，使得我们对此怀有敬畏心理。</p><p>知乎上关于“为什么有些人需要仪式感？”有这样一个回答：<code>@林木然</code>说：“人生于世，就像在一条漫长的暗黑河流里漂泊。而所谓的仪式感，大概就是人类于这河流上建造的闪闪烁烁的小灯塔。靠这些灯塔，我们才能标定我们的存在。”</p><p>生活中的很多仪式感就像是小小灯塔，泛着微光，让生活变得温暖而亮堂。真正的仪式感从来不是为了他人的眼光，而是对自己生活的小事格外用心，那些用心的时刻，才是生活里微小的灯塔，总让人有细碎又温暖的感动。</p><blockquote><p>《北京遇上西雅图》里有一句台词：“他也许不会带我去坐游艇吃法餐， 但是他可以每天早晨都为我跑几条街去买我最爱吃的豆浆油条。”</p></blockquote><p>真正的仪式感不过就是这些淡淡的生活小事，它和法餐游艇无关，和别人的眼光无关。</p><blockquote><p>王小波说：“一个人只拥有此生此世是不够的，他还应该拥有诗意的世界。”</p></blockquote><p>是的，生活需要一点形式主义的仪式感，但真正的仪式感，并不仅仅是买几件漂亮衣服，晒几套网红化妆品，在装潢不错的咖啡厅拍几张照，读几本畅销书那么简单的事情。</p><blockquote><p>人生无处可逃，每天都是平凡的一天。</p></blockquote><p>真正的仪式感从来不是为了满足自己的虚荣，而是把细碎的生活也能过得讲究，让平淡的日子拥有开出花来的小惊喜。</p><p>所以，为什么生活中需要仪式感？其实知识想让每天开心一些。我们一直那么努力，最后不就是为了开心一点吗？</p><h2 id="伪仪式感"><a href="#伪仪式感" class="headerlink" title="伪仪式感"></a>伪仪式感</h2><p>说完了仪式感，我们再聊一聊在这浮躁的环境下衍生出来的伪仪式感。</p><p>前几天看到微信一篇推文，讲的是南京一个高端日料店，这是一家非常有规矩的店。“食物不能打包，点餐没有菜单，不接生客，只能老顾客带新顾客，来店用餐，食材必须在端上桌的一分钟内食用。”老顾客纷纷称赞，即使是豪华酒店的出品，也比不上这家店。</p><p>但是视频一播出，却遭到了网友们的“群嘲”。老板一再强调，“柒本味”就是“吃本味”，却在寿司表面挤上篡改食物本味的蛋黄酱。不仅如此，老板在之前制作寿司的照片中，手部有着明显的疮口，并且带着手表进行食材的处理。要知道，一名专业的寿司师傅，手与食材直接接触，手表很容易藏污纳垢。</p><p>风波之后有关部门突袭检查，发现其违反《食品经营许可管理办法》，已经停止经营。在曝光之前，即使人均最低消费要 400，来捧场的顾客也只增不减。</p><blockquote><p>不知何时开始，网红店繁繁冒出，渗透进大街小巷，它们花样百出，用一系列规矩增加噱头，似乎规矩越多越花哨，吃的时候仪式感才越强。<br>奇怪的规矩和作秀般的包装让一群人宁愿花上几小时排队，也要追求一顿饭的“仪式感”。</p></blockquote><blockquote><p>很多人说，生活需要点仪式感。</p></blockquote><blockquote><p>是的，但所谓仪式感，并不是一些虚无缥缈的作秀。吃一顿各种规矩冒着干冰的菜，在周末的午后摆拍一本文艺杂志，不喜欢漫威，却依旧跟风花高价看一场复联 4。</p></blockquote><blockquote><p>美其名曰“生活要有一点仪式感”，然而这些充其量不过是戴上虚伪帽子的“伪仪式感”，早已经一点一点侵蚀我们的日常。</p></blockquote><p>想起之前看过的一条新闻。97 年女生在宿舍把日子过成了诗，却被室友爆出了照片背后的秘密。</p><p>照片里，精致的大理石碟子上摆放着巧克力蛋糕卷，龟背叶、小松果在一旁点缀，原本平平无奇的早餐顿时仪式感满满。</p><p>但看似精致和仪式感的生活背后，却是女生用购买的道具，站在凌乱的床上各种摆拍。</p><p>在朋友圈里，生活文艺又美好，每次一 po 照片，总能收获无数的点赞，可光鲜的照片背后，却是乱成一团的宿舍。</p><p>仔细一想，生活中类似做作的伪仪式感也不在少数。朋友圈里生活精致又体面，现实生活却是另一种模样，即使月薪 3000，花钱时也决不心软；健身瑜伽齐上阵，却坚持不到一个月；时不时在社交网络上安利新买的奢侈品，晚饭却只敢买泡面；桌上是几百块的香薰蜡烛，一旁是分期买的苹果电脑，即使信用卡已经刷爆，朋友圈里配文依旧是：“生活需要一点仪式感，房子是租来的，但生活不是”很多时候，生活是需要仪式感，但被物欲支配的伪仪式感只会让生活陷入漩涡。</p><p>仪式感原本是一件浪漫的事，而伪仪式感却让人身心疲惫。</p><h2 id="小王子"><a href="#小王子" class="headerlink" title="小王子"></a>小王子</h2><blockquote><p>狐狸沉默不语，久久地看着小王子。</p></blockquote><blockquote><p>“请你驯服我吧！”狐狸说。</p></blockquote><blockquote><p>“没问题啊。”小王子回答说，“可我的时间不多了。还有许多朋友要结识，还有许多事物要了解。”</p></blockquote><blockquote><p>“只有被驯服了的事物，才会被了解。”狐狸说，“人不会再有时间去了解 任何东西的。他们总是到商人那里去购买现成的东西。因为世界上还没有购买朋 友的商店，所以人也就没有朋友。如果你想要一个朋友，那就驯服我吧！”</p></blockquote><blockquote><p>“我该怎么做呢？”小王子说。</p></blockquote><blockquote><p>“应当非常耐心。”狐狸回答道，“开始你就这样坐在草丛中，坐得离我稍 微远些。我用眼角瞅着你，你不用说话，语言是误解的根源。但是，每天， 你坐得靠我更近些……”</p></blockquote><blockquote><p>第二天，小王子又来了。“你每天最好在相同的时间来。”狐狸说道，“比如，你定在下午四点钟来， 那么到了三点钟，我就开始很高兴。时间越临近，我就越高兴。等到了四点，我就很焦躁，会坐立不安；我就会发现幸福的代价。但是，如果你随便什么时 候来，我就不知道在什么时候该期待你的到来，我们需要仪式。”</p></blockquote><blockquote><p>“仪式是什么？”</p></blockquote><blockquote><p>“这也是经常被遗忘的事情。”狐狸说，“它使某个日子区别其他日 子，使某一时刻不同与其他时刻。比如说，我的那些猎人就有一种仪式。他 们每星期四都和村子里的姑娘们跳舞。于是，星期四就是一个美好的日子！我可 以一直散步到葡萄园去。如果猎人不在固定的时候跳舞，所有的日子都是相同的，那么我 也就没有假日了。”</p></blockquote><blockquote><p>就这样，小王子驯服了狐狸。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬取京东商品</title>
      <link href="/posts/60ee2c07/"/>
      <url>/posts/60ee2c07/</url>
      
        <content type="html"><![CDATA[<p style="font-size:20px;font-weight:800;">Python爬虫-爬取京东商品</p><p>因为要教实验室的其他“小朋友”，所以自己要在课余时间学下 Python，昨天突发奇想，之前在爬取淘宝的过程中免不了遇到问题，那么在爬取其他网站的时候也会遇到问题。俗话说：问题才是最好的老师。（PS：编的）那么就不墨迹，目标一转，爬一下京东，练练手，本文不对代码做过多讲解，只讲解遇到的问题。</p><p>首先查一下京东的 robots 协议？（一直看不太懂，还得好好查，嗯～）<a id="more"></a>内容如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /?*</span><br><span class="line">Disallow: /pop/*.html</span><br><span class="line">Disallow: /pinpai/*.html?*</span><br><span class="line">User-agent: EtaoSpider</span><br><span class="line">Disallow: /</span><br><span class="line">User-agent: HuihuiSpider</span><br><span class="line">Disallow: /</span><br><span class="line">User-agent: GwdangSpider</span><br><span class="line">Disallow: /</span><br><span class="line">User-agent: WochachaSpider</span><br><span class="line">Disallow: /</span><br></pre></td></tr></table></figure><p>emmmm…我这小程序，嗯没啥影响，爬吧(&gt;^ω^&lt;) 。</p><p>进入<span class="exturl" data-url="aHR0cHM6Ly93d3cuamQuY29tLw==" title="https://www.jd.com/">京东主页<i class="fa fa-external-link"></i></span>，在搜索框中搜索“手机”回车。我们发现链接跳转到了以“<span class="exturl" data-url="aHR0cHM6Ly9zZWFyY2guamQuY29tL+KAnQ==" title="https://search.jd.com/”">https://search.jd.com/”<i class="fa fa-external-link"></i></span>开头的页面。</p><p>默认链接如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://search.jd.com/Search?keyword=手机&amp;enc=utf-8&amp;wq=手机&amp;pvid=6e7105bfd9294f7480ce2ab531eae353</span><br></pre></td></tr></table></figure><p>手机是我们搜索的关键词，后面的 id 啥的看不懂，不管，跳转到下一页面。我们取出第二、三页找找规律。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://search.jd.com/Search?keyword=手机&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;wq=手机&amp;cid2=653&amp;cid3=655&amp;page=3&amp;s=56&amp;click=0</span><br><span class="line">https://search.jd.com/Search?keyword=手机&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;wq=手机&amp;cid2=653&amp;cid3=655&amp;page=5&amp;s=108&amp;click=0</span><br></pre></td></tr></table></figure><p>我们可以发现如下规律：</p><ul><li>前面部分基本一样，之后搜索的 <strong>&amp;keyword</strong> 变化；</li><li><strong>&amp;page</strong> 表示的是页面，规律是 <strong>i*2-1</strong>；</li><li><strong>&amp;s</strong> 没找到规律，不管；</li></ul><p>我们通过这个规律就可以获取到对应的每个 html 页面了。</p><p>获取到 html 页面后，在商品信息中寻找，找到商品价格和名称对应的，是 p-price 和 p-name 为类的两个 div。</p><p>我们通过 BeautifulSoup 获取对应的 dom 元素，提取其中的信息。然后写入，打印即可。</p><p>源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 京东定向爬取搜索信息</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 获取URL页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span>(<span class="params">url, code=<span class="string">&#x27;utf-8&#x27;</span></span>):</span></span><br><span class="line">    head = &#123;</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://search.jd.com/&#x27;</span>,  <span class="comment"># 每个页面的后半部分数据，是通过下拉然后再次请求，会做来源检查。</span></span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;dasgfagda&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>, headers=head)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = code</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;获取URL页面失败&quot;</span></span><br><span class="line"><span class="comment"># 解析html信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePage</span>(<span class="params">ilt, html</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        nameInfo = soup.find_all(<span class="string">&#x27;div&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;p-name&#x27;</span>&#125;)</span><br><span class="line">        priceInfo = soup.find_all(<span class="string">&#x27;div&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;p-price&#x27;</span>&#125;)</span><br><span class="line">        <span class="comment"># print(nameInfo)</span></span><br><span class="line">        <span class="comment"># print(priceInfo)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nameInfo)):</span><br><span class="line">            titlelst = nameInfo[i].find(<span class="string">&#x27;em&#x27;</span>).text.split()</span><br><span class="line">            name = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(titlelst)):  <span class="comment"># 此处要注意循环变量不能混淆，与JS不同</span></span><br><span class="line">                <span class="comment"># 注意！！！此处之前是选择了截取长度，但是截取长度导致了后几个页面有些数据丢失，不知道为什么 :TODO</span></span><br><span class="line">                name = name + titlelst[j] + <span class="string">&quot; &quot;</span></span><br><span class="line">            price = priceInfo[i].find(<span class="string">&#x27;strong&#x27;</span>).text</span><br><span class="line">            <span class="keyword">if</span> (price == <span class="string">&#x27;￥&#x27;</span>):  <span class="comment"># 特殊情况，特殊处理</span></span><br><span class="line">                price = <span class="string">&#x27;￥&#x27;</span> + priceInfo[i].find(<span class="string">&#x27;strong&#x27;</span>)[<span class="string">&#x27;data-price&#x27;</span>]</span><br><span class="line">            ilt.append([price, name])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&quot;解析HTML内容失败&quot;</span>)</span><br><span class="line"><span class="comment"># 打印商品信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printGoodList</span>(<span class="params">ilt</span>):</span></span><br><span class="line">    tplt = <span class="string">&quot;&#123;:4&#125;\t&#123;:8&#125;\t&#123;:16&#125;&quot;</span></span><br><span class="line">    print(tplt.<span class="built_in">format</span>(<span class="string">&quot;序号&quot;</span>, <span class="string">&quot;价格&quot;</span>, <span class="string">&quot;名称&quot;</span>))</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> ilt:</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        print(tplt.<span class="built_in">format</span>(count, g[<span class="number">0</span>], g[<span class="number">1</span>]))</span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    pages = <span class="built_in">input</span>(<span class="string">&quot;请输入要爬取的页数 &quot;</span>)</span><br><span class="line">    goods = <span class="string">&#x27;手机&#x27;</span></span><br><span class="line">    depth = <span class="built_in">eval</span>(pages)</span><br><span class="line">    timeID = <span class="string">&#x27;%.5f&#x27;</span> % time.time()  <span class="comment"># 时间戳保留后五位</span></span><br><span class="line">    <span class="comment"># print(timeID)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(depth):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(<span class="string">&quot;以下是第 ------ %d ------ 页数据&quot;</span> % (i + <span class="number">1</span>))</span><br><span class="line">            info_list = []</span><br><span class="line">            url = <span class="string">&#x27;https://search.jd.com/Search?keyword=&#x27;</span> + goods + <span class="string">&#x27;&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;wq=&#x27;</span> + goods + <span class="string">&#x27;&amp;cid2=653&amp;cid3=655&amp;page=&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">                (i + <span class="number">1</span>) * <span class="number">2</span> - <span class="number">1</span>) + <span class="string">&#x27;&amp;click=0&#x27;</span>  <span class="comment"># 此处注意 应该给i加1，注意细节</span></span><br><span class="line">            html = getHTMLText(url)</span><br><span class="line">            parsePage(info_list, html)</span><br><span class="line">            url = <span class="string">&#x27;https://search.jd.com/s_new.php?keyword=&#x27;</span> + goods + <span class="string">&#x27;&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;wq=&#x27;</span> + goods + <span class="string">&#x27;&amp;cid2=653&amp;cid3=655&amp;page=&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">                (i + <span class="number">1</span>) * <span class="number">2</span>) + <span class="string">&#x27;&amp;scrolling=y&amp;log_id=&#x27;</span> + <span class="built_in">str</span>(timeID) + <span class="string">&#x27;&amp;tpl=3_M&#x27;</span></span><br><span class="line">            html = getHTMLText(url)</span><br><span class="line">            parsePage(info_list, html)</span><br><span class="line">            printGoodList(info_list)</span><br><span class="line">            time.sleep(<span class="number">1</span>)  <span class="comment"># 提升视觉效果</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p style="font-size:20px;font-weight:800;">遇到的问题：</p><ul><li><strong>cookie 登录</strong></li></ul><p>在淘宝爬取中已经讲过了，爬取京东需要登录自己的账户，然后将对应的 cookie 信息添加在 headers 里面。<br>详情请见…<a href="../posts/8f666c53/">定向爬取淘宝商品</a></p><ul><li><strong>二次请求</strong></li></ul><p>京东不像淘宝，你进入之后，就给你这一页的所有信息，而是在你下拉的时候，它悄悄地做了第二次请求。对比如下图：</p><p><img src="第一次请求.png" style="width:700px;" alt="第一次请求"></img><br><img src="第二次请求.png" style="width:700px;" alt="第二次请求"></img></p><p>所以我们需要将第二次请求的 url 链接也拿出来做对比，这次多了时间戳。</p><p>需要引入 time 库，生成时间戳加在链接里面既可。</p><ul><li><strong>来源检查</strong></li></ul><p>同样第二次请求做了一次来源检查，需要在 headers 里面加入 referer，机智：=￣ ω ￣=</p><ul><li><strong>没有问题</strong></li></ul><p>for 循环是从 0 开始，请不要大意(PS:丢人的说)</p><ul><li><strong>特殊情况</strong></li></ul><p>有个别数据有特殊情况，获得的 html 并没有 text 数据，而是在元素中自定义属性 data-price，所以，对特殊情况做判断，然后替换数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (price == &#x27;￥&#x27;):  # 特殊情况，特殊处理</span><br><span class="line">  price = <span class="string">&#x27;￥&#x27;</span> + priceInfo[i].find(<span class="string">&#x27;strong&#x27;</span>)[<span class="string">&#x27;data-price&#x27;</span>]</span><br></pre></td></tr></table></figure><ul><li><strong>循环长度</strong></li></ul><p>要注意循环长度不同带来的问题，在打印 name 的部分，我开始时候考虑的是不需要打印那么长的数据，所以对数据做了分割，然后拼接，拼接长度由变量决定，这样可以随时修改，但我固定为显示前三个的时候，在第六、七页之后，打印的数据开始丢失，html 数据没问题。后来经过测验发现，所有的数据并不是长度一致的，这就导致，如果使用了固定长度，会报错，然后 emmm 就 gg 了。</p><p>这些细节也是要注意的，共勉～～</p><p>有问题请在评论区留言，我会及时回复(๑• . •๑)</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式-单例模式</title>
      <link href="/posts/b7fbd3ad/"/>
      <url>/posts/b7fbd3ad/</url>
      
        <content type="html"><![CDATA[<p style="font-size:20px;font-weight:800;">单例模式(Singleton)</p><blockquote><p><strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</strong></p></blockquote><p>单例模式是一种常用的模式，有一些对象我们往往只需要一个，比如线程池、全局缓存、浏览器重的 window 对象等。在 javaScript 开发中，单例模式的用途同样非常广泛。试想一下，当我们单击登陆按钮的时候，页面中会出现一个登录浮窗，而这个登录浮窗是唯一的，无论单击多少次登录按钮，这个浮窗都只会被创建一次，那么这个登录浮窗就适合用单例模式来创建。</p><a id="more"></a><h3 id="实现单例模式"><a href="#实现单例模式" class="headerlink" title="实现单例模式"></a>实现单例模式</h3><p>简单说：单例就是保证一个类只有一个实例，实现方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。在 JavaScript 里，单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。</p><p>要实现一个标准的单例模式并不复杂，只需要用一个变量来标志当前是否已经为某个类创建了这个单例对象，如果是，则在下一次获取实例时，直接返回之前创建的对象。</p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.instance = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line">Singleton.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.instance) &#123;</span><br><span class="line">    <span class="built_in">this</span>.instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.instance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = Singleton.getInstance(<span class="string">&quot;sven1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b = Singleton.getInstance(<span class="string">&quot;sven2&quot;</span>);</span><br><span class="line"></span><br><span class="line">alert(a === b); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>或者如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line">Singleton.getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = Singleton.getInstance(<span class="string">&quot;sven1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b = Singleton.getInstance(<span class="string">&quot;sven2&quot;</span>);</span><br><span class="line"></span><br><span class="line">alert(a === b); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>通过 Singleton.getInstance 来获取 Singleton 类的唯一对象，这种方式理解起来很简单，但是<strong>增加了这个类的“不透明性”</strong>，Singleton 类的使用者必须知道这是一个单例类，跟以往通过 new XXX 的方式来获取对象不同，这里偏要使用 Singleton.getInstance 来获取对象。</p><p>虽然现在完成了一个单例模式的编写，但是这段代码的意义不大。</p><h3 id="透明的单例模式"><a href="#透明的单例模式" class="headerlink" title="透明的单例模式"></a>透明的单例模式</h3><p>接下来实现一个“透明”的单例类，用户从这个类中创建对象的时候，可以像使用其他普通类一样，在下面的例子中，我们将使用 CreateDiv 单例类，它的作用是负责在页面中创建唯一的 div 节点，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance;</span><br><span class="line">  <span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.html = html;</span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line">    <span class="keyword">return</span> (instance = <span class="built_in">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    div.innerHTML = <span class="built_in">this</span>.html;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> CreateDiv;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> CreateDiv(<span class="string">&quot;sven1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> CreateDiv(<span class="string">&quot;sven2&quot;</span>);</span><br><span class="line"></span><br><span class="line">alert(a === b); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>现在我们完成了一个透明的单例类的编写，但是它同样有缺点。</p><p>为了吧 instance 封装起来，我们使用了自执行的匿名函数和闭包，并且让这个匿名函数返回真正的 Singleton 构造方法，这增加了一些程序的复杂度，阅读起来也不是很舒服。</p><p>观察我们现在的 Singleton 构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.html = html;</span><br><span class="line">  <span class="built_in">this</span>.init();</span><br><span class="line">  <span class="keyword">return</span> (instance = <span class="built_in">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这段代码中，CreateDiv 的构造函数实际上负责了两件事情，一是创建对象和执行初始化 init 方法，二是保证只有一个对象。按照“单一职责原则”的概念，这是一种不好的做法。</p><p>假设：我们某天需要利用这个类，在页面中创建千千万万个 div，即要让这个类从单例类变成一个普通的可产生多个实例的类，那我们必须得改写 CreateDiv 这个构造函数，把控制创建唯一对象的那一段去掉。很愁。</p><h3 id="用代理实现单例模式"><a href="#用代理实现单例模式" class="headerlink" title="用代理实现单例模式"></a>用代理实现单例模式</h3><p>所以我们引入代理类的方式，来解决上面的问题。</p><p>在 CreateDiv 构造函数中，把负责管理单例的代码移除出去，使它成为一个普通的创建 div 的类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.html = html;</span><br><span class="line">  <span class="built_in">this</span>.init();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  div.innerHTML = <span class="built_in">this</span>.html;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来引入代理类：proxySingletonCreateDiv</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ProxySingletonCreateDiv = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> CreateDiv(html);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> ProxySingletonCreateDiv(<span class="string">&quot;sven1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> ProxySingletonCreateDiv(<span class="string">&quot;sven2&quot;</span>);</span><br><span class="line"></span><br><span class="line">alert(a == b); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>通过引入代理类的方式，我们同样完成了一个单例模式的编写，跟之前不同的是，现在我们把负责管理单例的逻辑移到了代理类 proxySingletonCreateDiv 中。这样一来，CreateDiv 就变成了一个普通的类，它跟 proxySingletonCreateDiv 组合起来可以实现单例模式的效果。</p><p>本例子是 <strong>缓存代理</strong> 的应用之一。</p><h3 id="JavaScript-中的单例模式"><a href="#JavaScript-中的单例模式" class="headerlink" title="JavaScript 中的单例模式"></a>JavaScript 中的单例模式</h3><p>前面提到的单例模式，更接近传统的面向对象语言的实现，单例对象从“类”中创建而来。在以类为中心的语言中，这是很自然的做法。比如 Java 中，如果需要某个对象，就必须先定义一个类，对象总是从类中创建出来的。</p><p>但是 JavaScript 其实是一门 <strong>无类(class-free)</strong> 语言，正因如此，生搬单例模式的概念并无意义。在 JS 中创建对象的方法其实非常简单，既然我们只需要一个“唯一”的对象，为什么要为它先创建一个类呢？传统单例模式的实现方式在 JS 中并不适用。</p><p>单例模式的核心：<strong>确保只有一个实例，并提供全局访问</strong>。</p><p>全局变量不是单例模式，但是在 JS 中，我们经常把全局变量当成单例来使用，比如：</p><blockquote><p>var a = {};</p></blockquote><p>当使用这种方法创建对象 a 时，对象 a 确实是独一无二的，并且也可以通过全局来访问。但是！！！全局变量存在很多问题。很容易造成命名空间污染。容易不小心被覆盖。</p><p>作为开发者，我们有必要减少全局变量的使用，即使需要，也要把它的污染降到最低。以下几种方法可以相对降低全局变量带来的命名污染。</p><h4 id="使用命名空间"><a href="#使用命名空间" class="headerlink" title="使用命名空间"></a>使用命名空间</h4><p>适当的使用命名空间，并不会杜绝全局变量，但可以减少全局变量的数量。<br>最简单的方法依然是用对象字面量的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> namespace1 = &#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>把 a 和 b 都定义为 namespace1 的属性，这样可以减少变量和全局作用域打交道的机会。另外我们还可以动态的创建命名空间，代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyApp = &#123;&#125;;</span><br><span class="line">MyApp.namespace = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parts = name.split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> current = MyApp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> parts) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!current[parts[i]]) &#123;</span><br><span class="line">      current[parts[i]] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    current = current[parts[i]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">MyApp.namespace(<span class="string">&quot;event&quot;</span>);</span><br><span class="line">MyApp.namespace(<span class="string">&quot;dom.style&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(MyApp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//上述代码等价于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MyApp = &#123;</span><br><span class="line">  event: &#123;&#125;,</span><br><span class="line">  dom: &#123;</span><br><span class="line">    style: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="使用闭包封装私有变量"><a href="#使用闭包封装私有变量" class="headerlink" title="使用闭包封装私有变量"></a>使用闭包封装私有变量</h4><p>这种方法把一些变量封装在闭包的内部，只暴露一些接口跟外界通信：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> __name = <span class="string">&quot;sven&quot;</span>,</span><br><span class="line">    __age = <span class="number">29</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getUserInfo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> __name + <span class="string">&quot;-&quot;</span> + __age;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>我们用下划线来约定私有变量__name 和__age，它们被封装在闭包产生的作用域中，外部是访问不到这两个变量的，这就避免了对全局的命令污染。</p><h3 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h3><p>惰性单例指的是在需要的时候才创建对象实例。<strong>惰性单例是单例模式的重点</strong>，这种技术在实际开发中非常有用，有用的程度可能超出我们想象。</p><p>假设我们是 WebQQ 的开发人员，当我们再点击头像时，会弹出登录浮窗，很明显这个浮窗在页面里总是唯一的，不可能同时出现两个登录窗口的情况。</p><p>第一种解决方案是在页面加载完之后便创建好了这个 div 浮窗，这个浮窗一开始肯定是隐藏状态的，当用户点击登录按钮，将它显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;loginBtn&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> loginLayer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">      div.innerHTML = <span class="string">&quot;我是登录浮窗&quot;</span>;</span></span><br><span class="line"><span class="javascript">      div.style.display = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.body.appendChild(div);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> div;</span></span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;loginBtn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      loginLayer.style.display = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方法有一个问题，会浪费 DOM 节点，因为可能用户本身并不准备登录。</p><p>现在改写为，在用户点击按钮时才开始创建浮窗：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;loginBtn&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">      div.innerHTML = <span class="string">&quot;我是登录浮窗&quot;</span>;</span></span><br><span class="line"><span class="javascript">      div.style.display = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.body.appendChild(div);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> div;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;loginBtn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> loginLayer = createLoginLayer();</span></span><br><span class="line"><span class="javascript">      loginLayer.style.display = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在实现了惰性的目的，但是失去了单例的效果。当我们再次点击登录按钮的时候，都会创建一个新的登录浮窗 div。虽然我们可以添加一些删除浮窗的功能，但是这样显然是不合理的，也是不必要的。</p><p>首相想到的就是通过一个变量来判断是否已经创建过登录浮窗，这也是文章最开始代码的做法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!div) &#123;</span><br><span class="line">      div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      div.innerHTML = <span class="string">&quot;我是登录浮窗&quot;</span>;</span><br><span class="line">      div.style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;loginBtn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> loginLayer = createLoginLayer();</span><br><span class="line">    loginLayer.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="通用的惰性单例"><a href="#通用的惰性单例" class="headerlink" title="通用的惰性单例"></a>通用的惰性单例</h3><p>同样上一段代码有如下问题：</p><ul><li>还是违反了“单一职能原则”，创建对象和管理单例的逻辑都放在了 createLoginLayer 对象内部</li><li>如果我们下次需要创建页面唯一的 iframe，活着 script 标签，用来跨域请求数据，就要几乎把 createLoginLayer 函数再抄一遍。</li></ul><p>所以我们需要把不变的部分隔离出来，先不考虑创建一个 div 和创建一个 iframe 有多少差异，管理单例的逻辑其实是完全可以抽象出来的，这个逻辑始终是一样的：用一个变量来标识是否创建过对象，如果是的话，下一次直接返回这个已经创建好的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj;</span><br><span class="line"><span class="keyword">if</span> (!obj) &#123;</span><br><span class="line">  obj = xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们就把如何管理单例的逻辑从原来的代码中抽离出来，这些逻辑被封装在 getSingle 函数内部，创建对象的方法 fn 被当成参数动态传入 getSingle 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> result || (result = fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来将用于创建登录浮窗的方法用参数 fn 的形式传入 getSingle，我们不仅可以传入 createLoginLayer，还能传入 createScript、createIframe、、createXhr 等。之后再让 getSingle 返回一个新的函数，并且用一个变量 result 来保存 fn 的计算结果。result 变量因为身在闭包中，它永远不会被销毁。在将来的请求中，如果 result 已经被赋值，那么它将返回这个值。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  div.innerHTML = <span class="string">&quot;我是登录浮窗&quot;</span>;</span><br><span class="line">  div.style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  <span class="keyword">return</span> div;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingleLoginLayer = getSingle(createLoginLayer);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;loginBtn&quot;</span>).onclik = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginLayer = createSingleLoginLayer();</span><br><span class="line">  loginLayer.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来我们再尝试创建唯一的 iframe 用于动态加载第三方页面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createSingleIframe = getSingle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">&quot;iframe&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">  <span class="keyword">return</span> iframe;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;loginBtn&#x27;</span>).onclick = <span class="function"><span class="title">funtion</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginLayer = createSingleIframe();</span><br><span class="line">  loginLayer.src = <span class="string">&#x27;http://baidu.com&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们把创建实例对象的职责和管理单例的职责分别放置在两个方法里，这两个方法可以独立变化而互不影响，当它们连接在一起的时候，就完成了创建唯一实例对象的功能。</p><p>这种单例模式的应用远不止创建对象，比如我们通常渲染完页面重的一个列表之后，接下来要给这个列表绑定 click 事件，如果是通过 ajax 动态往列表里面添加数据，在使用时间代理的前提下，click 事件实际上只需要在第一次渲染时被绑定一次，但是我们不想去判断当前是否是第一次渲染列表，如果借助于 jQuery，我们通常会选择给节点绑定 one 事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bindEvent = <span class="function"><span class="keyword">function</span>)(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">&#x27;div&#x27;</span>).one(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;开始渲染列表&#x27;</span>);</span><br><span class="line">  bindEvent();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">render();</span><br><span class="line">render();</span><br><span class="line">render();</span><br></pre></td></tr></table></figure><p>同样使用 getSingle 函数，也能达到一样的效果。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bindEvent = getSingle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;div&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;开始渲染列表&quot;</span>);</span><br><span class="line">  bindEvent();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">render();</span><br><span class="line">render();</span><br><span class="line">render();</span><br></pre></td></tr></table></figure><p>可以看到，render 函数和 bindEvent 函数都分别执行了 3 次，但 div 实际上只被绑定了一个事件。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>单例模式是我们学习的第一个模式，我们先学习了传统的单例模式实现，也了解到因为语言的差异性，在 JS 中有着更合适的方法去创建单例。单例模式是一种简单但非常实用的模式，特别是惰性单例技术，在合适的时候才创建对象，并且只创建唯一的一个。更奇妙的是，创建对象和管理单例的职责被分布在两个不同的方法中，这两个方法组合起来才具有单例模式的威力。</p><p>参考书籍：《JavaScript 设计模式与开发实战》</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式-this</title>
      <link href="/posts/c3f573ea/"/>
      <url>/posts/c3f573ea/</url>
      
        <content type="html"><![CDATA[<p style="font-size:20px;font-weight:800;">JavaScript的this</p><p>在 JS 中，this 的调用完全取决于函数调用时的上下文，而不是像 Java 一样，this 在声明的时候确定。JS 中 this 的指向大概能分为 4 种情况，分别是：</p><ol><li>作为对象的方法调用</li><li>作为普通函数的调用</li><li>Function.prototype.call 或 Function.prototype.apply</li></ol><a id="more"></a><h2 id="作为方法"><a href="#作为方法" class="headerlink" title="作为方法"></a>作为方法</h2><p>如果作为对象的方法调用，this 是指向该对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  objName:<span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">objThis</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.objName);</span><br><span class="line">  &#125;</span><br><span class="line">  obj.objThis();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象 obj 里面的方法 objThis 中的 this 是指向 obj 对象本身。</p><h2 id="作为函数"><a href="#作为函数" class="headerlink" title="作为函数"></a>作为函数</h2><p>作为普通函数调用，this 指向全局对象也就是 window 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objName = <span class="string">&quot;window&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objThis</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.objName);</span><br><span class="line">&#125;</span><br><span class="line">objThis(); <span class="comment">// window</span></span><br></pre></td></tr></table></figure><p>此处的 this 默认指向全局 window，其实这种情况也可以理解为作为对象方法的一种特例：这里的对象是全局对象 window，objThis 这个方法是在 window 上调用的，那么 this 自然也就是 window 了。</p><h2 id="作为构造函数"><a href="#作为构造函数" class="headerlink" title="作为构造函数"></a>作为构造函数</h2><p>构造器调用，this 指向实例化对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fruit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> apple = <span class="keyword">new</span> Fruit();</span><br><span class="line"><span class="keyword">var</span> orange = <span class="keyword">new</span> Fruit();</span><br><span class="line">apple.func() === apple; <span class="comment">//true</span></span><br><span class="line">orange.func() === orange; <span class="comment">// ture</span></span><br></pre></td></tr></table></figure><p>创建了一个空对象，将这个空对象作为 this 传给这个构造函数(每一个函数被调用时，都隐式的传入一个 this)，如果没有显示的返回值，新创建的这个对象，就会作为构造函数的返回值进行返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 类调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">str, number</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.str = str;</span><br><span class="line">    <span class="built_in">this</span>.number = number;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">num</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.str, <span class="built_in">this</span>.number, <span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类实例</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> Obj(<span class="string">&quot;hello&quot;</span>, <span class="number">123</span>);</span><br><span class="line">obj.num();</span><br></pre></td></tr></table></figure><p>此处 this 输出的是类的实例对象，周遭函数或者类中的 this 指向自身实例</p><p><strong>总结</strong></p><blockquote><p>在谁中使用 this，this 指向谁。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS设计模式-面向对象的JS</title>
      <link href="/posts/f907e6c1/"/>
      <url>/posts/f907e6c1/</url>
      
        <content type="html"><![CDATA[<p style="font-size:20px;font-weight:800;">面向对象的JavaScript</p><p>JavaScript 没有提供传统面向对象语言中的类式继承，而是通过原型委托的方式来实现对象与对象之间的继承。JavaScript 也没有在语言层面提供对抽象类和接口的支持。正因为存在这些跟传统面向对象语言不一致的地方，我们在用设计模式编写代码的时候，要跟传统面向对象语言加以区别。所以在学习设计模式之前，我们需要对 JavaScript 在面向对象方面的认识。</p><a id="more"></a><h2 id="动态类型语言和鸭子类型"><a href="#动态类型语言和鸭子类型" class="headerlink" title="动态类型语言和鸭子类型"></a>动态类型语言和鸭子类型</h2><h3 id="动态类型语言"><a href="#动态类型语言" class="headerlink" title="动态类型语言"></a>动态类型语言</h3><p>编程语言按照数据类型大体可以分为两类，一类是 <strong>静态类型语言</strong> ，另一类式 <strong>动态类型语言</strong> 。</p><p>静态类型语言在编译时便已经确定变量的类型，而动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值之后，才会具有某种类型。</p><p>静态类型语言的优点：</p><ul><li>在编译的时候就能发现类型不匹配的作物，编辑器可以帮助我们提前避免程序在运行期间有可能发生的一些错误。</li><li>如果在程序中明确的规定了数据类型，编译器还可以针对这些信息对程序进行一些优化工作，提高程序的执行速度。</li></ul><p>静态类型语言的缺点：</p><ul><li>迫使程序员依照强契约来编写程序，为每个变量规定数据类型，归根结底知识辅助我们编写可靠性高的程序的一种手段，而不是编写程序的目的。毕竟大部分人写程序的目的是为了完成需求，交付工作。</li><li>类型的声明也会增加更多的代码，在程序编写过程中，这些细节会让程序员的精力从思考业务逻辑上分散开来。</li></ul><p>动态类型语言的优点：</p><ul><li>编写的代码数量更少，看起来也更加简洁，程序员可以把精力更多的放在业务逻辑上面。虽然不区分类型在某些情况会让程序变得难以理解，但整体而言，代码量越少，越专注于逻辑表达，对阅读程序越是有帮助。</li></ul><p>动态类型语言的缺点：</p><ul><li>无法保证变量的类型，从而在程序的运行期有可能发生跟类型相关的错误。</li></ul><blockquote><p>JS 是一门动态类型语言。动态类型语言对变量的宽容给实际编码带来了很大的灵活性。由于无需进行类型检测，我们可以尝试调用任何对象的任意方法，而无需去考虑它原本是否被设计为拥有该方法。</p></blockquote><h3 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h3><p>通俗说法：“如果它走起路来像鸭子，叫起来也是鸭子，那么它就是鸭子。”</p><p>鸭子类型指导我们只关注对象的行为，不关注对象本身，也就是关注 HSA-A，而不是 IS-A。</p><p>在动态类型语言的面向对象设计中，鸭子类型的概念至关重要。利用鸭子类型的思想，我们不必借助超类型的帮助，就能轻松地在动态类型语言中实现一个<strong>原则：“面向接口编程，而不是面向实现编程。”</strong>例如，一个对象又 push 和 pop 方法，并且这些方法提供了正确的实现，它就可以被当作栈来使用。一个对象如果又 length 属性，也可以依照下标来存取属性(最好还要拥有 slice 和 splice 等方法)，这个对象就可以被当作数组来使用。</p><p>在静态类型语言中，要实现“面向接口编程”并不是一件容易的事情，往往要通过抽象类活着接口等将对象进行向上转型。当对象的真正类型被隐藏在它的超类型身后，这些对象才能在类型检查系统的“监视”下互相替换。只有当对象能够被相互替换使用时，才能体现出对象的多态性的价值。</p><p>“面向接口编程”是设计模式中最重要的思想，但是在 JS 语言中，“面向接口编程”的过程跟主流的静态语言不一样，因此，在 JS 中实现设计模式的过程与一些我们熟悉的语言中的实现可能大相径庭。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>“多态”的实际含义：同一操作作用与不同的对象上面，可以产生不同的解释和不同的执行结果。就是说，给不同的对象发送同一个消息，这些对象会根据这个消息分别给出不同的反馈。</p><h3 id="例举一段代码："><a href="#例举一段代码：" class="headerlink" title="例举一段代码："></a>例举一段代码：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> makeSound = <span class="function"><span class="keyword">function</span>(<span class="params">animal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Duck) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;嘎嘎嘎&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Chicken) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;咯咯咯&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Duck = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> Chicken = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">makeSound(<span class="keyword">new</span> Duck()); <span class="comment">// 嘎嘎嘎</span></span><br><span class="line">makeSound(<span class="keyword">new</span> Chicken()); <span class="comment">// 咯咯咯</span></span><br></pre></td></tr></table></figure><p>上面这段代码体现了“多态性”，当我们分别向鸡和鸭发出“叫”的指令，他们根据自身作出不同的反应。但是这样的多态性显然无法让人满意，比如我们要加入狗，那就需要加入“汪汪汪”。修改代码总是危险的，修改的地方越多，程序出错的可能性越大，而且如果动物非常多，makeSound 会变成一个非常大的函数。</p><blockquote><p>多态背后的思想是将“做什么”和“谁去做以及怎么样做”分离开来，也就是将“不变的事物”与“可能改变的事物”分离开来。<br>把不变的部分隔离出来，把可变的部分封装起来，这给予了我们扩展程序的能力，程序看起来是可生长的，也是符合“开放-封闭原则”的，相对于修改代码来说，仅仅增加代码就能完成一样的功能，看起来优雅的多。</p></blockquote><h3 id="对象的多态性"><a href="#对象的多态性" class="headerlink" title="对象的多态性"></a>对象的多态性</h3><p>改写代码，我们把不变的部分隔离出来，就是所有的动物都会发出叫声：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> makeSound = <span class="function"><span class="keyword">function</span>(<span class="params">animal</span>) </span>&#123;</span><br><span class="line">  animal.sound();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后把各自可变的东西各自封装，我们刚才谈到的多态性实际上指的是对象的多态性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Duck = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Duck.prototype.sound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;嘎嘎嘎&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Chicken = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Chicken.prototype.sound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;咯咯咯&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">makeSound(<span class="keyword">new</span> Duck()); <span class="comment">// 嘎嘎嘎</span></span><br><span class="line">makeSound(<span class="keyword">new</span> Chicken()); <span class="comment">// 咯咯咯</span></span><br></pre></td></tr></table></figure><p>现在我们如果在这个世界中加入了狗，那么只要追加狗的代码就可以了，而不用改动之前的代码 makeSound 函数，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Dog = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Dog.prototype.sound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;汪汪汪&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">makeSound(<span class="keyword">new</span> Dog()); <span class="comment">// 汪汪汪</span></span><br></pre></td></tr></table></figure><h3 id="JS-的多态"><a href="#JS-的多态" class="headerlink" title="JS 的多态"></a>JS 的多态</h3><p>多态的思想是把“做什么”和“谁去做”分离开来，要实现这一点，归根结底要先消除类型之间的耦合关系。如果类型之间的耦合关系没有消除，那么我们在 makeSound 方法中指定了发出叫声的对象是某个类型，它就不可能再被替换为另外一个类型。</p><p>一个 JS 对象，既可以表示 Duck 类型的对象，又可以表示 Chicken 类型的对象，这意味着 JS 对象的多态性是与生俱来的。</p><p>JavaScript 作为一门动态类型语言，它在编译时没有类型检查的过程，既没有检查创建的对象类型，有没有检查传递的参数类型。我们既可以往 makeSound 函数里传递 duck 对象当作参数，也可以传递 chicken 对象当参数。</p><p>由此可见，一个动物是否可以发声，取决于是否有 makeSound 方法，而不是取决于它是否是某种类型的对象，这里不存在任何程度上的“类型耦合”。在 JS 中，并不需要诸如向上转型之类的技术来取得多态的效果。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装的目的是将信息隐藏。一般来说，我们讨论的封装是封装数据和封装实现。这里我们还将讨论封装类型和封装变化。</p><h3 id="封装数据"><a href="#封装数据" class="headerlink" title="封装数据"></a>封装数据</h3><p>在许多语言的对象系统中，封装数据是由语法解析来实现的，这些语言也许提供了 private、public、protected 等关键字来提供不同的访问权限。</p><p>但 JS 中没有提供这些关键字，我们只能依赖变量的作用域来实现封装特性，而且只能模拟出 public 和 private 这两种封装性。</p><p>除了 ES6 中提供了 let 之外，我们一般通过函数来创建作用域：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> __name = <span class="string">&quot;sven&quot;</span>; <span class="comment">// 私有(private)变量</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 公开(public)变量</span></span><br><span class="line">      <span class="keyword">return</span> __name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObject.getName()); <span class="comment">//输出：sven</span></span><br><span class="line"><span class="built_in">console</span>.log(myObject.__name); <span class="comment">//输出：undefined</span></span><br></pre></td></tr></table></figure><p>另外：在 ES6 中，还可以通过 Symbol 创建私有属性。</p><h3 id="封装实现"><a href="#封装实现" class="headerlink" title="封装实现"></a>封装实现</h3><p>以上描述的封装，指的是数据层面的封装。有时候我们喜欢把封装等同于封装数据，但是这是一种比较狭义的定义。</p><p>封装的目的是隐藏，封装应该被视为：“任何形式的封装”，也就是说，封装不仅仅隐藏数据，还包括隐藏实现细节、设计细节以及隐藏对象的类型等。</p><p>从封装实现细节来讲，<strong>封装使得对象内部的变化对其他对象而言是透明的，也就是不可见的。</strong>对象对它自己的行为负责。其他对象或者用户都不关心它内部的实现。封装使得对象之间的耦合变得松散，对象之间只通过暴露的 API 接口来通信。当我们修改一个对象时，可以随意地修改它的内部实现，只要对外的接口没有变化，就不会影响到程序的其他功能</p><h3 id="封装类型"><a href="#封装类型" class="headerlink" title="封装类型"></a>封装类型</h3><p>封装类型时静态类型语言中一种重要的封装方式。一般而言，封装类型是通过抽象类和接口来进行的。把对象的真正类型隐藏在抽象类或者接口之后，相比对象的类型，客户更关心对象的行为。在许多静态语言的设计模式中，想法设法地去隐藏对象的类型，也是促使这些模式诞生的原因之一。比如工厂方法模式、组合模式等。</p><p>当然在 JS 中，没有对抽象类和接口的支持。JS 本身也是一门类型模糊的语言。在封装类型方面，JS 没有能力也没有必要做那么多。</p><h3 id="封装变化"><a href="#封装变化" class="headerlink" title="封装变化"></a>封装变化</h3><p>从设计模式的角度出发，封装在更重要的层面体现为封装变化。</p><p>《设计模式》中曾提到：</p><blockquote><p>“考虑你的设计中那些地方可能变化，这种方式与关注会导致重新设计的原因相反。它不是考虑什么时候会迫使你的设计改变，而是考虑你怎么样才能够在不重新设计的情况下进行改变。这里的关键在于封装发生变化的概念，这是许多设计模式的主题。”</p></blockquote><p>《设计模式》一书总共归纳了 23 种设计模式，从意图上区分，这 23 种设计模式可以分为：创建型模式、结构型模式和行为型模式。</p><p>拿创建型模式来说，要创建一个对象，是一种抽象行为，而具体创建什么对象则是可以变化的，创建型模式的目的就是封装创建对象的变化。而结构型模式封装的是对象之间的组合关系。行为型模式封装的是对象的行为变化。</p><p>通过封装变化的方式，把系统中稳定不变的部分和容易变化的部分隔离开来，在系统的演变过程中，我们只需要替换那些容易变化的部分，如果这些部分是已经封装好的，替换起来也相对容易。这可以最大程度地保证程序的稳定性和可扩展性。</p><p>从《设计模式》副标题“可复用面向对象软件的基础”可以知道，这本书理应教我们如何编写可复用的面向对象程序。这本书把大多数笔墨都放在如何封装变化上面，这跟编写可复用的面向对象程序是不矛盾的。当我们想办法把程序中变化的部分封装好之后，剩下的即是稳定而可复用的部分。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript入门</title>
      <link href="/posts/70ab9b93/"/>
      <url>/posts/70ab9b93/</url>
      
        <content type="html"><![CDATA[<h2 id="TypeScript-入门"><a href="#TypeScript-入门" class="headerlink" title="TypeScript 入门"></a>TypeScript 入门</h2><h3 id="内容介绍"><a href="#内容介绍" class="headerlink" title="内容介绍"></a>内容介绍</h3><ul><li>学习 TypeScript 的好处</li><li>TypeScript 概念，语法和特性</li></ul><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><ul><li>需要理解 ES5，ES6，JavaScript，TypeScript 的概念和关系<ul><li>ES:是 JavaScript 语言的规范，ES5，ES6 是这个规范的两种版本</li><li>JS 和 TS 是两种客户端脚本语言，JS 是 ES5，TS 是 ES6 规范</li></ul></li><li>需要有一定 JS 开发经验<ul><li>程序控制，变量声明等</li></ul></li></ul><a id="more"></a><h3 id="TypeScript-的优势"><a href="#TypeScript-的优势" class="headerlink" title="TypeScript 的优势"></a>TypeScript 的优势</h3><ul><li>支持 ES6 规范</li><li>强大的 IDE 支持<ul><li>类型检查：减少犯错数量</li><li>语法提示：提高开发效率</li><li>重构：自动修改引用的变量名称</li></ul></li><li>Angular 框架支持</li></ul><h3 id="TypeScript-Complier"><a href="#TypeScript-Complier" class="headerlink" title="TypeScript Complier"></a>TypeScript Complier</h3><ul><li>在线 Complier</li><li>本地 Complier<ul><li>下载 typescript: npm install -g typescript</li><li>编译 ts 到 js: tsc 文件名</li><li>WebStorm 集成功能</li></ul></li></ul><h2 id="TypeScript-字符串新特性"><a href="#TypeScript-字符串新特性" class="headerlink" title="TypeScript - 字符串新特性"></a>TypeScript - 字符串新特性</h2><h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="- 多行字符串"></a>- 多行字符串</h3><p>用``号来包括字符串，在``号中的字符串可以换行</p><h3 id="字符串模版"><a href="#字符串模版" class="headerlink" title="- 字符串模版"></a>- 字符串模版</h3><p>在多行字符串中用表达式插入变量或者调用方法：</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myName = <span class="string">&quot;Xu Dongpo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Xu Dongpo&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;myName&#125;</span>`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;getName()&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>而且利用多行字符串开发字符串模版，可以提升开发速度以及可读性。</p><h3 id="自动拆分字符串"><a href="#自动拆分字符串" class="headerlink" title="- 自动拆分字符串"></a>- 自动拆分字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Xu Dongpo&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> code = <span class="string">&quot;9527&quot;</span>;</span><br><span class="line">test<span class="string">`hello my name is <span class="subst">$&#123;name&#125;</span>, my code is <span class="subst">$&#123;code&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span> (<span class="number">3</span>)</span><br><span class="line"><span class="number">0</span> <span class="string">&quot;hello my name is &quot;</span></span><br><span class="line"><span class="number">1</span> <span class="string">&quot;, my code is &quot;</span></span><br><span class="line"><span class="number">2</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">“<span class="built_in">Array</span>”原型</span><br><span class="line"><span class="string">&quot;Xu Dongpo&quot;</span></span><br></pre></td></tr></table></figure><h2 id="TypeScript-参数新特性"><a href="#TypeScript-参数新特性" class="headerlink" title="TypeScript - 参数新特性"></a>TypeScript - 参数新特性</h2><h3 id="参数新特性-类型"><a href="#参数新特性-类型" class="headerlink" title="参数新特性 - 类型"></a>参数新特性 - 类型</h3><h4 id="参数类型"><a href="#参数类型" class="headerlink" title="- 参数类型"></a>- 参数类型</h4><p>在参数的名称后面使用<strong>冒号</strong>来指定参数的类型（类型推断机制，来减少错误，可以用<strong>any</strong>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: string = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> code: any = <span class="number">13</span>; <span class="comment">// 什么类型都行</span></span><br><span class="line"><span class="keyword">let</span> tel: number = <span class="number">13</span>;</span><br><span class="line"><span class="keyword">let</span> tf: boolen = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name: string</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 不能return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义类型"><a href="#自定义类型" class="headerlink" title="- 自定义类型"></a>- 自定义类型</h4><p>允许自定义类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  name:string,</span><br><span class="line">  age:number,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person:Person = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>就会有语法提示，帮助提高开发效率</p><h3 id="参数新特性-默认值"><a href="#参数新特性-默认值" class="headerlink" title="参数新特性 - 默认值"></a>参数新特性 - 默认值</h3><h4 id="参数默认值"><a href="#参数默认值" class="headerlink" title="- 参数默认值"></a>- 参数默认值</h4><p>在参数的名称后面使用<strong>等号</strong>来指定参数的默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: string = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a: string, b: string, c: string = <span class="string">&quot;xudongpo&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br></pre></td></tr></table></figure><p>注意带默认值的参数要声明在最后面</p><h3 id="参数新特性-默认值可选参数"><a href="#参数新特性-默认值可选参数" class="headerlink" title="参数新特性 - 默认值可选参数"></a>参数新特性 - 默认值可选参数</h3><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="- 可选参数"></a>- 可选参数</h4><p>在参数的名称后面使用<strong>问号</strong>来指定参数为可选</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: string = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a: string, b?: string, c: string = <span class="string">&quot;xudongpo&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>当声明了可选参数时，需要在方法内部处理当可选参数没有传递时候的情况</li><li>可选参数必须声明在必选参数的后面</li></ul><h2 id="TypeScript-函数新特性"><a href="#TypeScript-函数新特性" class="headerlink" title="TypeScript - 函数新特性"></a>TypeScript - 函数新特性</h2><h3 id="函数新特性-Rest-and-Spread-操作符"><a href="#函数新特性-Rest-and-Spread-操作符" class="headerlink" title="函数新特性 - Rest and Spread 操作符"></a>函数新特性 - Rest and Spread 操作符</h3><h4 id="Rest-and-Spread-操作符（…）"><a href="#Rest-and-Spread-操作符（…）" class="headerlink" title="- Rest and Spread 操作符（…）"></a>- Rest and Spread 操作符（…）</h4><p>用来声明任意数量的方法参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">test(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h4 id="用法二"><a href="#用法二" class="headerlink" title="- 用法二"></a>- 用法二</h4><p>函数参数固定，变量长度不定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arg1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> arg2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">test(...arg1);</span><br><span class="line">test(...arg2);</span><br></pre></td></tr></table></figure><p>缺的空着，多的删掉</p><h3 id="函数新特性-generator-函数"><a href="#函数新特性-generator-函数" class="headerlink" title="函数新特性 - generator 函数"></a>函数新特性 - generator 函数</h3><h4 id="generator-函数"><a href="#generator-函数" class="headerlink" title="- generator 函数"></a>- generator 函数</h4><p>控制函数的执行过程，手工暂停和恢复代码执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">  <span class="keyword">yield</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;next&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun1 = doSomething();</span><br><span class="line">fun1.next();</span><br><span class="line">fun1.next();</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>函数必须由变量才可以使用</li><li>用.next()方法执行函数，到 yield 之前。</li></ul><h3 id="函数新特性-destructuring-析构表达式"><a href="#函数新特性-destructuring-析构表达式" class="headerlink" title="函数新特性 - destructuring 析构表达式"></a>函数新特性 - destructuring 析构表达式</h3><h4 id="析构表达式对象取值"><a href="#析构表达式对象取值" class="headerlink" title="- 析构表达式对象取值"></a>- 析构表达式对象取值</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="- 方法一"></a>- 方法一</h5><p>通过表达式讲对象或者数组拆解成任意数量的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStock</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    code: <span class="string">&quot;IBM&quot;</span>,</span><br><span class="line">    price: <span class="number">100</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; code, price &#125; = getStock(); <span class="comment">//注:取出的变量名和函数返回的要一样</span></span><br><span class="line"><span class="built_in">console</span>.log(code, price);</span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">code</span>: codex, price &#125; = getStock(); <span class="comment">//不一样的用法</span></span><br><span class="line"><span class="built_in">console</span>.log(codex, price);</span><br></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="- 方法二"></a>- 方法二</h5><p>通过表达式讲对象或者数组拆解成任意数量的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStock</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    code: <span class="string">&quot;IBM&quot;</span>,</span><br><span class="line">    price: &#123;</span><br><span class="line">      price1: <span class="number">100</span>,</span><br><span class="line">      price2: <span class="number">200</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    xixi: <span class="string">&quot;adfa&quot;</span>, <span class="comment">//不影响使用</span></span><br><span class="line">    haha: <span class="string">&quot;ababd&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  code: codex,</span><br><span class="line">  price: &#123; price2 &#125;</span><br><span class="line">&#125; = getStock(); <span class="comment">//不一样的用法</span></span><br><span class="line"><span class="built_in">console</span>.log(codex, price2);</span><br></pre></td></tr></table></figure><h4 id="析构表达式数组取值"><a href="#析构表达式数组取值" class="headerlink" title="- 析构表达式数组取值"></a>- 析构表达式数组取值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> [number1, number2] = array1;</span><br><span class="line"><span class="built_in">console</span>.log(number1, number2); <span class="comment">//1,2</span></span><br></pre></td></tr></table></figure><p>析构其他值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> [number1, number2, ...others] = array1;</span><br><span class="line"><span class="built_in">console</span>.log(number1, number2); <span class="comment">//1,2</span></span><br><span class="line"><span class="built_in">console</span>.log(others); <span class="comment">//[3,4]</span></span><br></pre></td></tr></table></figure><p>作为函数参数输入:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">[number1, number, ...others]</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(number1, number2); <span class="comment">//1,2</span></span><br><span class="line">  <span class="built_in">console</span>.log(others); <span class="comment">//[3,4]</span></span><br><span class="line">&#125;</span><br><span class="line">doSomething(array1);</span><br></pre></td></tr></table></figure><h2 id="TypeScript-表达与循环"><a href="#TypeScript-表达与循环" class="headerlink" title="TypeScript - 表达与循环"></a>TypeScript - 表达与循环</h2><h3 id="表达与循环-箭头表达式"><a href="#表达与循环-箭头表达式" class="headerlink" title="表达与循环 - 箭头表达式"></a>表达与循环 - 箭头表达式</h3><h4 id="箭头表达式"><a href="#箭头表达式" class="headerlink" title="- 箭头表达式"></a>- 箭头表达式</h4><p>用来声明匿名函数，消除传统匿名函数的 this 指针问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">arg1, arg2</span>) =&gt;</span> arg1 + arg2; <span class="comment">// 单行</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">arg1, arg2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 多行</span></span><br><span class="line">  <span class="keyword">return</span> arg1 + arg2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 无参数</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 一个参数</span></span><br><span class="line">  <span class="built_in">console</span>.log(arg);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>常见举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(myArray.filter(<span class="function"><span class="params">value</span> =&gt;</span> value % <span class="number">2</span> === <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStock</span>(<span class="params">name: string</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 传统方式</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;name is:&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">letstock = getStock(<span class="string">&quot;IBM&quot;</span>); <span class="comment">// 为空</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStock</span>(<span class="params">name: string</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 剪头函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;name is:&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> stock = getStock(<span class="string">&quot;IBM&quot;</span>); <span class="comment">// name is:IBM</span></span><br></pre></td></tr></table></figure><h3 id="表达与循环-for-of-循环"><a href="#表达与循环-for-of-循环" class="headerlink" title="表达与循环 - for-of 循环"></a>表达与循环 - for-of 循环</h3><h4 id="箭头表达式-1"><a href="#箭头表达式-1" class="headerlink" title="箭头表达式"></a>箭头表达式</h4><p>与 forEach()和 for in 做比较</p><p>forEach()：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">myArray.desc = <span class="string">&quot;this is a array&quot;</span>;</span><br><span class="line"></span><br><span class="line">myArray.forEach(<span class="function"><span class="params">valye</span> =&gt;</span> <span class="built_in">console</span>.log(value));</span><br><span class="line"><span class="comment">// 1,2,3,4</span></span><br></pre></td></tr></table></figure><p>for in：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">myArray.desc = <span class="string">&quot;this is a array&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a <span class="keyword">in</span> myArray) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125; <span class="comment">// 0,1,2,3,desc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a <span class="keyword">in</span> myArray) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myArray[a]);</span><br><span class="line">&#125; <span class="comment">// 1,2,3,4,&#x27;this is a array&#x27;</span></span><br></pre></td></tr></table></figure><p>for-of：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">myArray.desc = <span class="string">&quot;this is a array&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a <span class="keyword">of</span> myArray) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125; <span class="comment">// 1,2,3,4</span></span><br></pre></td></tr></table></figure><p>for-of 可以 break：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">myArray.desc = <span class="string">&quot;this is a array&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a <span class="keyword">of</span> myArray) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125; <span class="comment">// 1,2,3,4</span></span><br></pre></td></tr></table></figure><h2 id="TypeScript-面向对象特性"><a href="#TypeScript-面向对象特性" class="headerlink" title="TypeScript - 面向对象特性"></a>TypeScript - 面向对象特性</h2><h3 id="面向对象特性-类"><a href="#面向对象特性-类" class="headerlink" title="面向对象特性 - 类"></a>面向对象特性 - 类</h3><h4 id="类"><a href="#类" class="headerlink" title="- 类"></a>- 类</h4><p>类是 TypeScript 代码的核心，使用 TypeScript 开发时，大部分代码都是写在类里面的。</p><h5 id="类的定义"><a href="#类的定义" class="headerlink" title="- 类的定义"></a>- 类的定义</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  name;</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>私有(private)，公有(public)，默认为公有</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    private name;</span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// private 只能在类内部访问</span></span><br><span class="line"><span class="comment">// public  可以在外部访问</span></span><br></pre></td></tr></table></figure><p>受保护(protected)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    protected name;</span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;eat&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="类的构造函数"><a href="#类的构造函数" class="headerlink" title="- 类的构造函数"></a>- 类的构造函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//构造函数，只有在被实例化时调用一次。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;打印构造函数&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(); <span class="comment">//打印构造函数</span></span><br></pre></td></tr></table></figure><p>利用 constructor 使得在实例化时必须有参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/////方法一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    name;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:string</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/////方法二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">public name:string</span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;name&quot;</span>); <span class="comment">//必须传入参数</span></span><br></pre></td></tr></table></figure><h5 id="类的继承-extends"><a href="#类的继承-extends" class="headerlink" title="- 类的继承(extends)"></a>- 类的继承(extends)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">public name:string</span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>super 关键字：子类构造函数中必须调用父类的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">public name:string</span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;is eat&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:string,code:string</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">work</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.eat();</span><br><span class="line">        <span class="built_in">this</span>.doWork();</span><br><span class="line">    &#125;</span><br><span class="line">    private <span class="function"><span class="title">doWork</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《漫长的告别》读后感</title>
      <link href="/posts/98b5d150/"/>
      <url>/posts/98b5d150/</url>
      
        <content type="html"><![CDATA[<p>说一声再见，就是死去一点点。</p><p style="text-align: right">—— 钱德勒《漫长的告别》</p><p>近期要出差，此时刚经历一番波折，抵达机场候机，飞机晚点了。一路的风风火火，在机场这一小会的沉静，让我不禁想到：我是否过于粗暴的对待了本该温柔以待的生活。</p><p>我喜欢看书，尤其是小说，每次读小说都会想要一口气读完。就想起了一本书：《漫长的告别》。早已经习惯了快速阅读的我，在读这本书的时候忍受不了他的漫长，恨不得一目十行去探究事情的真相，随着漫长的结束，真相却来的如此突然，告别也来的如此悲伤。在我粗暴的阅读过程中，恍然想到，马洛在某个和特里喝完酒分开的夜晚，马洛说“如果我早知道他。。。我就不会。。。”一瞬间如遭雷击。</p><a id="more"></a><p>我决定花些时间写写这本书的读后感，写一写友谊，写一写爱情。</p><p>出差回来后一直没有补齐，今日补一下，所以读后感是算不上了，那便随便写写吧。</p><p>想起几天前深夜，我无心入眠，加上诸事缠身，心情实在不愉快。我便在朋友圈发文如下：</p><blockquote><p>躺在床上，心情烦躁，又要胡思乱想。想着想着就有些惆怅，认真思索难免有几份感悟。是时候发一条朋友圈了。<br>正要发送，看到下方提示“谁可以看”，便点了进去开始筛选。涉及私人感情，父母老师还是不要知道的好，知道了难免担心；好朋友也尽可能不知道的好，多一番调笑也是麻烦；普通朋友，莫要知道了好，知道了万一要被笑话；一些业务朋友更是不必知道的好，知道了又要怀疑我的人格。一来二去排除过后，也只剩那寥寥几人。<br>才发现啊，有时那心底的想法，其实只是想让那人看罢了。</p></blockquote><p>发完之后辗转不到半小时，看到手机有消息提示，点开来，发现很多久不联系的好友，发消息来关系，赶忙回消息说我没事，不过自己胡思乱想，叫他们不要担心。然后快速删掉了朋友圈。说实在的那一晚很感动，一个人在外求学，难免会有各种不开心的事情。尽管每天找事情让自己开心，和喜欢的人相处，和有趣的人相处，学喜欢的东西。可是生活嘛，哪能那么顺着我，你喜欢的人不喜欢我了，友谊小船说翻就翻了；有趣的人心情亦是不好，话题说断就断了；喜欢学的东西难度骤增，可用的时间却越来越少，压力越来越大了；我没有地方可以躲，我抱怨，发牢骚，用最愚蠢的的方式去发泄。抱着破罐子破摔的心态发个朋友圈。没想到会有好朋友出来兜着我，会关心我。</p><p>我一直都觉得友情其实是个挺奇怪的东西。每天和你厮混在一起的人，聊着聊着说翻脸就翻脸了，甚至受不得一点沙子。好久不见得朋友，约在一起，聊天和酒，情绪激动也骂两句，细想一下甚是难听，可是从来都不曾在意。你说哪个人是朋友，我也说不准。也许友情有着多个阶段吧。开始互不相容，只是玩的好，慢慢的才到后来的互相理解互相关心吧。18 年年底，我回家约见了很多旧友，一起聊天，一起吃喝，回味往事，端的是不亦乐乎。围成一圈，悔当时的悔，幸当初的幸。</p><p>再说说这段时间为什么情绪不高，有句调侃的话这么说：你以为你以为的是你以为的。</p><p>我觉得很有道理，这一句话简直囊括了处事之道。对待所有的人和事都逃不过这一点吧。你为一个人做了很多，其实在别人眼里这什么都不算。这反映了一个很浅显的道理：<strong>别高估了自己在别人心中的位置！</strong>只有这样才不会跌得太惨。</p><p>这个世界上的爱有很多种方式，也更是稀奇古怪。你看重了自己的位置，难免就骄纵，难免会失去。</p><p>有个朋友跟我说，不要以为谁离开了谁，一个星球就毁灭了。我想，有道理哈，但是其实人心都是肉长的。每一次的离开，星球没毁灭，心一点点的在毁灭啊。</p><p>其实我自己也知道自己并没有那么重要，工作上，我能带给别人的也只不过是锦上添花，生活上，我也恰巧只够养活自己罢了。</p><p>该走的留不住的，该留的不会走的。</p><p>人啊，最怕的就是高估了自己的重要性。</p><p>我偶尔会尝试手机关掉，或者放在很远的地方，过个一半天再打开手机，以为会有很多消息，其实呢？？没有任何人找我，也没有任何人发现我不见了。我意识到，其实我没有那么重要，没有太多人愿意把我放在心上，愿意为了我牵动神经。</p><p>我和朋友闹矛盾的时候，总会忍不住的去关心对方吃饭？睡觉？在哪里？做什么？有时会显得很傻然后招人烦。</p><p>可是当我情绪不好导致自己一天没有吃饭的时候，我才发现，没有人来问我，吃没吃饭。在哪里。在做什么。</p><p>很多时候我也会想，哇，这些人都么得感情的嘛。其实再深想一想，不是他们没有感情，而是我自己把感情看的过于偏执。</p><p>说到底，这个世界上没有谁离不开谁，只有谁舍不得失去谁，宁愿卑微了自己，也要留下那个人。</p><blockquote><p>也许有很多人都说过在乎你，你也都当了真，但是现在再回头看看，那些人又陪了你多久？<br>别人说爱你，却没说只爱你，别人说只爱你，却没说永远爱你。现实是，没有谁真的就是那么不可取代。<br>眼睛看不穿人心，但时间可以。遇到事了，就知道了，话说得再好听，都不如关键时刻守护在你身边。真感情不能用语言来表达，岁月会给你所有的答案。<br>感情是最说不清道不明的东西，没有公平可言。不是你掏心掏肺地对一个人，那个人就也会同样对你。<br>很多人，你视他如宝，他视你如草。既然如此，没必要为他丢了尊严，也丢了自己。</p></blockquote><p>你本来就是自己生命里的主角，何必去别人的世界里苦苦追寻？</p><blockquote><p>在自己的世界里，对自己的世界温柔，也被世界温柔以待。<br>在那恰当的时候遇到一个恰到的姑娘。<br>那姑娘温文尔雅，蕙质兰心。<br>你便化作骑士守护在她身边。<br>又有什么不好？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有点先生和差不多女士</title>
      <link href="/posts/fb43f81e/"/>
      <url>/posts/fb43f81e/</url>
      
        <content type="html"><![CDATA[<p>今天中午，在简书上看到一篇文章<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85MzMyOTFlMDhkYjc=" title="https://www.jianshu.com/p/933291e08db7">“你知道这些牛逼的女人背后有多拼命吗？”我们采访了 100 个女高管<i class="fa fa-external-link"></i></span>，其中有一段讲到了很多人拥有的一个致命状态：“有点”。<strong>「工作还行，谈不上喜欢不喜欢；恋爱也可以，说不上爱不爱；兴趣爱好就那样，做什么都不咸不淡」。</strong></p><p>刚给文章起完名字，才想到，胡适先生的《差不多先生传》，我便也借先生之名，去写写我所看到的「有点」和「差不多」。</p><p>世界上有很多凡事都带着「有点」的人，你只是「有点」想改变职业，「有点」想变优秀，「有点」想健身塑型。这种状态现在被称为「佛系」，<a id="more"></a>这个词语在现在的 90 后身上很流行，因为大部分都面临着工作压力，碰巧 90 后又处在这个信息爆炸的时代，知道什么是好的是想要的，可是又不想付出相应的努力，这就衍生出了一个「佛系」。一个词仿佛自己大彻大悟，看透人生真谛，给止步不前的人生找到了理由。“我要养生，我要照顾好自己的身体。”对，这些话我很认同，我本科几年几乎都是包宿过来的，我四哥给我起外号 <strong>“包宿坡”</strong>，导致至今我都有些神经质，反应时快时慢，很多结点好像就当机一样。我们要照顾好自己，但是这不是不努力的理由，不是玩乐的借口。游戏一打一天，抖音微博一刷一天？能养生嘛。去健身房锻炼都比这好得多吧。这一切无非就是「有点」。只是「有点」想要变好。<strong>你只是「有点」想要变好，那就只能得到「差不多」的人生。</strong></p><blockquote><p>世界不够公平，不会优待每个人，最可怕的是，大部分时间他都无比的苛刻。</p></blockquote><p>胡适先生的《差不多先生传》讽刺了当时中国社会那些处事不认真的人。从处事不认真到处世不认真，许许多多的人就在“差不多”的圈套里度过一生。</p><p>我记得无问西东中，沈光耀母亲得知光耀要当兵，给他说了一段话，发人深省：</p><blockquote><p>“当初你离家千里，来到这个地方读书，你父亲和我都没有反对过。因为，是我们想你，能享受到人生的乐趣，<br>比如读万卷书行万里路，比如同你喜欢的女孩子结婚生子。<br>注意不是给我增添子孙，而是你自己，能够享受为人父母的乐趣。<br>你一生所要追求的功名利禄，没有什么是你的祖上没经历过的，那些只不过是人生的幻光。<br>我怕，你还没想好怎么过这一生，你的命就没了啊！”</p></blockquote><p>这段话想来也看哭了不少人。因为每个人都想要那真实的生活。我也不例外，功名利禄不过人生幻光。我觉得对，也不对。没经历过的就不是幻光，经历过的才有资格说是幻光。《无问西东》主旨在真实，内心真实的想法。但不是对生活的妥协。</p><p>我觉得：<strong>未经人事，怎么能大彻大悟。涉世未深，凭什么看透人生真谛。恋爱没谈几次，朋友没有几个，你又凭什么对感情无所谓？？？</strong></p><p>有时候，我们是否也像“差不多先生”一样，过着差不多的人生？</p><p>列夫·托尔斯泰说：“人类的使命，在于自强不息地追求完美。” 追求完美，就是凡事都追求极致、精益求精，不甘于平庸，也拒绝将就，永远向着更高的目标前进一点、再前进一点。过的精致，活得潇洒，是你要追求的么？那哲学三连来了：你是谁？你从哪里来？你要到哪里去？</p><p>如果你想要做有点先生、差不多女士，那么恭喜你，你已经超过了世界上绝大多数人，因为很多人都穷尽一生去寻找人生的真实，你比他们先找到了。即使你选择了庸碌，那也只是世俗的眼光。<strong>希望你不是被生活折磨累了，打怕了，选择了妥协。</strong></p><p>前天和我妹聊天，我跟她说要照顾好自己的身体别总熬夜，我就那么过来的，熬夜没好处，时间的高效利用才是重要的。<br>我妹回答我：我前几天受刺激了，我看到前三名就住在学校不回去，凌晨都在切桌子。（PS：她学的建筑）</p><p>现在社会各种鸡汤乱炖，没有人知道成功的方法和道路。路是要走的，一点点走出来，路上都是荆棘石砾，你每迈出一步，收获的可能都是鲜血淋漓。怎么办呢？大彻大悟？差不多？我想每个人的想法不同，当然不做干预。</p><p>但是世界是公平的。<strong>你凭什么不努力，又什么都想要？</strong></p><p>有一句话说的很好：把一件事、一份工作做到 8 分，也许是因为钱；和一个不爱的人结婚，也许是因为合适。</p><p>如果要把一件事做到极致，要让自己每一天都真正的快乐，金钱、合适都不再适用了。</p><p>如果你对一件事怀着热爱，做到极致，就有机会从茫茫人海中脱颖而出，越来越优秀。</p><p>在热血上涌时，你能看到自己真实的想法么？或者说，你到底想成为什么样的人？</p><p>想起《此间的少年》中说到：我拥有无数的时光和可能，热血上涌的时候，我相信自己能征伐世界，在战马背上带着窈窕的姑娘归来。</p><p>人这一辈子最后悔的不是做过什么，而是没做过什么。总有人觉得，一个人的一生，都是因为家庭和环境的影响。但其实只是「人各有志」罢了，你是什么样的人，内心就会有什么样的渴望。而这样的渴望，会一直在那里，随着你的物质水平越来越丰盈，这样渴望的声音会越来越大。从来都不是我们选择梦想，而是梦想选择了我们。</p><p><strong>努力不是为了证明自己有多么的了不起。而是在看到世间所有的诱惑时，可以开心的告诉自己「我有更好的」</strong>。</p><p>人这一辈子，就像煮茶，火候到了，熬的住了，那就刚刚好。熬不住的，不如不喝。</p><p>《差不多先生传》原文节选：</p><blockquote><p>差不多先生的相貌和你和我都差不多。他有一双眼睛，但看的不很清楚；有两只耳朵，但听的不很分明；有鼻子和嘴，但他对于气味和口味都不很讲究。他的脑子也不小，但他的记性却不很精明，他的思想也不很细密。<br>他常说：“凡事只要差不多，就好了。何必太精明呢？”<br>他小的时候，他妈叫他去买红糖，他买了白糖回来。他妈骂他，他摇摇头说：“红糖白糖不是差不多吗？”<br>他在学堂的时候，先生问他：“直隶省的西边是哪一省？”他说是陕西。先生说：“错了。是山西，不是陕西。”他说：“陕西同山西，不是差不多吗？”<br>后来他在一个钱铺里做伙计；他也会写，也会算，只是总不会精细。十字常常写成千字，千字常常写成十字。掌柜的生气了，常常骂他。他只是笑嘻嘻地赔礼道：“千字比十字只多一小撇，不是差不多吗？”<br>有一天，他为了一件要紧的事，要搭火车到上海去。他从从容容地走到火车站，迟了两分钟，火车已开走了。他白瞪着眼，望着远远的火车上的煤烟，摇摇头道：“只好明天再走了，今天走同明天走，也还差不多。可是火车公司未免太认真了。八点三十分开，同八点三十二分开，不是差不多吗？”他一面说，一面慢慢地走回家，心里总不明白为什么火车不肯等他两分钟。<br>有一天，他忽然得了急病，赶快叫家人去请东街的汪医生。那家人急急忙忙地跑去，一时寻不着东街的汪大夫，却把西街牛医王大夫请来了。差不多先生病在床上，知道寻错了人；但病急了，身上痛苦，心里焦急，等不得了，心里想道：“好在王大夫同汪大夫也差不多，让他试试看罢。”于是这位牛医王大夫走近床前，用医牛的法子给差不多先生治病。不上一点钟，差不多先生就一命呜呼了。差不多先生差不多要死的时候，一口气断断续续地说道：“活人同死人也差……差……差不多，……凡事只要……差……差……不多……就……好了，……何……何……必……太……太认真呢？”他说完了这句话，方才绝气了。<br>他死后，大家都称赞差不多先生样样事情看得破，想得通；大家都说他一生不肯认真，不肯算帐，不肯计较，真是一位有德行的人。于是大家给他取个死后的法号，叫他做圆通大师。<br>他的名誉越传越远，越久越大。无数无数的人都学他的榜样。于是人人都成了一个差不多先生——然而中国从此就成为一个懒人国了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
            <tag> 态度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS绘制三角形原理及应用</title>
      <link href="/posts/4842f834/"/>
      <url>/posts/4842f834/</url>
      
        <content type="html"><![CDATA[<p>在从 PSD 到 HTML 页面的过程中，免不了要遇到一个问题：“这个小图标，可以用 CSS 效果实现，也可以切图下来，到底该怎么选择呢？？？”</p><p>在此我个人的选择一般都是，用 CSS 实现，当然切图然后实现也是聪明人的办法，但是我觉得学好一个技术最关键的不是学习，而是使用。学了不用都是假把式。学了 CSS 有机会让你炫技，不用是大傻。</p><p>最常见的一类小图标就是三角形，今天我来总结一下用 CSS 实现三角形的原理。<a id="more"></a>网上相关资料较多，讲的也都很好，个人博客主要还是用于记录分享，毫无商业前景，不喜勿喷。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="CSS-盒模型"><a href="#CSS-盒模型" class="headerlink" title="CSS 盒模型"></a>CSS 盒模型</h3><p>盒子模型包括了：margin-border-padding-content</p><p><img src="CSS盒模型.png" style="height:150px; border:none;" alt="CSS盒模型"></img></p><p>其中，在上下左右的边框交界处，都形成了斜线，利用这一特性，我们可以通过设置不同的上下左右边框的宽度和颜色，可以得到小三角、小梯形等；调整宽度大小可以调节三角形的形状。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><p>我们首先尝试上下左右颜色区分，并将 border 的宽度给大一点，看看效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#cd1076</span> <span class="number">#bf3eff</span> <span class="number">#b3ee3a</span> <span class="number">#6495ed</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="示例1.png" style="height:150px; border:none;" alt="示例1"></img></p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><p>接下来我们把 content 宽度设置为 0</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#cd1076</span> <span class="number">#bf3eff</span> <span class="number">#b3ee3a</span> <span class="number">#6495ed</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden; <span class="comment">/* 这里设置overflow, font-size, line-height */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>; <span class="comment">/*是因为, 虽然宽高度为0, 但在IE6下会具有默认的 */</span></span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>; <span class="comment">/* 字体大小和行高, 导致盒子呈现被撑开的长矩形 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="示例2.png" style="height:150px; border:none;" alt="示例2"></img></p><p>这时我们可以看到，已经出现了四个颜色不同的三角形了。</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h3><p>接下来我们把其中三种颜色设置为和背景颜色一样，只保留一种颜色的对比，代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#cd1076</span> transparent transparent transparent;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="示例3.png" style="height:150px; border:none;" alt="示例3"></img></p><h4 id="IE6-下"><a href="#IE6-下" class="headerlink" title="IE6 下"></a>IE6 下</h4><p>在 IE6 下，不支持透明，需要将余下三条边的 border-style 设置为 dashed 即可。</p><p>代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid dashed dashed dashed;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#cd1076</span> transparent transparent transparent;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4"></a>示例 4</h3><p>同理，我们消去相邻的两个三角形，会得到一个以对角线为斜边的大三角形。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid dashed dashed dashed;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#cd1076</span> <span class="number">#bf3eff</span> transparent transparent;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="示例4.png" style="height:150px; border:none;" alt="示例4"></img></p><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例 5"></a>示例 5</h3><p>这样我们设置 border-width 为不同的值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">20px</span> <span class="number">40px</span> <span class="number">30px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#cd1076</span> transparent transparent transparent;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="示例5.png" style="height:150px; border:none;" alt="示例5"></img></p><p>就是说我们只要设置不同的宽度值，可以得到任意形状的三角形，完美。</p><p><strong>注意</strong>：用来绘制三角形的必须是 block 元素。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cDovL2NhaWJhb2ppYW4uY29tL2Nzcy1ib3JkZXItdHJpYW5nbGUuaHRtbA==" title="http://caibaojian.com/css-border-triangle.html">CSS 三角形的实现原理及运用<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dhbnlpbmd4aWUxMjM0NTYvYXJ0aWNsZS9kZXRhaWxzLzc3OTM0Nzkw" title="https://blog.csdn.net/ganyingxie123456/article/details/77934790">css3 实现三角形、扇形和特殊的形状等<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 绘图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于理想，无问西东</title>
      <link href="/posts/166f497f/"/>
      <url>/posts/166f497f/</url>
      
        <content type="html"><![CDATA[<p>“如果提前了解了你所面对的人生，你是否还有勇气前来？”</p><p>这样的一个问题，出现在《无问西东》片头。电影讲述了四个时代的四个故事，穿越了一个世纪。我个人非常推荐大家去看这部电影。虽然网上褒贬不一，我不懂电影，所以我也不讲电影，我想讲讲理想，不是世人的理想，不是字典里的理想，是真实的理想。</p><a id="more"></a><p>小时候听腻了的一个问题，你长大了要做什么？爸妈问，老师问，好伙伴也问，逢年过节，更是要受到这样的提问，直指心灵。</p><p>可是！臣妾不知道啊！！！我就是个普通孩子，那时的我满脑子都是动画片。谁会有那境界去想理想，去想未来。可是你又不能不回答，当然提问的人也都很有分寸，会给出几个合理的选项，无非是律师、医生、科学家之类（科学家居多）。长大后恍然间明白，那时候我们免不了要充当大人们的谈资的。所以一切不过逢场作戏。</p><p>不管当时多么懵懂，多么不情愿，理想总是要有的，万一就实现了呢？免不了都是些科学家之流。我最钦佩的就是那些有思想的孩子，看到卖糖人或卖爆米花的，立即就许下了愿望：妈妈，妈妈，我长大了要卖糖人，卖爆米花。虽然要遭受一顿呵斥，但想想，至少之后他们的理想会随着时间慢慢增强吧。多少孩子的理想是随着年龄递减的。小学愿望考清北，初中愿望考一本，高中愿望考得上。这种情况是为什么呢？有说教育体制问题，也有说父母教育方式问题，更有说命中注定。</p><p>我觉得，是看得到与看不到，说白了就是眼界。我记得我上小学那会，穷乡僻壤，没见过什么世面。我见过最高的楼能有 10 层？（也不能再多了，再多数不过来了）见过最好的玩具，应该是商场见过的机器人（没什么功能，一碰就叫的那种）。爸爸妈妈还好去过上海还是大连，也算见过世面的了。记得去年年底，还听我老爸说，当年去旅游，看别人拿个平板拍照，可清晰了（我心中腹诽，那时候的像素，老爸应该是心理作用来着）。</p><p>好了，我见过 10 层的高楼，数数也数的到 100。我的理想可以是盖一个 100 层高的楼房。然后我一辈子时间用来盖楼，好似愚公盖楼嘛，子子孙孙无穷匮也。所以说，<strong>眼界决定了理想的高度</strong>。<strong>踏实决定了理想的底线</strong>。</p><p>现在呢，长大了，懂事了，我很幸运处在一个信息爆炸的时代，眼见他起高楼（当然楼没塌）。我这一代人处在了这个飞速发展的时代中，所处的世界也日新月异。这个时代，算得上遍地机会。在这个时代你的努力所换取的回报远远大于我们的先辈。但是同样，这个时代同样也充满了诱惑。躺在柔软的沙发上，开着空调，听着音乐，玩着手机，各式各样的快餐娱乐让人沉浸其中，短时娱乐带来的快感让人无法自拔。刷刷刷，嗖嗖嗖，一天就过去了。和自己的好朋友待在一起，聊不到十句，便开始刷手机。甚至是亲人和爱人之间。转眼，网络变成了我们最好的伙伴，要在网上抱怨自己郁郁不得志，也要在网上抒发自己的远大志向。</p><p>这时候我们的理想呢？理想今年你几岁？</p><p>《无问西东》导演，李芳芳说：</p><blockquote><p>无论外界的社会如何左右，都对自己真诚，做真实的自己，内心没有了杂念和疑问，才能勇往直前，无问西东。</p></blockquote><p>这部电影看起来是讲政治，讲战争，讲历史，其实重心一直都不在这些上面，从头到尾的聚焦点都在青年，在这不同的历史时刻中，站得起来的那些青年。他们和所有的人一样，在历史的长河中，茫然不知所措，艰难抉择，但是他们都选择了真心。不趋吉避凶，不明哲保身。这是对自己人生价值观的拷问。从清华学堂，到西南联大，再到清华大学，高等学府孕育了一代又一代时代之光、希望之光。</p><p>我印象最深的一段话，是抗战时期，吴岭澜在云南的山洞里给学生上课时所说的：</p><blockquote><p>世界于你而言，无意义无目的，却又充满随心所欲的幻想，但又有谁知，也许就在这闷热令人疲倦的正午，那个陌生人，提着满篮奇妙的货物，路过你的门前，他响亮地叫卖着，你就会从朦胧中惊醒，走出房门，迎接命运的安排。</p></blockquote><blockquote><p>这是泰戈尔的诗。当我在你们这个年纪，有段时间，我远离人群，独自思索，我的人生到底应该怎样度过？</p></blockquote><blockquote><p>某日，我偶然去图书馆，听到泰戈尔的演讲，而陪同在泰戈尔身边的人，是当时最卓越的一群人（即梁思成、林徽因、梁启超、梅贻琦、王国维、徐志摩），这些人站在那里，自信而笃定，那种从容让我十分羡慕。而泰戈尔，正在讲“对自己的真实”有多么重要，那一刻，我从思索生命意义的羞耻感中，释放出来。原来这些卓越的人物，也认为花时间思考这些，谈论这些，是重要的。今天，我把泰戈尔的诗介绍给你们，希望你们在今后的岁月里，不要放弃对生命的思索，对自己的真实。</p></blockquote><p>年轻的吴岭澜和梅贻琦校长的对话：</p><blockquote><p>什么是真实？</p></blockquote><blockquote><p>你看到什么，听到什么，做什么，和谁在一起，有一种从心灵伸出满溢出来的不懊悔，也不羞耻的平和，与喜悦。</p></blockquote><p>沈光耀被教官惩罚时，他用教官说的话回答：</p><blockquote><p>这个时代缺的不是完美的人，而是从心底给出的真心，正义，无畏和同情。</p></blockquote><p>他本来已经答应了母亲不去当兵，可是看到了日军空袭后的遍地残骸，他依然遵从了自己的内心的真实，投笔从戎。其实他早已经找到了自己人生的乐趣，看到了真实的理想。</p><p>这时候理想又将是什么？是你看到的想到的，是你真心诚意想要的，那种真实。</p><blockquote><p>如果提前了解了你所面对的人生，你是否还有勇气前来？<br>看见的和听到的，经常会令你们沮丧，世俗是这样强大，强大到生不出改变他们的念头来。<br>可是如果有机会提前了解了你们的人生，知道青春也不过只有这些日子。不知你们是否还会在意那些世俗希望你们在意的事情。<br>比如占有多少才更荣耀，拥有什么才能被爱。<br>等你们长大，你们会因绿芽冒出土地而喜悦，会对初生的朝阳欢呼跳跃，也会给别人善意和温暖，<br>但是却会在赞美别的生命的同时，常常，甚至永远的忘了自己的珍贵。<br>愿你在被打击时，记起你的珍贵，抵抗恶意；<br>愿你在迷茫时，坚信你的珍贵。<br>爱你所爱，行你所行，<br>听从你心，无问西东。</p></blockquote><p>我希望，我永远不忘却自己的珍贵，也不会因为思索生命的意义而感到羞耻。<br>我会爱我所爱，行我所行。听从我心，无问西东。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
            <tag> 理想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS伪类与伪元素</title>
      <link href="/posts/df0cb483/"/>
      <url>/posts/df0cb483/</url>
      
        <content type="html"><![CDATA[<h2 id="伪类-伪元素定义"><a href="#伪类-伪元素定义" class="headerlink" title="伪类/伪元素定义"></a>伪类/伪元素定义</h2><p>做前端那必须的要接触到 CSS 的伪类和伪元素。常见的又:focus，:hover，:link，:visited 等等。在 CSS1 和 CSS2 中对伪类和伪选择器没有做出很明显的区别定义，而二者在语法是一样的，都是以:开头，这造成很多人会将某些伪元素误认为是伪类，如:before，:after；而在 CSS3 中，对这两个概念做了较清晰的解释，二者区别更为明显，更容易理解。</p><a id="more"></a><h3 id="伪类定义"><a href="#伪类定义" class="headerlink" title="伪类定义"></a>伪类定义</h3><p>CSS3 对与伪类的定义如下：</p><blockquote><p>The pseudo-class concept is introduced to permit selection based on information that lies outside of the document tree or that cannot be expressed using the other simple selectors.</p></blockquote><blockquote><p>伪类存在的意义是为了通过选择器找到那些不存在与 DOM 树中的信息以及不能被常规 CSS 选择器获取到的信息。</p></blockquote><blockquote><p>A pseudo-class always consists of a “colon” (:) followed by the name of the pseudo-class and optionally by a value between parentheses.</p></blockquote><blockquote><p>伪类由一个冒号:开头，冒号后面是伪类的名称和包含在圆括号中的可选参数。</p></blockquote><blockquote><p>Pseudo-classes are allowed in all sequences of simple selectors contained in a selector. Pseudo-classes are allowed anywhere in sequences of simple selectors, after the leading type selector or universal selector (possibly omitted). Pseudo-class names are case-insensitive. Some pseudo-classes are mutually exclusive, while others can be applied simultaneously to the same element. Pseudo-classes may be dynamic, in the sense that an element may acquire or lose a pseudo-class while a user interacts with the document.</p></blockquote><blockquote><p>任何常规选择器可以再任何位置使用伪类。伪类语法不区别大小写。一些伪类的作用会互斥，另外一些伪类可以同时被同一个元素使用。并且，为了满足用户在操作 DOM 时产生的 DOM 结构改变，伪类也可以是动态的。</p></blockquote><p>解读：伪类用于选择 DOM 树之外的信息，或是不能用简单选择器进行表示的信息。前者包含那些匹配指定状态的元素，比如:visited，:active；后者包含那些满足一定逻辑条件的 DOM 树中的元素，比如:first-child，:first-of-type，:target。</p><p>获取不存在于 DOM 树中的信息。比如&lt;a&gt;标签的:link，:visited 等，这些信息不存在于 DOM 树结构中，只能通过 CSS 选择器来获取；<br>获取不能被常规 CSS 选择器获取的信息。比如伪类:target，它的作用是匹配文档(页面)的 URI 中某个标志符的目标元素，例如我们可以通过如下代码来实现页面内的区域跳转：</p><p>html 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tabs&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#tab1&quot;</span>&gt;</span>标签一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#tab2&quot;</span>&gt;</span>标签二<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#tab3&quot;</span>&gt;</span>标签三<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tab1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab_content&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--tabed content--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tab2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab_content&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--tabed content--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tab3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab_content&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--tabed content--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css 代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tab_content</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#tab1</span><span class="selector-pseudo">:target</span>,</span><br><span class="line"><span class="selector-id">#tab2</span><span class="selector-pseudo">:target</span>,</span><br><span class="line"><span class="selector-id">#tab3</span><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="伪元素定义"><a href="#伪元素定义" class="headerlink" title="伪元素定义"></a>伪元素定义</h3><p>CSS3 对与伪元素的定义如下：</p><blockquote><p>Pseudo-elements create abstractions about the document tree beyond those specified by the document language. For instance, document languages do not offer mechanisms to access the first letter or first line of an element’s content. Pseudo-elements allow authors to refer to this otherwise inaccessible information. Pseudo-elements may also provide authors a way to refer to content that does not exist in the source document (e.g., the ::before and ::after pseudo-elements give access to generated content).</p></blockquote><blockquote><p>伪元素在 DOM 树中创建了一些抽象元素，这些抽象元素是不存在于文档语言里的（可以理解为 html 源码）。比如：documen 接口不提供访问元素内容的第一个字或者第一行的机制，而伪元素可以使开发者可以提取到这些信息。并且，一些伪元素可以使开发者获取到不存在于源文档中的内容（比如常见的::before,::after）。</p></blockquote><blockquote><p>A pseudo-element is made of two colons (::) followed by the name of the pseudo-element.</p></blockquote><blockquote><p>伪元素的由两个冒号::开头，然后是伪元素的名称。</p></blockquote><blockquote><p>This :: notation is introduced by the current document in order to establish a discrimination between pseudo-classes and pseudo-elements. For compatibility with existing style sheets, user agents must also accept the previous one-colon notation for pseudo-elements introduced in CSS levels 1 and 2 (namely, :first-line, :first-letter, :before and :after). This compatibility is not allowed for the new pseudo-elements introduced in this specification.</p></blockquote><blockquote><p>使用两个冒号::是为了区别伪类和伪元素（CSS2 中并没有区别）。当然，考虑到兼容性，CSS2 中已存的伪元素仍然可以使用一个冒号:的语法，但是 CSS3 中新增的伪元素必须使用两个冒号::。</p></blockquote><blockquote><p>Only one pseudo-element may appear per selector, and if present it must appear after the sequence of simple selectors that represents the subjects of the selector.</p></blockquote><blockquote><p>一个选择器只能使用一个伪元素，并且伪元素必须处于选择器语句的最后。</p></blockquote><blockquote><p>Note: A future version of this specification may allow multiple pseudo-elements per selector.</p></blockquote><blockquote><p>注：不排除未来会加入同时使用多个伪元素的机制。</p></blockquote><p>解读：伪元素为 DOM 树没有定义的虚拟元素。不同于其他选择器，它不以元素为最小选择单元，它选择的是元素指定内容。比如::before 表示选择元素内容的之前内容，也就是””；::selection 表示选择元素被选中的内容。</p><p>第一段话是伪元素的清晰定义，也是伪元素与伪类最大的区别。简单来说，伪元素创建了一个虚拟容器，这个容器不包含任何 DOM 元素，但是可以包含内容。另外，开发者还可以为伪元素定制样式。</p><p>以::first-line 为例，它获取了指定元素的第一行内容并且将第一行的内容加入到虚拟容器中。如果通过 JavaScript 来实现这个逻辑，那么要考虑的因素就太多了，比如制定元素的宽度、字体大小，甚至浮动元素的图文混排等等。使用 JS 也可以实现，但是过于繁琐。</p><p>举个综合使用伪类和伪元素的栗子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:lang(de)</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot; (German) &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:lang(en)</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot; (English) &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:lang(fr)</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot; (French) &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:lang(fr))</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:lang(de))</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:lang(en))</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot; (Unrecognized language) &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码通过伪类”lang 获取不同 lang 属性的节点，并为之设置伪元素::after，伪元素的内容是此节点的语言类型。</p><h2 id="伪类-伪元素一览表"><a href="#伪类-伪元素一览表" class="headerlink" title="伪类/伪元素一览表"></a>伪类/伪元素一览表</h2><h3 id="伪类一览表"><a href="#伪类一览表" class="headerlink" title="伪类一览表"></a>伪类一览表</h3><table><thead><tr><th>Selector</th><th>Meaning</th><th>CSS</th></tr></thead><tbody><tr><td>:active</td><td>选择正在被激活的元素</td><td>1</td></tr><tr><td>:hover</td><td>选择被鼠标悬浮着元素</td><td>1</td></tr><tr><td>:link</td><td>选择未被访问的元素</td><td>1</td></tr><tr><td>:visited</td><td>选择已被访问的元素</td><td>1</td></tr><tr><td>:first-child</td><td>选择满足是其父元素的第一个子元素的元素</td><td>2</td></tr><tr><td>:lang</td><td>选择带有指定 lang 属性的元素</td><td>2</td></tr><tr><td>:focus</td><td>选择拥有键盘输入焦点的元素</td><td>2</td></tr><tr><td>:enable</td><td>选择每个已启动的元素</td><td>3</td></tr><tr><td>:disable</td><td>选择每个已禁止的元素</td><td>3</td></tr><tr><td>:checked</td><td>选择每个被选中的元素</td><td>3</td></tr><tr><td>:target</td><td>选择当前的锚点元素</td><td>3</td></tr><tr><td>:first-of-type</td><td>选择满足是其父元素的第一个某类型子元素的元素</td><td>3</td></tr><tr><td>:last-of-type</td><td>选择满足是其父元素的最后一个某类型子元素的元素</td><td>3</td></tr><tr><td>:only-of-type</td><td>选择满足是其父元素的唯一一个某类型子元素的元素</td><td>3</td></tr><tr><td>:nth-of-type(n)</td><td>选择满足是其父元素的第 n 个某类型子元素的元素</td><td>3</td></tr><tr><td>:nth-last-of-type(n)</td><td>选择满足是其父元素的倒数第 n 个某类型的元素</td><td>3</td></tr><tr><td>:only-child</td><td>选择满足是其父元素的唯一一个子元素的元素</td><td>3</td></tr><tr><td>:last-child</td><td>选择满足是其父元素的最后一个元素的元素</td><td>3</td></tr><tr><td>:nth-child(n)</td><td>选择满足是其父元素的第 n 个子元素的元素</td><td>3</td></tr><tr><td>:nth-last-child(n)</td><td>选择满足是其父元素的倒数第 n 个子元素的元素</td><td>3</td></tr><tr><td>:empty</td><td>选择满足没有子元素的元素</td><td>3</td></tr><tr><td>:in-range</td><td>选择满足值在指定范围内的元素</td><td>3</td></tr><tr><td>:out-of-range</td><td>选择值不在指定范围内的元素</td><td>3</td></tr><tr><td>:invalid</td><td>选择满足值为无效值的元素</td><td>3</td></tr><tr><td>:valid</td><td>选择满足值为有效值的元素</td><td>3</td></tr><tr><td>:not(selector)</td><td>选择不满足 selector 的元素</td><td>3</td></tr><tr><td>:optional</td><td>选择为可选项的表单元素，即没有“required”属性</td><td>3</td></tr><tr><td>:read-only</td><td>选择有”readonly”的表单元素</td><td>3</td></tr><tr><td>:read-write</td><td>选择没有”readonly”的表单元素</td><td>3</td></tr><tr><td>:root</td><td>选择根元素</td><td>3</td></tr></tbody></table><p>注意：p:first-child 表示选择的元素既要是 p 标签，同时要是其父元素的第一个子元素，不要错误认为是表示 p 元素的第一个子元素；同理，p:first-of-type 表示选择的元素要是 p 标签，同时要是其父元素的第一个 p 标签元素；其他类似的伪类含义相似。</p><h3 id="伪元素一览表"><a href="#伪元素一览表" class="headerlink" title="伪元素一览表"></a>伪元素一览表</h3><table><thead><tr><th>Selector</th><th>Meaning</th><th>CSS</th></tr></thead><tbody><tr><td>::first-letter</td><td>选择指定元素的第一个单词</td><td>1</td></tr><tr><td>::first-line</td><td>选择指定元素的第一行</td><td>1</td></tr><tr><td>::after</td><td>在指定元素的内容前面插入内容</td><td>2</td></tr><tr><td>::before</td><td>在指定元素的内容后面插入内容</td><td>2</td></tr><tr><td>::selection</td><td>选择指定元素中被用户选中的内容</td><td>3</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>伪类与伪元素的特性及其区别：</p><ul><li>伪类本质上是为了弥补常规 CSS 选择器的不足，以便获取到更多信息；</li><li>伪元素本质上是创建了一个有内容的虚拟容器；</li><li>CSS3 中伪类和伪元素的语法不同；</li><li>可以同时使用多个伪类，而只能同时使用一个伪元素；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 伪类&amp;伪元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用Valine评论系统</title>
      <link href="/posts/bf41ab23/"/>
      <url>/posts/bf41ab23/</url>
      
        <content type="html"><![CDATA[<p>前几天给博客添加了来必力评论系统，但是加载速度实在是慢的可以，原因是来必力是在页面滑到底部的时候才开始加载，但是通过控制台看，来必力确实时间很久，很影响我自己的使用体验（嗯，没有别人，哭），所以在网上找到了另外的评论系统—Valine。</p><h2 id="Valine-是什么？"><a href="#Valine-是什么？" class="headerlink" title="Valine 是什么？"></a>Valine 是什么？</h2><p>欢迎访问 <span class="exturl" data-url="aHR0cHM6Ly92YWxpbmUuanMub3Jn" title="https://valine.js.org">Valine 官网<i class="fa fa-external-link"></i></span></p><p>Valine 是一款基于 <span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24=" title="https://leancloud.cn">Leancloud<i class="fa fa-external-link"></i></span> 的快速、简洁且高效的无后端评论系统。</p><a id="more"></a><p>Valine 的特性如同官网所说：快速、安全、无后端等等。</p><p>更重要的是，我在 Valine 官网看到了「<span class="exturl" data-url="aHR0cHM6Ly92YWxpbmUuanMub3JnL25vdGlmeS5odG1s" title="https://valine.js.org/notify.html">邮件提醒<i class="fa fa-external-link"></i></span>」，巧了，这正是我想要很久的功能。想想看，我写了一个文章，有位朋友看到了评论然后提出了异议，我过了十天半个月看到了才回复，这我真的羞愧难当。所以评论提醒是很重要的。点开官方文档一看，讲解的很详细了。</p><h2 id="配置评论系统"><a href="#配置评论系统" class="headerlink" title="配置评论系统"></a>配置评论系统</h2><p>Valine 评论系统依托于 Leancoud，这个大家应该不陌生了把。这个就是我们的阅读量统计，在之前的文章<a href="../5b1da34a">《Hexo 的那些事儿》</a>中有相关的使用说明，此处就不做过多展开了。</p><p>在主题配置文件中，找到 Valine 配置项，具体配置信息如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enable: true</span><br><span class="line">  appid: IgXUs8o4trUx8BIt564-gzGzoHsz # your leancloud application appid</span><br><span class="line">  appkey: 5EN3Kw3h7ER24APkfyxQK # your leancloud application appkey</span><br><span class="line">  notify: true # mail notifier , https://github.com/xCss/Valine/wiki</span><br><span class="line">  verify: true # Verification code</span><br><span class="line">  placeholder: Just go go # comment box placeholder</span><br><span class="line">  avatar: mm # gravatar style</span><br><span class="line">  guest_info: nick,mail,link # custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br></pre></td></tr></table></figure><p>注意：<strong>appid 和 appkey 应该填上你自己 Leancloud 中对应的信息。</strong></p><p>然后我们需要了解一下 Valine 官方提供的邮件提醒功能是基于 Leancloud 的密码重置邮件提醒，操作步骤如下：</p><p>登录 <span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24=" title="https://leancloud.cn">Leancloud<i class="fa fa-external-link"></i></span>，进入<code>控制台</code>，点击<code>应用</code>-&gt;<code>设置</code>-&gt;<code>邮件模版</code>设置重置密码的邮件内容即可，如下图：</p><p><img src="%E8%AE%BE%E7%BD%AE%E9%87%8D%E7%BD%AE%E9%82%AE%E4%BB%B6.png" alt="设置重置邮件"></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hi, &#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  你在 &#123;&#123;appname&#125;&#125; 的评论收到了新的回复，请点击查看：</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  &lt;a</span><br><span class="line">    href=&quot;你的网址首页链接&quot;</span><br><span class="line">    style=&quot;display: inline-block; padding: 10px 20px; border-radius: 4px; background-color: #3090e4; color: #fff; text-decoration: none;&quot;</span><br><span class="line">    &gt;马上查看&lt;/a</span><br><span class="line">  &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击保存即可。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>发送次数过多，可能会暂时被 Leancloud 屏蔽邮件发送功能</p></li><li><p>由于邮件提醒功能使用的 Leancloud 的密码重置邮件提醒，只能传递昵称、邮箱两个属性，所以邮件提醒链接无法直达指定文章页。请悉知。</p></li><li><p>开启邮件提醒会默认开启验证码选项。</p></li><li><p>该功能目前还在测试阶段，谨慎使用。</p></li><li><p>目前邮件提醒正处于测试阶段，仅在子级对存在邮件地址的父级发表评论时发送邮件</p></li></ul><p>这时，如果你在博客中评论，站长（也就是我）并不会收到提醒，emmm 但是我给你回复或者其他人给你回复，你会收到邮件提醒（前提是你得留了邮箱）。</p><p>但这并不是我想要的效果啊，我想要的是你们评论了，可以及时的提醒我。</p><p>这时候就需要其他帮助了，这里感谢第三方支持：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3poYW9qdW4xOTk4L1ZhbGluZS1BZG1pbg==" title="https://github.com/zhaojun1998/Valine-Admin">Valine-Admin<i class="fa fa-external-link"></i></span> (by @zhaojun1998)</p><h2 id="第三方支持"><a href="#第三方支持" class="headerlink" title="第三方支持"></a>第三方支持</h2><p>利用第三方支持，就可以在访客评论的时候，将提醒消息发给站长。具体步骤如下：</p><ul><li>1.进入 Leancloud 应用，点击<code>云引擎</code>-&gt;<code>设置</code>，在源代码部署下面填写：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/zhaojun1998/Valine-Admin</span><br></pre></td></tr></table></figure><p><img src="%E6%BA%90%E7%A0%81%E9%83%A8%E7%BD%B2.png" alt="源码部署"></p><ul><li>2.设置云引擎环境变量，还是在设置中下拉，找到<code>自定义环境变量</code>，添加如下项目：</li></ul><table><thead><tr><th>参数</th><th>值</th></tr></thead><tbody><tr><td>SITE_NAME</td><td>网站名称。</td></tr><tr><td>SITE_URL</td><td>网站地址, 最后不要加 / 。</td></tr><tr><td>SMTP_USER</td><td>SMTP 服务用户名，一般为邮箱地址。</td></tr><tr><td>SMTP_PASS</td><td>SMTP 密码，一般为授权码，而不是邮箱的登陆密码，请自行查询对应邮件服务商的获取方式</td></tr><tr><td>SMTP_SERVICE</td><td>邮件服务提供商，支持 QQ、163 等等，请查询<span class="exturl" data-url="aHR0cHM6Ly93d3cubmh0emouY29tL+mrmOe6p+mFjee9ri5tZCPoh6rlrprkuYnpgq7ku7bmnI3liqHlmag=" title="https://www.nhtzj.com/高级配置.md#自定义邮件服务器">https://www.nhtzj.com/高级配置.md#自定义邮件服务器<i class="fa fa-external-link"></i></span></td></tr><tr><td>SENDER_NAME</td><td>寄件人名称。</td></tr><tr><td>TO_EMAIL</td><td>这个是填收邮件提醒的邮箱地址，若没有这个字段，则将邮件发到 SMTP_USER。</td></tr><tr><td>TEMPLATE_NAME</td><td>设置提醒邮件的主题，目前内置了两款主题，分别为 default 与 rainbow。默认为 default。</td></tr></tbody></table><ul><li>3.切换到部署标签页，分支使用 master，点击部署，等待部署完毕即可：</li></ul><p><img src="%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2.png" alt="环境部署"></p><p>注意：部署过程中可能会遇到错误，请根据提示解决，一般都是环境变量设置有问题。</p><p>此时我们测试网站评论提醒效果，访客评论，站长可以收到邮件提醒。</p><h3 id="问题：多封邮件"><a href="#问题：多封邮件" class="headerlink" title="问题：多封邮件"></a>问题：多封邮件</h3><p>此时的邮件提醒，会发现都是两封邮件，一封是漂亮的 Rainbow 样式，一封是默认的重置样式，说明，第三方插件和重置邮件均被触发了。</p><p>我们进入主题配置文件，将 valine 配置项下面的 notify 和 verify 均置为 false 即可解决邮件重复问题。</p><h3 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h3><p>我们现在已经可以收到评论相关的邮件提醒了，但是如何管理评论内容呢？Valine 提供了很方便的评论管理功能～可以在网页端对评论进行查看以及删除。</p><p>配置方法如下：</p><p><img src="WEB%E4%B8%BB%E6%9C%BA%E5%9F%9F%E5%90%8D.png" alt="WEB主机域名"></p><p>在主机域名处随便填上什么，不用关心后缀名和你自己的域名不一样，这个和你自己的域名没关系，就是你设置了这个，访问这个域名，去管理自己的评论内容。</p><p>访问这个域名，提示你输入账户密码，具体信息在<code>存储</code>-&gt;<code>数据</code>-&gt;<code>_User</code>中，如下图：</p><p><img src="%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF.png" alt="用户信息"></p><p>其中需要填写 email、password、username 这三个字段。</p><p>email 为账户，password 为密码。即可进入后台对评论内容进行管理。</p><blockquote><p>目前 Web 后台仅有 <strong>查看</strong> 与 <strong>删除</strong> 功能</p></blockquote><h3 id="评论管理更新"><a href="#评论管理更新" class="headerlink" title="评论管理更新"></a>评论管理更新</h3><p>更新于 2020 年 07 月 20 日：</p><p>记得去年，leancloud 好像要求绑定域名，并且备案。之后貌似只有国际版才不需要备案。</p><p>我的是国内版本，并且个人有自己的域名。针对这种情况，对文章进行修改。</p><p>具体内容如下。邮件的绑定以及评论啥的都同上。主要在于绑定域名。</p><p>首先登陆<span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24v" title="https://leancloud.cn/">leancloud<i class="fa fa-external-link"></i></span>，点击<strong>设置</strong>-&gt;<strong>域名绑定</strong>。</p><p>选中<strong>云引擎域名</strong>，点击<strong>绑定新域名</strong>，此处推荐绑定二级域名，什么意思呢？</p><p>举例子：我的域名 <strong>xudongpo.cn</strong> 肯定是绑定在我的 ECS 服务器上的，所以就不能通过 CNAME 解析，会产生冲突，此时就需要我们使用二级域名。</p><p>例如 <strong>leancloud.xudongpo.cn</strong> 这样就可以绑定了。根据提示，会要求你绑定在 <strong>id 前八位.cn-n1-cname.leanapp.cn</strong>上。</p><p>在域名服务商处(我的是阿里云)绑定二级域名即可。</p><p>绑定完毕如图所示：</p><p><img src="%E7%BB%91%E5%AE%9A%E5%AE%8C%E6%AF%95.png" alt=" "></p><p>注意：要求域名备案过！备案！备案！备案！</p><p>之后在<strong>云引擎</strong> -&gt; <strong>部署</strong>位置重新部署。</p><p>重新部署后如下：</p><p><img src="%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2.png" alt=" "></p><p>访问你的二级域名即可，第一次可能会要求输入管理员信息，如果没有提示输入，在<strong>存储</strong>-&gt;<strong>结构化数据</strong>-&gt;<strong>_User</strong>中可以找到用户信息，登录即可访问后台评论数据。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Valine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活！不必想</title>
      <link href="/posts/4a4d8c68/"/>
      <url>/posts/4a4d8c68/</url>
      
        <content type="html"><![CDATA[<p>明天就是五一了，要放假了。提前约了两小朋友劳动节晚上一起聚餐，他两个一个考研成功，一个即将考研，希望他们在自己未来的路上走的笔直，走的长远。</p><p>今天回寝室的路上遇到了棚子，陪我走了一路，一路闲聊。我很喜欢棚子，不是因为他比我能说会道，不是因为他家庭条件比我好，也不是因为他总是乐呵呵的样子。我喜欢他是因为他的那种处事态度，愿意认认真真去享受生活。棚子也总跟我说，“钱是个好东西，没钱不行啊”。但是我觉得，他即使没钱，也活的要比我潇洒。</p><p>我记得我高中的时候<a id="more"></a>，16 岁。我妈说我，“你好好的一个娃，16 岁的身体，怎么 60 岁的心理呢？”当时的我心中不为所动，甚至还有点窃喜，我觉得这就是我下象棋可以做到比别人多看几步的原因，我觉得这是上天赐予我的超能力，成熟一点简直不能再酷。从那时起，我更喜欢思考，虽然我家族遗传（不能背锅）的急性子总添乱，但是还是喜欢装模作样的去思考。慢慢长大了，想的多时不时会让我尝到甜头，但也总会让我感到悲伤和担忧，那种感觉好像，好像下一瞬间这世界上最悲惨的事情就要发生，我却还什么都不知道。</p><p>晚上从健身房出来，手环掉在路上了，可是路上走神儿了，根本没注意，走一半才发现。看着空荡荡的手腕，心中一下子就惆怅了起来，不知怎的就想到了《夏洛特烦恼》（得益于我的跳跃思维，中途可能还经过了手腕、车、混的不好、同学聚会、未来老婆等等信息在内），总之呢就忽然想到了，想着想着眼睛就有点湿。</p><p>每个人呢，都会有自己的未来，未来什么样子？不知道。未来的你，会不会对今天的你感到失望？会不会对你现在做的选择感到后悔？会不会在未来的某一天自豪的和家人说，幸好当年我坚持做了什么什么？这些我们都不会知道。</p><hr><p>我大二之后就和家里打电话少了。不知道为什么，生活就好像紧紧包着我一样，我总是将许多事情都想的很复杂，那种情况不是把多件事情剪不断理还乱，而是针对一件事情，我会想的很远很远，有种过度的瞻前顾后。这种情况让我的情绪长期低靡。回想刚上大学那会多好啊，除了学习什么也不用想，不用考虑未来，我年纪小，大一那时候还未满十八哩。和室友去个网吧人家都不让我进，说我未成年。不用担心每月开支，没有女朋友，交际全看自己心情，偶尔寝室几个大老粗得空了，一起出去下个馆子，每月生活费还能有余。隔几天就跟爸妈汇报一下生活上的事情，给他们讲讲大学寝室里的故事。也偶尔会和室友有点矛盾，爸妈也总是劝我，“你性子急，很大程度上都是你的错，你静下心来好好想想”。现在想来，爸妈真的是我最好的老师。要是任我自己发展下去。怕是要大打出手排个坐次了。幸好按照年龄排了坐次，至今我都是寝室受大家照顾的“老疙瘩”，感谢我的哥哥们，大学的这么多年包容我的坏脾气。</p><p>再说回《夏洛特烦恼》，第一次看这个电影，我真的是从头笑到尾，开心麻花把喜剧演绎的很到位，包袱一个接一个，也都很有意义。我不是什么影评人，没什么资格大肆评论，但是我自己笑的肚子痛了，也笑的眼泪出来了。我喜欢把喜欢的东西一遍一遍看，听音乐遇到喜欢的歌可以循环播放一个多月。慢慢的再去看《夏洛特烦恼》，除了各种包袱带给我的笑点之外，带给我更多的，一点点积累的，是对往事的回忆，是那种失而复得的感情。电影讲的道理很简单，也很老旧，我反正是记得我很早就知道那句话，拥有时不珍惜，失去了才后悔莫及（像极了“曾经有一份真挚的感情摆在我的面前我没有珍惜 等我失去的时候才追悔莫及”—大话西游）。我是凡人，我知道我闭上眼睁开，或者梦醒来也不会回到过去，不会回到那个值得我去轻狂浪荡的高中，我也不会像夏洛一样当众亲吻那个我喜欢的女孩。</p><p>真实的生活就是这样，没有失而复得，没有如约而至，没有那么多的美好向往，但是我能做的也唯有珍惜。</p><p>每一件事情，每一场旅途，每一次陪伴，每一个爱的人，都有着终点。当然这一切不会随着终点而消逝，这一切都被我们整齐的叠好，用袋子密封，然后抽真空，摆放整齐，放在心底的那个角落里（友情提示，不要挖坑埋，有点埋汰）。</p><hr><p>啊，写着写着走神了。。。</p><p>没有谁有第二次人生，也没有谁能有机会重来。</p><p>恍惚间想起我的初中，想起和妈妈在院子里打羽毛球；想起每天妈妈来给我送饭，我们在医院的椅子上吃，吃完我躺妈妈腿上睡一小会；想起周末爸爸搭着班车来市里看我和妈妈，我们一起去吃刘老虎胡辣汤，老板总会给我很多肉丸子，他一定是个好人；想起妈妈脚摔折了，我给她煮方便面，冷水直接就放了面；想起妈妈自豪的跟我说儿子咱这顿饭老妈一共花了不到两块钱；想起我跟妈妈说我考了班里第一，那一顿饭吃着好香；想起那时候我的爸妈都还很年轻，老爸下象棋还可以轻松赢我，老妈走路比我都快，他们把最好的时光都用来陪我了。</p><p style="font-size: 18px; color: #000;">所以，我凭什么不努力，又什么都想要。</p><p>我啊，是一个容易后悔的人，用老妈的话说：不像个爷们儿。大老爷们要拿得起放得下。可是没办法啊，就是总后悔，考研考了本校，后悔了；想重考，硕博连读了，后悔了，想重考；晚上吃了碗面，后悔了，早知道吃个啥啥啥。啊呸～我自己都嫌弃自己了。</p><blockquote><p>我会试着放下往事，管他过去有多美～</p></blockquote><p>其实，每一件事情都是自己做的选择对嘛，家人爱人朋友，只是提供了建议。我这个人吧，通俗点讲，就是倔的跟头驴一样。要是提了别的意见我也不一定采纳哈哈，所以呢，走或者不走，又该怎么走，都是自己做的选择，自己就应该承担，无论对错，无论心里多难过，无论多痛。要这么想啊，自己不去承担，那承担的人就是父母爱人朋友了，舍得么？？舍不得，自己担着把，爷们，要扛得住。</p><p>生活就是这样，躺一天，也过去了；玩一天，也过去了；眼一闭一睁，也就过去了；无论你怎么对待它，它都不理会你，大步向前，毫不停留。若想要从生活中索取，那就追上去吧。<strong>生活！不必想。</strong></p><blockquote><p>再见梧桐林，再见旧时光，再见时我们会怎样。<br>原来我在这里拉扯时光的长河，让它慢些流，而你也在沿河饮马，终于风尘仆仆的来到我身边。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搜索引擎收录</title>
      <link href="/posts/74300b65/"/>
      <url>/posts/74300b65/</url>
      
        <content type="html"><![CDATA[<p>写博客的目的是为了记录自己的学习和生活。记录自己的同时也分享给别人，但是我们的博客怎么才能被搜索到呢？举例子，我的网站是<span class="exturl" data-url="aHR0cHM6Ly94dWRvbmdwby5jbi8=" title="https://xudongpo.cn/">https://xudongpo.cn/<i class="fa fa-external-link"></i></span>，不是有名的网站，不是每个人都知道，那别人通过什么来进入到我的网站呢？</p><blockquote><p>通过推广，比如说我<strong>自己</strong>给朋友介绍：“诶哥们，我有个好东西给你，来看看～”(๑•ั็ω•็ั๑)</p></blockquote><p>博客不是为了让别人来访问才写的，而是为了知识的共享。<a id="more"></a>那就一定要博客的内容足够好，可以先被搜索引擎的爬虫抓去的到，别人可以通过百度搜索：XXXX 方法，然后诶～我的页面展示在词条中了。这才是目的。</p><p>下面进入正题：</p><hr><h2 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h2><p>站点地图即 sitemap，是一个页面，上面放置了网站上需要搜索引擎抓取的所有页面的链接。站点地图可以告诉搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站。</p><h3 id="安装插件："><a href="#安装插件：" class="headerlink" title="安装插件："></a>安装插件：</h3><p>首先安装 Baidu 和 Google 的站点地图生成插件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>修改站点配置文件_config.yml，添加以下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 自动生成sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><h3 id="生成和部署"><a href="#生成和部署" class="headerlink" title="生成和部署"></a>生成和部署</h3><p>hexo g &amp;&amp; hexo d</p><p>此时，进入 public 目录，你会发现里面有 sitemap.xml 和 baidusitemap.xml 两个文件，这就是生成的站点地图。里面包含了网站上所有页面的链接，搜索引擎通过这两个文件来抓取网站页面。</p><ul><li>sitemap.xml — 用来提交给 Google</li><li>baidusitemap.xml — 用来提交给百度</li></ul><hr><h2 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h2><p>接下来我们看看自己的站点有没有被百度收录？在百度搜索中输入 site:xxx.com 回车，例如我的 site:xudongpo.cn，结果如下：</p><p><img src="site%E7%BD%91%E7%AB%99%E6%88%90%E5%8A%9F.png" alt="site网站成功"></p><p>能搜索到结果表示被收录了，没有收录的结果如下：</p><p><img src="site%E7%BD%91%E7%AB%99%E5%A4%B1%E8%B4%A5.png" alt="site网站失败"></p><p>可以点击提交网址，将网址提交。</p><p>我的百度搜索结果如下：</p><p><img src="%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C.png" alt="百度搜索结果"></p><h3 id="百度站长平台"><a href="#百度站长平台" class="headerlink" title="百度站长平台"></a>百度站长平台</h3><p>然后我们需要先注册并登录百度站长平台：<span class="exturl" data-url="aHR0cHM6Ly96aXl1YW4uYmFpZHUuY29tLw==" title="https://ziyuan.baidu.com/">https://ziyuan.baidu.com/<i class="fa fa-external-link"></i></span></p><ol><li>添加站点（省略）</li><li>验证站点<ul><li>这里推荐选择 CNAME 验证，更简单，域名解析以下子就好啦<br><img src="%E7%99%BE%E5%BA%A6CNAME%E8%A7%A3%E6%9E%90.png" alt="百度CNAME解析"></li></ul></li><li>链接提交<ul><li>百度站长平台的链接提交方式分为自动提交和手动提交两种，当然是推荐自动提交啦～～<br><img src="%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E5%9B%BE%E7%89%87.png" alt="自动提交图片"></li></ul></li></ol><h3 id="主动推送（实时）"><a href="#主动推送（实时）" class="headerlink" title="主动推送（实时）"></a>主动推送（实时）</h3><p>主动推送最为快速的提交方式，是被百度收录最快的推送方式。主动推送需要安装以下插件实现：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><ul><li>1.修改站点配置文件_config.yml，添加以下内容：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 1000 ## 提交最新的一个链接</span><br><span class="line">  host: www.xudongpo.cn ## 在百度站长平台中注册的域名</span><br><span class="line">  token: 6Txxxx # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span><br><span class="line">  path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure><ul><li>2.其次，记得查看_config.yml 文件中 url 的值， 必须包含是百度站长平台注册的域名， 比如:</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="line">url: https://xudongpo.cn</span><br><span class="line">root: /</span><br><span class="line"># permalink: :year/:month/:day/:title/</span><br><span class="line">permalink: posts/:abbrlink/</span><br></pre></td></tr></table></figure><ul><li>3.最后，加入新的 deployer:</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repository:</span><br><span class="line">      github: git@github.com:DongpoXu/DongpoXu.github.io.git</span><br><span class="line">      coging: git@git.dev.tencent.com:DongpoXu/DongpoXu.git</span><br><span class="line">    branch: master</span><br><span class="line">  - type: baidu_url_submitter</span><br></pre></td></tr></table></figure><p>其主动推送的实现原理如下：</p><blockquote><p>新链接的产生，hexo generate 会产生一个文本文件，里面包含最新的链接<br>新链接的提交，hexo deploy 会从上述文件中读取链接，提交至百度搜索引擎</p></blockquote><h3 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h3><p>我们需要给博客添加自动推送页面的 JS 代码，在每次页面被访问时，页面 URL 将立即被推送给百度。</p><p>修改主题配置文件中 baidu_push 为 true</p><p>在 theme/next/source/js 文件夹下新建 baidu.js，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (curProtocol === <span class="string">&quot;https&quot;</span>) &#123;</span><br><span class="line">    bp.src = <span class="string">&quot;https://zz.bdstatic.com/linksubmit/push.js&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    bp.src = <span class="string">&quot;http://push.zhanzhang.baidu.com/push.js&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;script&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">  s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>然后我们需要在每个博文页面中添加 baidu.js 的脚本引用，所以在根目录 scaffolds/post.md 中添加</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/baidu.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这样我们之后的每个博文页面都会添加自动推送的这个脚本在内。</p><h3 id="sitemap-提交"><a href="#sitemap-提交" class="headerlink" title="sitemap 提交"></a>sitemap 提交</h3><p>关于博客的设置已经完毕了，接下来我们需要将生成的站点地图(sitemap)提交给百度了。</p><ul><li>1.在提交 sitemap 之前，我们先访问以下我们之前生成的 sitemap 文件测试是否成功</li></ul><p>在浏览器输入<a href="https://www.xudongpo.cn/baidusitemap.xml">https://www.xudongpo.cn/baidusitemap.xml</a></p><p><img src="sitemap%E7%BD%91%E9%A1%B5.png" alt="sitemap网页"></p><ul><li>2.提交 sitemap</li></ul><p><img src="sitemap%E6%8F%90%E4%BA%A4.png" alt="sitemap提交"></p><ul><li>3.输入验证码后提交即可，一般情况下，百度会在一小时内处理该文件</li></ul><h3 id="添加-robots-协议"><a href="#添加-robots-协议" class="headerlink" title="添加 robots 协议"></a>添加 robots 协议</h3><p>在./source/下添加 robots.txt 文件，内容如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /home/</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /about/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: https://xudongpo.cn/sitemap.xml</span><br><span class="line">Sitemap: https://xudongpo.cn/baidusitemap.xml</span><br></pre></td></tr></table></figure><p>百度收录到这里就完事了，接下来看 Google。</p><hr><h2 id="Google-收录"><a href="#Google-收录" class="headerlink" title="Google 收录"></a>Google 收录</h2><p>Google 收录相比百度收录要简单一些，进入<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS93ZWJtYXN0ZXJzLw==" title="https://www.google.com/webmasters/">Goole 站长平台<i class="fa fa-external-link"></i></span>，需要翻墙。</p><p>点击你的站点，如果没有请先添加站点；</p><p>然后点击控制台–&gt;抓取–&gt;站点地图，点击右上角添加/测试站点地图按钮，将你的 sitemap.xml 提交测试，测试成功之后重复该步骤进行添加！</p><hr><h2 id="关于优化"><a href="#关于优化" class="headerlink" title="关于优化"></a>关于优化</h2><p>SEO 优化具体再说～</p><p>如果在过程中遇到什么问题，您可以在评论区提问，也可以在关于页面联系我。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 搜索引擎收录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加文章结束语</title>
      <link href="/posts/7b48a044/"/>
      <url>/posts/7b48a044/</url>
      
        <content type="html"><![CDATA[<p>每次文章写完后，在末尾我都喜欢加上：<strong>完结～撒花～</strong> 一类的标识，每个文章都手动去加的话显得很傻～所以考虑利用 Hexo 的模版自动为每个文章添加结束语。</p><h2 id="新建模版"><a href="#新建模版" class="headerlink" title="新建模版"></a>新建模版</h2><p>首先新建我们的结束语模版文件</p><p>在/themes/next/layout/_macro 中新建 passage-end-tag.swig 文件，添加代码至该文件中：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &lt;div style&#x3D;&quot;text-align:center;color: #555;font-size:18px;&quot;&gt;End~~ &lt;i class&#x3D;&quot;fa fa-paw&quot;&gt;&lt;&#x2F;i&gt; 撒花ฅ&gt;ω&lt;*ฅ花撒&lt;&#x2F;div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="修改模版"><a href="#修改模版" class="headerlink" title="修改模版"></a>修改模版</h2><p>修改 post.swig<br>打开/themes/next/layout_macro/post.swig 文件，在 post-body 后找一个合适的位置，添加下面内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if theme.passage_end_tag.enabled and not is_index %&#125;</span><br><span class="line">    &#123;% include &#39;passage-end-tag.swig&#39; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="修改-config"><a href="#修改-config" class="headerlink" title="修改 _config"></a>修改 _config</h2><p>打开主题配置文件_config.yml,在末尾添加：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章结束语</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure><p>之后效果如下所示～</p><p><img src="%E5%AE%8C%E6%88%90%E6%95%88%E6%9E%9C.png" alt="完成效果"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebStorm配置Sass</title>
      <link href="/posts/40ea6dbe/"/>
      <url>/posts/40ea6dbe/</url>
      
        <content type="html"><![CDATA[<p>最近有些软件重装了一下，很多插件配置都需要再来一次，发现有些之前的配置问题还是会遇到，就做一些总结，方便自己也方便大家。</p><p>我个人比较喜欢 JetBrains 的 IDE，用起来蛮舒服，很省心的感觉。</p><p>本文主要将 WebStorm 下配置 Sass，以及 Sass 的自动编译。</p><h2 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h2><p>什么是 Sass，我引用官网的一句话</p><a id="more"></a><blockquote><p>Sass 是对 CSS 的扩展，让 CSS 语言更强大、优雅。 它允许你使用变量、嵌套规则、 mixins、导入等众多功能， 并且完全兼容 CSS 语法。 Sass 有助于保持大型样式表结构良好， 同时也让你能够快速开始小型项目， 特别是在搭配 Compass 样式库一同使用时。</p></blockquote><p>更多 Sass 的使用请阅读<span class="exturl" data-url="aHR0cDovL3Nhc3MuYm9vdGNzcy5jb20=" title="http://sass.bootcss.com">Sass 中文文档<i class="fa fa-external-link"></i></span></p><p>Sass 现在常见的编译方法有两种，一种是直接用命令行编译；另一种就是利用一些编译工具；例如：腾讯的 koala。上网查询后，发现 WebStorm 中集成了 Sass 的编译。</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><p>Sass 是用 Ruby 语言写的，但是两者的语法没有关系，所以学 Sass 不用学 Ruby，只是必须先安装 Ruby，然后再安装 Sass。</p><p>Linux 和 Mac 已自带 Ruby，不用再安装。Windows 用户可以从<span class="exturl" data-url="aHR0cHM6Ly9ydWJ5aW5zdGFsbGVyLm9yZy9kb3dubG9hZHMv" title="https://rubyinstaller.org/downloads/">这里<i class="fa fa-external-link"></i></span>下载 Ruby 的安装程序。</p><p>安装过程没什么麻烦的，安装指引安装即可。完成后，在命令行中输入 ruby -v 查看 ruby 版本号，如果可以正确显示版本号，说明安装成功。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ruby -v</span><br><span class="line">ruby 2.3.7p456 (2018-03-28 revision 63024) [universal.x86_64-darwin18]</span><br></pre></td></tr></table></figure><p>Ruby 安装完毕后，我们要安装 Sass，在命令行中输入 gem install Sass，安装完毕输入 sass -v，如果显示正确版本号，说明 Saaa 安装成功。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sass -v</span><br><span class="line">Ruby Sass 3.7.2</span><br></pre></td></tr></table></figure><h2 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h2><p>打开 WebStorm 设置界面，在顶部搜索 File Watchers，在右边新建 SCSS 项，过程如下。</p><p><img src="FileWatchers%E8%AE%BE%E7%BD%AE.png" alt="FileWatchers设置"></p><p>弹出 SASS 设置界面：</p><p><img src="SASS%E8%AE%BE%E7%BD%AE.png" alt="SASS设置"></p><h3 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h3><p>Program 为你所安装的 Sass 的路径，路径为自己系统对应的 Ruby/bin/sass，例如我的 MAC 系统对应路径为 /usr/local/bin/sass。</p><h3 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h3><p>Arguments 为配置参数，常见的配置参数如下：</p><ul><li>–style 表示解析后的 css 是什么格式，如：–style compressed，有四种取值分别为：nested，expanded，compact，compressed.</li><li>–sourcemap 表示开启 sourcemap 调试。开启 sourcemap 调试后，会生成一个后缀名为.css.map 文件。 webstorm 是默认开启 sourcemap 的，所以可以不填写</li><li>–debug-info 表示开启 debug 信息，升级到 3.3.0 之后因为 sourcemap 更高级，这个 debug-info 就不太用了。</li></ul><p>四种 –style 对应的编译后的样式如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// SCSS</span><br><span class="line">a &#123;</span><br><span class="line">  color: #ccc;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">li &#123;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// nested 嵌套型</span><br><span class="line">a &#123;</span><br><span class="line">  color: #ccc; &#125;</span><br><span class="line">  a:hover &#123;</span><br><span class="line">    color: #fff; &#125;</span><br><span class="line"></span><br><span class="line">li &#123;</span><br><span class="line">  float: left; &#125;</span><br><span class="line"></span><br><span class="line">// expanded 展开型</span><br><span class="line">a &#123;</span><br><span class="line">  color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">a:hover &#123;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li &#123;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// compact 紧凑型</span><br><span class="line">a &#123; color: #ccc; &#125;</span><br><span class="line">a:hover &#123; color: #fff; &#125;</span><br><span class="line"></span><br><span class="line">li &#123; float: left; &#125;</span><br><span class="line"></span><br><span class="line">// compressed 压缩型</span><br><span class="line">a&#123;color:#ccc&#125;a:hover&#123;color:#fff&#125;li&#123;float:left&#125;</span><br></pre></td></tr></table></figure><h3 id="Output-Path"><a href="#Output-Path" class="headerlink" title="Output Path"></a>Output Path</h3><p>Output Path 是输出文件对应的路径，你想将 SCSS 编译后的 CSS 文件放在什么地方是由这个决定的。</p><p>至此新建 SCSS 样式文件，编辑完毕，每次更改保存，都会自动的编译出对应的 CSS 样式文件，WebStorm 配置 Sass 完成。</p>]]></content>
      
      
      <categories>
          
          <category> 编程软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebStorm </tag>
            
            <tag> Sass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派&amp;Nginx服务器</title>
      <link href="/posts/f0e08f8f/"/>
      <url>/posts/f0e08f8f/</url>
      
        <content type="html"><![CDATA[<p>前些日子跟着慕课网做了一个 Vue.js 仿饿了么 App 的实战项目，讲到部署的部分，正好手上有个树莓派闲置，那就搭个服务器试试吧。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>搭建服务器目的是将 Vue.js 实战项目部署在服务器上，加深对服务器部署的熟练度</p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p><strong>树莓派 3b+</strong> &amp;&amp; <strong>电源</strong> &amp;&amp; <strong>MBP</strong> &amp;&amp; <strong>路由器</strong></p><a id="more"></a><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>iTerm2 -&gt; ssh 连接方式</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul><li>linux (arm v7l) (32 位系统)</li><li>nodejs (v10.15.3)</li><li>npm (6.4.1)</li><li>nginx (nginx/1.10.3)</li></ul><h2 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h2><h3 id="连接树莓派"><a href="#连接树莓派" class="headerlink" title="连接树莓派"></a>连接树莓派</h3><p>将树莓派开机，命令行运行 ifconfig，查看树莓派 IP 地址</p><p>得到 192.168.1.137</p><p>在 iterm2 窗口 输入命令 ssh <span class="exturl" data-url="bWFpbHRvOnBpQDE5Mi4xNjguMS4xMzc=" title="mailto:pi@192.168.1.137">pi@192.168.1.137<i class="fa fa-external-link"></i></span> 输入密码 ***</p><p>连接成功</p><img src="连接树莓派.jpg" width="900"><h3 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h3><p>系统自带 nodejs 版本过老，为 v0.10 版本，所以要去<span class="exturl" data-url="aHR0cDovL25vZGVqcy5jbi9kb3dubG9hZC8=" title="http://nodejs.cn/download/">官网<i class="fa fa-external-link"></i></span>下载最新的 nodejs</p><p>使用命令 uname -a 查询系统信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pi@PI:~ $ uname -a</span><br><span class="line">Linux PI 4.14.50-v7+ #1122 SMP Tue Jun 19 12:26:26 BST 2018 armv7l GNU&#x2F;Linux</span><br></pre></td></tr></table></figure><p>在官网选中对应的 linux 二进制文件</p><p><img src="node%E5%AE%98%E7%BD%91.png" alt="node官网"></p><ol><li><p>在命令行输入 wget + <strong>链接</strong></p></li><li><p>然后 tar -xvf + <strong>文件名</strong> （-xvf 代表：解压，显示所有过程，使用档案名字）</p></li><li><p>mv <strong>文件名</strong> nodejs(重命名)</p></li><li><p>cd nodejs/bin</p></li><li><p>./node -v（此时系统 node 版本为 0.10，此处 node 版本为 10.15）</p></li><li><p>pwd 获取当前文件位置</p></li><li><p>ln -s /home/pi/nodejs/bin/node /usr/local/bin（修改环境变量）</p></li><li><p>ln -s /home/pi/nodejs/bin/npm /usr/local/bin</p></li><li><p>nano /etc/profile（修改 PATH 强制指向）</p></li><li><p>source /etc/profile</p></li><li><p>安装完成</p></li></ol><h3 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h3><ol><li><p>cd ~ 进入根目录</p></li><li><p>配置 git (不详细说了就)</p></li><li><p>从 git 克隆 Vue-sell 项目</p></li><li><p>cd Vue-sell (进入文件夹)</p></li><li><p>npm i (安装依赖)</p></li><li><p>npm run build (打包编译)</p></li><li><p><strong>nohup node prod.server.js &amp;</strong> (进程常驻，退出服务器进程不终结)</p></li><li><p>IP+端口可以访问</p></li></ol><h3 id="域名申请（此处不涉及）"><a href="#域名申请（此处不涉及）" class="headerlink" title="域名申请（此处不涉及）"></a>域名申请（此处不涉及）</h3><h2 id="nginx-线上部署"><a href="#nginx-线上部署" class="headerlink" title="nginx 线上部署"></a>nginx 线上部署</h2><h3 id="树莓派安装-nginx"><a href="#树莓派安装-nginx" class="headerlink" title="树莓派安装 nginx"></a>树莓派安装 nginx</h3><ul><li>命令 <strong>sudo apt-get install nginx</strong></li></ul><h3 id="启动-nginx"><a href="#启动-nginx" class="headerlink" title="启动 nginx"></a>启动 nginx</h3><ul><li>命令 <strong>sudo /etc/init.d/nginx start</strong></li></ul><h3 id="测试安装"><a href="#测试安装" class="headerlink" title="测试安装"></a>测试安装</h3><p>局域网浏览器访问：192.168.1.137 搭建成功</p><p><img src="nginx%E6%B5%8B%E8%AF%95.png" alt="nginx测试"></p><h3 id="修改-nginx-配置文件"><a href="#修改-nginx-配置文件" class="headerlink" title="修改 nginx 配置文件"></a>修改 nginx 配置文件</h3><ul><li>命令 <strong>sudo nano /etc/nginx/sites-available/default</strong></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;  # 监听80端口</span><br><span class="line">  server_name 192.168.1.137;    # 服务端名称（域名）</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    rewrite ^/ https://github.com/XDP; # 重定向</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /sell/ &#123; # 反向代理</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_set_header X-Nginx-Proxy true;</span><br><span class="line">    proxy_pass http://127.0.0.1:8900/;  # 定位到本机8900端口</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 注意：nodejs的服务依然需要打开，不然无法获取数据</span><br></pre></td></tr></table></figure><h3 id="重新加载"><a href="#重新加载" class="headerlink" title="重新加载"></a>重新加载</h3><ul><li>命令 <strong>sudo /etc/init.d/nginx reload</strong></li></ul><h3 id="关闭-nginx"><a href="#关闭-nginx" class="headerlink" title="关闭 nginx"></a>关闭 nginx</h3><ul><li>命令 <strong>sudo /etc/init.d/nginx stop</strong></li></ul><h3 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h3><p><strong>control + D</strong> 断开和树莓派连接</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>连接路由器</p><p>访问<strong>192.168.1.137</strong>，成功重定向至 Github</p><p>访问<strong>192.168.1.137/sell/</strong>，反向代理至 Vue-sell</p><h2 id="添加项目"><a href="#添加项目" class="headerlink" title="添加项目"></a>添加项目</h2><p>将之前写过的 List-App 项目添加至服务器的 9000 端口</p><h3 id="编写-nodejs-服务器"><a href="#编写-nodejs-服务器" class="headerlink" title="编写 nodejs 服务器"></a>编写 nodejs 服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&#x27;&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;App listening at port 8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="转移到树莓派"><a href="#转移到树莓派" class="headerlink" title="转移到树莓派"></a>转移到树莓派</h3><p>git pull 和 Vue-sell 是一样的</p><p>然后运行 npm i 以及 <strong>nohup node prod.server.js &amp;</strong></p><h3 id="修改-nginx-配置"><a href="#修改-nginx-配置" class="headerlink" title="修改 nginx 配置"></a>修改 nginx 配置</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /list/ &#123; # 反向代理</span><br><span class="line">  proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">  proxy_set_header Host $http_host;</span><br><span class="line">  proxy_set_header X-Nginx-Proxy true;</span><br><span class="line">  proxy_pass http://127.0.0.1:9000/;  # 定位到本机9000端口</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="再次装载"><a href="#再次装载" class="headerlink" title="再次装载"></a>再次装载</h3><p>实现效果</p><table><thead><tr><th>效果图-sell</th><th>效果图-list</th></tr></thead><tbody><tr><td><img src="效果图-sell.png" height="300" align=center></td><td><img src="效果图-list.png" height="300" align=center></td></tr></tbody></table><h2 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h2><p>在访问 192.168.1.137/list 时 network 中提示有一个 XDP 的图标访问。</p><p>问题如图所示：</p><p><img src="%E8%AD%A6%E5%91%8Aconsole.png" alt="警告console"><br><img src="%E8%AD%A6%E5%91%8Anetwork.png" alt="警告network"></p><p>怀疑是重定向到 github 的跳转导致的问题。</p><p>修改了重定向位置，问题消失，再改回来，问题再没出现。</p><h2 id="额外补充"><a href="#额外补充" class="headerlink" title="额外补充"></a>额外补充</h2><p>在 setting.json 中添加 <strong>“markdownlint.config”: {“MD033”: false},</strong></p><p>配置 markdown no-inline-html 为 false 可以在 markdown 中添加 html 语法，便于修改图片尺寸。</p><p>使用 nginx 做服务器时，不要将之与 nodejs 混淆，nodejs 是开启了一个服务然后监听了端口，nginx 的作用是通过反向代理将不同的访问对应到相应的端口上去。</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS实现焦点轮播图</title>
      <link href="/posts/56c67d5c/"/>
      <url>/posts/56c67d5c/</url>
      
        <content type="html"><![CDATA[<p>轮播图是在大家学习 JavaScript 时常写的小项目，网络上相关的资源也很多。我在学习的过程中，将写轮播图的经历做一些简单的总结，希望大家在看后能有所收获，如果有不对的地方，请大家在留言区指出。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="轮播图是什么"><a href="#轮播图是什么" class="headerlink" title="轮播图是什么"></a>轮播图是什么</h3><p>Q:轮播图是什么？ A:简单解释：所谓的轮播图，就是几张图片轮流显示。</p><p>我们先随便找个网站访问一下，例如 <strong><span class="exturl" data-url="aHR0cHM6Ly93d3cudGFvYmFvLmNvbQ==" title="https://www.taobao.com">淘宝网<i class="fa fa-external-link"></i></span></strong> 首页中间这一块。</p><a id="more"></a><p><img src="%E6%B7%98%E5%AE%9D%E7%BD%91%E9%A6%96%E9%A1%B5%E8%BD%AE%E6%92%AD%E5%9B%BE.png" alt="淘宝网首页轮播图"></p><p>中间的滚动区域就是轮播图。</p><h3 id="哪些知识点"><a href="#哪些知识点" class="headerlink" title="哪些知识点"></a>哪些知识点</h3><p>通过轮播图，我们可以巩固(学到)什么知识点呢？</p><ol><li>DOM 操作 HTML</li><li>事件运用</li><li>定时器</li><li>无限滚动技巧</li><li>JavaScript 动画</li><li>函数递归</li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><hr><p>个人建议：作为新手的我们，不管要做多么高大上的特效，都<strong>先完成静态页面，再去添加动态的处理！！！切记切记！</strong></p><hr><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p>轮播图的实现效果：即在一个窗口，鼠标移入后左右箭头会出现，可以点击动画切换图片，同时下面的小圆点会跟随切换（点击小圆点可以实现同样的功能），可以在此基础上循环播放。</p><p>总结：轮播图片具备以下特点：</p><ol><li>点击左右两边的箭头切换图片</li><li>当鼠标移出图片范围，自动间隔时间切换；当鼠标移入图片范围，停止自动切换</li><li>切换到某一张图片时，底部的圆点样式也跟着改变</li><li>点击底部圆点也会切换到相应位置的图片</li></ol><h3 id="基本布局"><a href="#基本布局" class="headerlink" title="基本布局"></a>基本布局</h3><p>我们首先要明白轮播图的实现原理和基本布局：</p><p>将一系列大小相等的图片平铺，利用 CSS 布局只显示一张图片，其余隐藏。通过 JS 代码修改图片的偏移量实现切换，按钮绑定切换事件，或者定时器实现自动播放。</p><p>初始基本结构如下：</p><ul><li>最外层需要有一个容器包裹着（通常是 div，类型定义为 container）</li><li>容器设置宽高，以及 overflow 为 hidden，超出宽高部分隐藏，</li><li>容器里面包含着两个容器：imgList 和 btnList 以及两个 a 标签（左右按钮）</li><li>imgList 中包裹着所有的图片，宽为所有图片的总宽度，position 为 absolute（通过改变 left 来实现图片轮播的效果）</li><li>btnList 中包裹着轮播图下部的指示圆点，position 也为 absolute</li></ul><p>样式可以自己按照自己想要的修改，在此我们主要将关键部分。并且完成代码。</p><p>为节省页面空间，之后代码均不格式化，请大家自行修改。</p><hr><h2 id="html-结构"><a href="#html-结构" class="headerlink" title="html 结构"></a>html 结构</h2><p>html 代码按照我们讲的基本布局完成，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--主容器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--图片容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;imgList&quot;</span> <span class="attr">style</span>=<span class="string">&quot;left: -600px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/5.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;4&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/5.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--按钮容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btnList&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;on&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">index</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">index</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--翻页按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;prev&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrow&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;next&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrow&quot;</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码说明：btnList 中的每一个 span 标签我们添加了自定义属性 index，是为了在 JS 处理时更方便；imgList 定义了内联属性，是为了初始显示第一张图片。</p><h2 id="CSS-样式"><a href="#CSS-样式" class="headerlink" title="CSS 样式"></a>CSS 样式</h2><p>代码的 CSS 样式由我们各自喜好定制即可，代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">text-decoration</span>: none; &#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">padding</span>: <span class="number">20px</span>; &#125;</span><br><span class="line"><span class="selector-id">#container</span> &#123; <span class="attribute">width</span>: <span class="number">600px</span>; <span class="attribute">height</span>: <span class="number">400px</span>; <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#333</span>; <span class="attribute">overflow</span>: hidden; <span class="attribute">position</span>: relative; &#125;</span><br><span class="line"><span class="selector-id">#imgList</span> &#123; <span class="attribute">width</span>: <span class="number">4200px</span>; <span class="attribute">height</span>: <span class="number">400px</span>; <span class="attribute">position</span>: absolute; <span class="attribute">z-index</span>: <span class="number">1</span>; &#125;</span><br><span class="line"><span class="selector-id">#imgList</span> <span class="selector-tag">img</span> &#123; <span class="attribute">float</span>: left; &#125;</span><br><span class="line"><span class="selector-id">#btnList</span> &#123; <span class="attribute">position</span>: absolute; <span class="attribute">height</span>: <span class="number">10px</span>; <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">z-index</span>: <span class="number">2</span>; <span class="attribute">bottom</span>: <span class="number">20px</span>; <span class="attribute">left</span>: <span class="number">250px</span>;&#125;</span><br><span class="line"><span class="selector-id">#btnList</span> <span class="selector-tag">span</span> &#123; <span class="attribute">cursor</span>: pointer; <span class="attribute">float</span>: left; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>; <span class="attribute">width</span>: <span class="number">10px</span>; <span class="attribute">height</span>: <span class="number">10px</span>; <span class="attribute">border-radius</span>: <span class="number">50%</span>; <span class="attribute">background</span>: <span class="number">#333</span>; <span class="attribute">margin-right</span>: <span class="number">5px</span>; &#125;</span><br><span class="line"><span class="selector-id">#btnList</span> <span class="selector-class">.on</span> &#123; <span class="attribute">background</span>: orangered; &#125;</span><br><span class="line"><span class="selector-class">.arrow</span> &#123; <span class="attribute">cursor</span>: pointer; <span class="attribute">display</span>: none; <span class="attribute">line-height</span>: <span class="number">39px</span>; <span class="attribute">text-align</span>: center; <span class="attribute">font-size</span>: <span class="number">36px</span>; <span class="attribute">font-weight</span>: bold; <span class="attribute">width</span>: <span class="number">40px</span>; <span class="attribute">height</span>: <span class="number">40px</span>; <span class="attribute">position</span>: absolute; <span class="attribute">z-index</span>: <span class="number">2</span>; <span class="attribute">top</span>: <span class="number">180px</span>; <span class="attribute">background-color</span>: <span class="built_in">RGBA</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>); <span class="attribute">color</span>: <span class="number">#fff</span>; &#125;</span><br><span class="line"><span class="selector-class">.arrow</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">background-color</span>: <span class="built_in">RGBA</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.7</span>); &#125;</span><br><span class="line"><span class="selector-id">#container</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.arrow</span> &#123; <span class="attribute">display</span>: block; &#125;</span><br><span class="line"><span class="selector-id">#prev</span> &#123; <span class="attribute">left</span>: <span class="number">20px</span>; &#125;</span><br><span class="line"><span class="selector-id">#next</span> &#123; <span class="attribute">right</span>: <span class="number">20px</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="JS-代码书写"><a href="#JS-代码书写" class="headerlink" title="JS 代码书写"></a>JS 代码书写</h2><p>接下来让我们一步一步完成。</p><h3 id="获取页面的-DOM-元素，如下："><a href="#获取页面的-DOM-元素，如下：" class="headerlink" title="获取页面的 DOM 元素，如下："></a>获取页面的 DOM 元素，如下：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> oImgList = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;imgList&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> oButtons = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btnList&#x27;</span>).getElementsByTagName(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> oPrev = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;prev&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> oNext = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;next&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="给两个按钮绑定点击事件，来移动-imgList："><a href="#给两个按钮绑定点击事件，来移动-imgList：" class="headerlink" title="给两个按钮绑定点击事件，来移动 imgList："></a>给两个按钮绑定点击事件，来移动 imgList：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">oPrev.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  oImgList.style.left = <span class="built_in">parseInt</span>(oImgList.style.left) + <span class="number">600</span> + <span class="string">&#x27;px&#x27;</span> <span class="comment">// 右移600px</span></span><br><span class="line">&#125;</span><br><span class="line">oNext.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  oImgList.style.left = <span class="built_in">parseInt</span>(oImgList.style.left) - <span class="number">600</span> + <span class="string">&#x27;px&#x27;</span> <span class="comment">// 左移600px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象出-animate"><a href="#抽象出-animate" class="headerlink" title="抽象出 animate"></a>抽象出 animate</h3><p>两个点击事件中移动 imgList 的代码我们可以抽象出来，改为如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">offsetLeft</span>) </span>&#123;</span><br><span class="line">  oImgList.style.left = <span class="built_in">parseInt</span>(oImgList.style.left) + offsetLeft + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">oPrev.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  animate(<span class="number">600</span>) <span class="comment">// 整体右移600px，相当于往前翻页</span></span><br><span class="line">&#125;</span><br><span class="line">oNext.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  animate(-<span class="number">600</span>) <span class="comment">// 整体左移600px，相当于往后翻页</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时按下 next 按钮和 prev 按钮可以实现翻页，但是没有边界判断，会翻出空白来，所以我们添加边界条件。</p><p>当我们翻页<strong>到第一张</strong>时，再翻上一页，会翻到第 5 张图，所以我们在第一张前面添加了一个<strong>第五张图片的缓冲图</strong>；<strong>同理</strong>当你翻页到<strong>第五张</strong>之后，再翻下一页，会到<strong>第一张的缓冲图</strong>。</p><p>此处我多做一些说明：</p><p>假设我们有 N 张照片，把容器宽度设置为<strong>N+2</strong>个图片的宽度，示例如下图，两端填充如图，当处于一端时，且即将进入循环状态的时候，如第二张图，从状态 1 滑动到状态 2，在滑动结束的时候，将当前的位置直接转到状态 3，直接修改容器偏移，在视觉上是循环的。</p><p><img src="%E6%97%A0%E9%99%90%E6%BB%9A%E5%8A%A8%E5%8E%9F%E7%90%86.png" alt="无限滚动原理"></p><h3 id="添加边界条件"><a href="#添加边界条件" class="headerlink" title="添加边界条件"></a>添加边界条件</h3><p>将 animate 改为如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">offsetLeft</span>) </span>&#123;</span><br><span class="line">  oImgList.style.left = <span class="built_in">parseInt</span>(oImgList.style.left) + offsetLeft + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">parseInt</span>(oImgList.style.left) &gt; -<span class="number">600</span>) &#123; <span class="comment">// 抵达第5张的预设图</span></span><br><span class="line">    oImgList.style.left = -<span class="number">3000</span> + <span class="string">&#x27;px&#x27;</span> <span class="comment">// 切换到第五张图</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">parseInt</span>(oImgList.style.left) &lt; -<span class="number">3000</span>) &#123;</span><br><span class="line">    oImgList.style.left = -<span class="number">600</span> + <span class="string">&#x27;px&#x27;</span> <span class="comment">// 切换到第一张图</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将代码中的冗余变量做提取：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">offsetLeft</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newLeft = <span class="built_in">parseInt</span>(oImgList.style.left) + offsetLeft</span><br><span class="line">  oImgList.style.left = newLeft + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (newLeft &gt; -<span class="number">600</span>) &#123; <span class="comment">// 抵达第5张的预设图</span></span><br><span class="line">    oImgList.style.left = -<span class="number">3000</span> + <span class="string">&#x27;px&#x27;</span> <span class="comment">// 切换到第五张图</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (newLeft &lt; -<span class="number">3000</span>) &#123; <span class="comment">// 抵达第一张预设图</span></span><br><span class="line">    oImgList.style.left = -<span class="number">600</span> + <span class="string">&#x27;px&#x27;</span> <span class="comment">// 切换到第一张图</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="%E6%8C%89%E9%92%AE%E5%9F%BA%E7%A1%80%E6%95%88%E6%9E%9C%E5%AE%8C%E6%88%90.gif" alt="按钮基础效果完成"><br>可以看到基础效果已经完成。</p><h3 id="绑定圆点跟随效果"><a href="#绑定圆点跟随效果" class="headerlink" title="绑定圆点跟随效果"></a>绑定圆点跟随效果</h3><p>我们在按钮按下轮播图轮播的时候，需要底部圆点也跟随移动用作指示效果：</p><p>首先我们定义一个变量 index 方便操作，我们要在每次点击时显示圆点变化，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">oPrev.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  index -= <span class="number">1</span> <span class="comment">// 角标值减1</span></span><br><span class="line">  showButton() <span class="comment">// 显示圆点变化</span></span><br><span class="line">  animate(<span class="number">600</span>) <span class="comment">// 整体右移600px，相当于往前翻页</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">oNext.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  index += <span class="number">1</span></span><br><span class="line">  showButton() <span class="comment">// 显示圆点变化</span></span><br><span class="line">  animate(-<span class="number">600</span>) <span class="comment">// 整体左移600px，相当于往后翻页</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么显示部分的代码如何编写呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oButtons.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (oButtons[i].className === <span class="string">&#x27;on&#x27;</span>) &#123; <span class="comment">// 其余圆点样式关闭</span></span><br><span class="line">      oButtons[i].className = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">break</span> <span class="comment">// 如果已经清除了圆点样式，直接跳出循环，减少资源消耗</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  oButtons[index - <span class="number">1</span>].className = <span class="string">&#x27;on&#x27;</span> <span class="comment">// 当前索引的圆点点亮</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时尝试，会发现，圆点跟着变化了，但是圆点并没有设置边界条件，接下来给圆点设置边界：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">oPrev.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">1</span>) &#123; <span class="comment">// 边界设置</span></span><br><span class="line">    index = <span class="number">5</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    index -= <span class="number">1</span> <span class="comment">// 角标值减1</span></span><br><span class="line">  &#125;</span><br><span class="line">  showButton() <span class="comment">// 显示圆点变化</span></span><br><span class="line">  animate(<span class="number">600</span>) <span class="comment">// 整体右移600px，相当于往前翻页</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">oNext.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">5</span>) &#123; <span class="comment">//边界设置</span></span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  showButton() <span class="comment">// 显示圆点变化</span></span><br><span class="line">  animate(-<span class="number">600</span>) <span class="comment">// 整体左移600px，相当于往后翻页</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="%E5%9C%86%E7%82%B9%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%E5%AE%8C%E6%88%90.gif" alt="圆点动画效果完成"></p><h3 id="绑定圆点点击事件"><a href="#绑定圆点点击事件" class="headerlink" title="绑定圆点点击事件"></a>绑定圆点点击事件</h3><p>我们想要实现在点击圆点的时候，图片也会进行切换，思考一下和点击翻页有什么不同？？</p><p>翻页时：每次只会左移和右移固定的宽度，但是点击圆点时，左移和右移的宽度需要我们计算得出，比如从 1 到 3 那就需要移动 1200px。<br>如何实现呢？这时候我们的自定义属性就有用了，我们在 html 代码中对每个 span 标签添加了 index 这个自定义属性，可以通过 index 属性的值和程序中的 index 来计算宽度。代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oButtons.length; i++) &#123;</span><br><span class="line">  oButtons[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 遍历圆点，绑定点击事件</span></span><br><span class="line">    <span class="keyword">let</span> myIndex = <span class="built_in">parseInt</span>(<span class="built_in">this</span>.getAttribute(<span class="string">&#x27;index&#x27;</span>)) <span class="comment">// 获取自定义属性值</span></span><br><span class="line">    <span class="keyword">let</span> offsetLeft = -<span class="number">600</span> * (myIndex - index) <span class="comment">// 计算宽度</span></span><br><span class="line">    animate(offsetLeft) <span class="comment">// 移动</span></span><br><span class="line">    index = myIndex <span class="comment">// 更新index值</span></span><br><span class="line">    showButton() <span class="comment">// 更新圆点动画</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>如果当前页面在第一张图片，再次点击第一张图片，不应该进行切换，所以我们应该给是否点击当前页面做判断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oButtons.length; i++) &#123;</span><br><span class="line">  oButtons[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 遍历圆点，绑定点击事件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.className === <span class="string">&#x27;on&#x27;</span>) &#123;  <span class="comment">// 判断是否有必要执行</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们的基本页面已经完成了，接下来完成动画效果部分。</p><h3 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h3><p>动画效果我们不采用 CSS3 实现，全部采用 JS 实现，利用 JS 的递归，在一定时间之内，对 left 的偏移量进行细分，细分过后逐步实现。</p><p>修改 animate 函数如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">offsetLeft</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newLeft = <span class="built_in">parseInt</span>(oImgList.style.left) + offsetLeft</span><br><span class="line">  <span class="keyword">let</span> time = <span class="number">300</span> <span class="comment">// 位移总时间</span></span><br><span class="line">  <span class="keyword">let</span> interval = <span class="number">10</span> <span class="comment">// 位移间隔时间</span></span><br><span class="line">  <span class="keyword">let</span> speed = offset / (time / interval) <span class="comment">// 每次的位移量</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      (speed &lt; <span class="number">0</span> &amp;&amp; <span class="built_in">parseInt</span>(oImgList.style.left) &gt; newLeft) ||</span><br><span class="line">      (speed &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">parseInt</span>(oImgList.style.left) &lt; newLeft)</span><br><span class="line">    ) &#123; <span class="comment">// 判断条件</span></span><br><span class="line">      oImgList.style.left = <span class="built_in">parseInt</span>(oImgList.style.left) + speed + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(go, interval) <span class="comment">// 间隔10ms再次执行go（递归）</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      oImgList.style.left = newLeft + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      <span class="keyword">if</span> (newLeft &gt; -<span class="number">600</span>) &#123; <span class="comment">// 抵达第5张的预设图</span></span><br><span class="line">        oImgList.style.left = -<span class="number">3000</span> + <span class="string">&#x27;px&#x27;</span> <span class="comment">// 切换到第五张图</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (newLeft &lt; -<span class="number">3000</span>) &#123; <span class="comment">// 抵达第一张预设图</span></span><br><span class="line">        oImgList.style.left = -<span class="number">600</span> + <span class="string">&#x27;px&#x27;</span> <span class="comment">// 切换到第一张图</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  go() <span class="comment">// 执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时基本动画已经执行完毕，但是会有 bug，在动画执行过程中，点击到按钮或者圆点，会再次触发动画，导致不规则情况出现。如下图：</p><p><img src="%E5%8A%A8%E7%94%BB%E4%B8%8D%E8%A7%84%E5%88%99%E6%83%85%E5%86%B5.png" alt="动画不规则情况"></p><p>所以我们应该在每次执行的时候判断是否当前正在动画，此时定义一个标志位 animated，初始值为 false。<br>在执行动画的时候将 animated 置为 true，执行完毕为 false。在每次执行的时候添加判断即可，将 animate 修改为如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">offsetLeft</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (animated) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  animated = <span class="literal">true</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">    ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      animated = <span class="literal">false</span></span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  go() <span class="comment">// 执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动播放"><a href="#自动播放" class="headerlink" title="自动播放"></a>自动播放</h3><p>我们希望在鼠标滑出图片，不做任何操作的时候，图片自动播放，鼠标滑入时，停止自动播放。</p><p>自动播放就相当于，每隔一定的时间，执行一次 next.onclik() 事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 自动播放</span></span><br><span class="line">  timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 定时3秒执行next.onclick()</span></span><br><span class="line">    next.onclick()</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(timer) <span class="comment">// 清除定时器</span></span><br><span class="line">&#125;</span><br><span class="line">oDiv.onmouseout = play <span class="comment">// 鼠标移除执行play</span></span><br><span class="line">oDiv.onmouseover = stop <span class="comment">// 鼠标移入执行stop</span></span><br><span class="line">play() <span class="comment">// 首次执行</span></span><br></pre></td></tr></table></figure><p>至此我们的焦点轮播图就完成了，效果图如下：</p><img src="最终完成效果图.gif" style="height: 200px" /><p>给出所有 JavaScript 代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> oImgList = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;imgList&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> oButtons = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btnList&#x27;</span>).getElementsByTagName(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> oPrev = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;prev&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> oNext = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;next&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> animated = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> timer</span><br><span class="line">  <span class="comment">// 显示底部圆点</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showButton</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oButtons.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (oButtons[i].className === <span class="string">&#x27;on&#x27;</span>) &#123; <span class="comment">// 其余圆点样式关闭</span></span><br><span class="line">        oButtons[i].className = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">break</span>  <span class="comment">// 如果已经清除了圆点样式，直接跳出循环，减少资源消耗</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    oButtons[index - <span class="number">1</span>].className = <span class="string">&#x27;on&#x27;</span> <span class="comment">// 当前索引的圆点点亮</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 动画</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">animate</span> (<span class="params">offsetLeft</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (animated) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    animated = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">let</span> newLeft = <span class="built_in">parseInt</span>(oImgList.style.left) + offsetLeft</span><br><span class="line">    <span class="keyword">let</span> time = <span class="number">1000</span> <span class="comment">// 位移总时间</span></span><br><span class="line">    <span class="keyword">let</span> interval = <span class="number">10</span> <span class="comment">// 位移间隔时间</span></span><br><span class="line">    <span class="keyword">let</span> speed = offsetLeft / (time / interval) <span class="comment">// 每次的位移量</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">go</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> ((speed &lt; <span class="number">0</span> &amp;&amp; <span class="built_in">parseInt</span>(oImgList.style.left) &gt; newLeft) || (speed &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">parseInt</span>(oImgList.style.left) &lt; newLeft)) &#123;</span><br><span class="line">        oImgList.style.left = <span class="built_in">parseInt</span>(oImgList.style.left) + speed + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(go, interval) <span class="comment">// 间隔10ms再次执行go（递归）</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        animated = <span class="literal">false</span></span><br><span class="line">        oImgList.style.left = newLeft + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> (newLeft &gt; -<span class="number">600</span>) &#123; <span class="comment">// 抵达第5张的预设图</span></span><br><span class="line">          oImgList.style.left = -<span class="number">3000</span> + <span class="string">&#x27;px&#x27;</span> <span class="comment">// 切换到第五张图</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newLeft &lt; -<span class="number">3000</span>) &#123; <span class="comment">// 抵达第一张预设图</span></span><br><span class="line">          oImgList.style.left = -<span class="number">600</span> + <span class="string">&#x27;px&#x27;</span>  <span class="comment">// 切换到第一张图</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    go() <span class="comment">// 执行</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">play</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      next.onclick() <span class="comment">// 间隔触发</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">stop</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer) <span class="comment">//清除定时器</span></span><br><span class="line">  &#125;</span><br><span class="line">  oDiv.onmouseout = play</span><br><span class="line">  oDiv.onmouseover = stop</span><br><span class="line">  play() <span class="comment">// 首次执行</span></span><br><span class="line">  oPrev.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 上翻</span></span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">1</span>) &#123; <span class="comment">// 边界设置</span></span><br><span class="line">      index = <span class="number">5</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      index -= <span class="number">1</span>   <span class="comment">// 角标值减1</span></span><br><span class="line">    &#125;</span><br><span class="line">    showButton() <span class="comment">// 显示按钮变化</span></span><br><span class="line">    animate(<span class="number">600</span>) <span class="comment">// 整体右移600px，相当于往前翻页</span></span><br><span class="line">  &#125;</span><br><span class="line">  oNext.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 下翻</span></span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">5</span>) &#123; <span class="comment">// 边界设置</span></span><br><span class="line">      index = <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      index += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    showButton() <span class="comment">// 显示圆点变化</span></span><br><span class="line">    animate(-<span class="number">600</span>) <span class="comment">// 整体左移600px，相当于往后翻页</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 绑定底部圆点</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oButtons.length; i++) &#123;</span><br><span class="line">    oButtons[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 遍历圆点，绑定点击事件</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.className === <span class="string">&#x27;on&#x27;</span>) &#123; <span class="comment">// 判断是否有必要执行</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> myIndex = <span class="built_in">parseInt</span>(<span class="built_in">this</span>.getAttribute(<span class="string">&#x27;index&#x27;</span>)) <span class="comment">// 获取自定义属性值</span></span><br><span class="line">      <span class="keyword">let</span> offsetLeft = -<span class="number">600</span> * (myIndex - index) <span class="comment">// 计算宽度</span></span><br><span class="line">      animate(offsetLeft) <span class="comment">// 移动</span></span><br><span class="line">      index = myIndex <span class="comment">// 更新index值</span></span><br><span class="line">      showButton()  <span class="comment">// 更新圆点动画</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Github地址如下：<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Rvbmdwb1h1L2ltb29j" title="https://github.com/DongpoXu/imooc">https://github.com/DongpoXu/imooc<i class="fa fa-external-link"></i></span></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW1vb2MuY29tL2xlYXJuLzE4" title="https://www.imooc.com/learn/18">慕课网焦点轮播图<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZGFpc3lnb2dvZ28vcC85NDk5MDc5Lmh0bWw=" title="https://www.cnblogs.com/daisygogogo/p/9499079.html">封装一个简单的原生 js 焦点轮播图插件<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 轮播图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加各种功能</title>
      <link href="/posts/515a5aad/"/>
      <url>/posts/515a5aad/</url>
      
        <content type="html"><![CDATA[<p>为自己的博客添加以下功能：</p><ul><li>评论、打赏</li><li>动态玩偶</li><li>点击红心</li><li>网易云音乐</li><li>分享功能</li></ul><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>美化自己的博客，给博客添加评论、打赏、玩偶、红心、分享以及网易云音乐功能，让博客变得精彩，让生活变得精彩。</p><a id="more"></a><h2 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h2><p>hexo 支持很多外部评论插件:</p><ul><li>HyperComments: <strong><span class="exturl" data-url="aHR0cHM6Ly93d3cuaHlwZXJjb21tZW50cy5jb20=" title="https://www.hypercomments.com">https://www.hypercomments.com<i class="fa fa-external-link"></i></span></strong> （来自俄罗斯的评论系统，使用谷歌账号注册。有墙，有时不太方便）</li><li>来必力: <strong><span class="exturl" data-url="aHR0cHM6Ly9saXZlcmUuY29t" title="https://livere.com">https://livere.com<i class="fa fa-external-link"></i></span></strong> （来自韩国，使用邮箱注册）</li><li>畅言: <strong><span class="exturl" data-url="aHR0cDovL2NoYW5neWFuLmt1YWl6aGFuLmNvbQ==" title="http://changyan.kuaizhan.com">http://changyan.kuaizhan.com<i class="fa fa-external-link"></i></span></strong> （安装需要备案号，不太好用）</li><li>Gitment: <strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ltc3VuL2dpdG1lbnQ=" title="https://github.com/imsun/gitment">https://github.com/imsun/gitment<i class="fa fa-external-link"></i></span></strong> （据说有些小 bug，比如说每次需要手动初始化，登录时会跳到主页）</li><li>Valine: <strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hDc3MvVmFsaW5l" title="https://github.com/xCss/Valine">https://github.com/xCss/Valine<i class="fa fa-external-link"></i></span></strong> (基于 Leancloud 的极简风评论系统）</li></ul><p>我选用了 <strong><span class="exturl" data-url="aHR0cHM6Ly93d3cubGl2ZXJlLmNvbQ==" title="https://www.livere.com">来必力<i class="fa fa-external-link"></i></span></strong>，因为 <strong><span class="exturl" data-url="aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20=" title="http://theme-next.iissnan.com">NexT 官方文档<i class="fa fa-external-link"></i></span></strong> 中这个比较简单。</p><h3 id="第一步：注册账号"><a href="#第一步：注册账号" class="headerlink" title="第一步：注册账号"></a>第一步：注册账号</h3><p>在来必力官网：<strong><span class="exturl" data-url="aHR0cHM6Ly93d3cubGl2ZXJlLmNvbQ==" title="https://www.livere.com">https://www.livere.com<i class="fa fa-external-link"></i></span></strong> 注册账号。</p><h3 id="第二步：安装"><a href="#第二步：安装" class="headerlink" title="第二步：安装"></a>第二步：安装</h3><p>点击最上方的安装，选择 City 免费版本。</p><p><img src="%E6%9D%A5%E5%BF%85%E5%8A%9B%E5%AE%89%E8%A3%85.png" alt="来必力安装"></p><p>点击现在安装。出现如下界面</p><p><img src="%E6%9D%A5%E5%BF%85%E5%8A%9B%E4%BB%A3%E7%A0%81.png" alt="来必力代码"></p><p>选中 <strong>uid</strong> 并复制。</p><h3 id="第三步：配置"><a href="#第三步：配置" class="headerlink" title="第三步：配置"></a>第三步：配置</h3><p>打开主题配置文件 <strong>_config.yml</strong>，定位到 livere_uid 字段，粘贴上刚刚复制的 UID。完成。</p><h2 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>打赏功能，不需要太复杂花哨的功能的话，就直接在配置文件中写入图片就好。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Reward</span><br><span class="line">reward_comment: 如果您读文章后有收获，可以打赏我喝咖啡哦～</span><br><span class="line">wechatpay: /images/wechat.png</span><br><span class="line">alipay: /images/alipay.png</span><br></pre></td></tr></table></figure><h3 id="扩展版本"><a href="#扩展版本" class="headerlink" title="扩展版本"></a>扩展版本</h3><p>自己创建 swig 文件，以及 css 文件。</p><p>如下步骤： 1.在/themes/random/source/css 新建 donate.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.donate_bar</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span> <span class="selector-tag">a</span><span class="selector-class">.btn_donate</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">82px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">82px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(img.gif) no-repeat;</span><br><span class="line">  <span class="attribute">-webkit-transition</span>: background <span class="number">0s</span>;</span><br><span class="line">  <span class="attribute">-moz-transition</span>: background <span class="number">0s</span>;</span><br><span class="line">  <span class="attribute">-o-transition</span>: background <span class="number">0s</span>;</span><br><span class="line">  <span class="attribute">-ms-transition</span>: background <span class="number">0s</span>;</span><br><span class="line">  <span class="attribute">transition</span>: background <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span> <span class="selector-tag">a</span><span class="selector-class">.btn_donate</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">82px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span> <span class="selector-class">.donate_txt</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#9d9d9d</span>;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">2</span> <span class="string">&quot;Microsoft Yahei&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span><span class="selector-class">.hidden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-donate</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">45px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#donate_guide</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">310px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#donate_guide</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">350px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">350px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在 themes/random/layout/includes 下新建 donate.swig</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;! -- 添加捐赠图标 --&gt;</span><br><span class="line">&lt;div class &#x3D;&quot;post-donate&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;donate_board&quot; class&#x3D;&quot;donate_bar center&quot;&gt;</span><br><span class="line">        &lt;a id&#x3D;&quot;btn_donate&quot; class&#x3D;&quot;btn_donate&quot; href&#x3D;&quot;javascript:;&quot; title&#x3D;&quot;打赏&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;donate_txt&quot;&gt;</span><br><span class="line">           ↑&lt;br&gt;</span><br><span class="line">           喜欢文章就打赏一包辣条吧！</span><br><span class="line">        &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;donate_guide&quot; class&#x3D;&quot;donate_bar center hidden&quot; &gt;</span><br><span class="line">        &lt;!-- 方式一：</span><br><span class="line">            ![](img.png)</span><br><span class="line">            ![](img.png)</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;!-- 方式二；</span><br><span class="line">            step1：在_config.yml中添加配置</span><br><span class="line">                Alipay: &#x2F;img&#x2F;Alipay.jpg</span><br><span class="line">                WeChatpay: &#x2F;img&#x2F;WeChatpay.jpg</span><br><span class="line">            step2：此处两张图片的路径分别设置为如下</span><br><span class="line">                &lt;img src&#x3D;&quot;&lt;%- theme.root_url %&gt;&lt;%&#x3D;theme.Alipay%&gt;&quot;</span><br><span class="line">                &lt;img src&#x3D;&quot;&lt;%- theme.root_url %&gt;&lt;%&#x3D;theme.WeChatpay%&gt;&quot;</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;!-- 支付宝打赏图案</span><br><span class="line">        &lt;img src&#x3D;&quot;alipay.png&quot; alt&#x3D;&quot;支付宝打赏&quot;&gt; --&gt;</span><br><span class="line">        &lt;!-- 微信打赏图案 --&gt;</span><br><span class="line">        &lt;img src&#x3D;&quot;wechat.png&quot; alt&#x3D;&quot;微信打赏&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        document.getElementById(&#39;btn_donate&#39;).onclick &#x3D; function()&#123;</span><br><span class="line">            $(&#39;#donate_board&#39;).addClass(&#39;hidden&#39;);</span><br><span class="line">            $(&#39;#donate_guide&#39;).removeClass(&#39;hidden&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;! -- 添加捐赠图标 --&gt;</span><br></pre></td></tr></table></figure><p>3.在 post.swig 合适位置中添加(想在那个页面放都可以)，不知道放那的话，在后添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">%</span> <span class="string">if</span> <span class="string">theme.donate</span> <span class="string">%</span>&#125;</span><br><span class="line">  &#123;<span class="string">%</span> <span class="string">include</span> <span class="string">&#x27;includes/donate.swig&#x27;</span> <span class="string">%</span>&#125;</span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br></pre></td></tr></table></figure><p>4.打开主题配置文件_config.yml，在里面最后写下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#是否开启打赏功能</span><br><span class="line">donate: true</span><br></pre></td></tr></table></figure><h2 id="玩偶功能"><a href="#玩偶功能" class="headerlink" title="玩偶功能"></a>玩偶功能</h2><h3 id="第一步：获取插件"><a href="#第一步：获取插件" class="headerlink" title="第一步：获取插件"></a>第一步：获取插件</h3><p>npm install –save hexo-helper-live2d</p><h3 id="步骤二：选择自己喜欢的萌妹子"><a href="#步骤二：选择自己喜欢的萌妹子" class="headerlink" title="步骤二：选择自己喜欢的萌妹子"></a>步骤二：选择自己喜欢的萌妹子</h3><p>可以到 github 中查看，选择喜欢的妹子造型</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure><p>例如我选择： live2d-widget-model-wanko</p><h3 id="步骤三：安装"><a href="#步骤三：安装" class="headerlink" title="步骤三：安装"></a>步骤三：安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d-widget-model-miku</span><br></pre></td></tr></table></figure><p>在主题配置文件 _config.yml 下配置</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko</span><br><span class="line">    scale: 1</span><br><span class="line">    hHeadPos: 0.5</span><br><span class="line">    vHeadPos: 0.618</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br><span class="line">    scale: 0.5</span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.7</span><br><span class="line">    opacityOnHover: 0.2</span><br></pre></td></tr></table></figure><p>然而我试了，这个 plug 现在还不是很稳定，配置很多不生效。<br>比如我把配置文件放在系统配置，我的玩偶就变成狗狗了。</p><h2 id="红心功能"><a href="#红心功能" class="headerlink" title="红心功能"></a>红心功能</h2><p>类似页面崩溃欺骗，利用 js 实现即可。</p><p>在/themes/next/source/js/src 下新建文件 clicklove.js ，接着把如下代码粘贴到 clicklove.js 文件中。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure><p>在/themes/next/layout/_layout.swig 文件末尾添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;src&#x2F;clicklove.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h2><h3 id="生成外链"><a href="#生成外链" class="headerlink" title="生成外链"></a>生成外链</h3><p>登陆网易云音乐 <strong><span class="exturl" data-url="aHR0cDovL211c2ljLjE2My5jb20=" title="http://music.163.com">http://music.163.com<i class="fa fa-external-link"></i></span></strong> 搜索自己喜欢的音乐，然后点击生成外链</p><p><img src="%E7%BD%91%E6%98%93%E4%BA%91%E7%94%9F%E6%88%90%E5%A4%96%E9%93%BE.png" alt="网易云生成外链"></p><p>外链内容如下：</p><p><img src="%E5%A4%96%E9%93%BE%E5%86%85%E5%AE%B9.png" alt="外链内容"></p><h3 id="放置外链"><a href="#放置外链" class="headerlink" title="放置外链"></a>放置外链</h3><p>复制 HTML 代码部分放入自己想要放入的页面位置即可。</p><p>我这里放入了 layout/_macro/sidebar.swig 中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.background_music %&#125;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;iframe frameborder&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; marginwidth&#x3D;&quot;0&quot; marginheight&#x3D;&quot;0&quot; width&#x3D;330 height&#x3D;86 src&#x3D;&quot;&#x2F;&#x2F;music.163.com&#x2F;outchain&#x2F;player?type&#x3D;2&amp;id&#x3D;36921126&amp;auto&#x3D;1&amp;height&#x3D;66&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>位置自己调整一下就好啦，最终效果图如下：</p><p><img src="%E7%BD%91%E6%98%93%E4%BA%91%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt=" "></p><h2 id="分享功能"><a href="#分享功能" class="headerlink" title="分享功能"></a>分享功能</h2><h3 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h3><p>hexo 已经集成了 baidushare，只需要在主题配置文件中打开配置即可<br>在配置百度分享功能时需指定其 type，type 可以为 button 活着 slide</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">baidushare:</span><br><span class="line">  type: slide</span><br><span class="line">  baidushare: true</span><br></pre></td></tr></table></figure><p>有一点需要特别注意，baidushare 不支持 https。所以我们需要手动解决这个问题。解决方法就是把这个文件放在我们自己的目录下。</p><h3 id="解决-https-分享"><a href="#解决-https-分享" class="headerlink" title="解决 https 分享"></a>解决 https 分享</h3><p>访问链接：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hyd2hpc3Blci9iYWlkdVNoYXJl" title="https://github.com/hrwhisper/baiduShare">static 文件夹<i class="fa fa-external-link"></i></span></p><p>将压缩包下载到本地，解压后，将 static 文件夹保存至博客项目 themes/next/source 目录下。</p><h3 id="修改百度分享模板"><a href="#修改百度分享模板" class="headerlink" title="修改百度分享模板"></a>修改百度分享模板</h3><p>打开 themes/next/layout_partials/share/baidushare.swig，修改 <strong>末尾</strong> 代码</p><p>将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.src&#x3D;&#39;http:&#x2F;&#x2F;bdimg.share.baidu.com&#x2F;static&#x2F;api&#x2F;js&#x2F;share.js?v&#x3D;89860593.js?cdnversion&#x3D;&#39;+~(-new Date()&#x2F;36e5)];</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.src&#x3D;&#39;&#x2F;static&#x2F;api&#x2F;js&#x2F;share.js?v&#x3D;89860593.js?cdnversion&#x3D;&#39;+~(-new Date()&#x2F;36e5)];</span><br></pre></td></tr></table></figure><p>最后重新生成下，就能展示分享功能了。</p><p>参考链接：<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hyd2hpc3Blci9iYWlkdVNoYXJl" title="https://github.com/hrwhisper/baiduShare">百度分享不支持 Https 的解决方案<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NsNTM0ODU0MTIxL2FydGljbGUvZGV0YWlscy83NjEyMTEwNT9sb2NhdGlvbk51bT02JmZwcz0x" title="https://blog.csdn.net/cl534854121/article/details/76121105?locationNum=6&fps=1">Hexo+Github 搭建个人博客(三)——百度分享集成<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gulp加速Hexo</title>
      <link href="/posts/954c5566/"/>
      <url>/posts/954c5566/</url>
      
        <content type="html"><![CDATA[<p>站点访问速度总是让人不满意，想快，那就使劲折腾吧。</p><h2 id="gulp-静态资源压缩"><a href="#gulp-静态资源压缩" class="headerlink" title="gulp 静态资源压缩"></a>gulp 静态资源压缩</h2><p>采用 gulp 对静态资源进行压缩，提升访问速度。</p><h3 id="什么是-Gulp"><a href="#什么是-Gulp" class="headerlink" title="什么是 Gulp"></a>什么是 Gulp</h3><p>gulp.js 是一种基于流的，代码优于配置的新一代构建工具.<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2d1bHBqcy9ndWxwL3RyZWUvbWFzdGVyL2RvY3M=" title="https://github.com/gulpjs/gulp/tree/master/docs">官方文档<i class="fa fa-external-link"></i></span></p><p>Gulp 和 Grunt 类似。但相比于 Grunt 的频繁的 I/O 操作，Gulp 的流操作，能更快地完成构建</p><a id="more"></a><h4 id="Gulp-特性"><a href="#Gulp-特性" class="headerlink" title="Gulp 特性"></a>Gulp 特性</h4><ul><li>使用方便<ul><li>通过代码优于配置的策略，Gulp 可以让简单的任务简单，复杂的任务更可管理。</li></ul></li><li>构建快速<ul><li>通过流式操作，减少频繁的 IO 操作，更快地构建项目。</li></ul></li><li>插件高质<ul><li>Gulp 有严格的插件指导策略，确保插件能简单高质的工作。</li></ul></li><li>易于学习<ul><li>少量的 API，掌握 Gulp 可以毫不费力。构建就像流管道一样，轻松加愉快。</li></ul></li></ul><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>首先安装 gulp 以及所需要的模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br></pre></td></tr></table></figure><h3 id="添加代码"><a href="#添加代码" class="headerlink" title="添加代码"></a>添加代码</h3><p>然后在根目录下创建<strong>gulpfile.js</strong>文件并写入代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(</span><br><span class="line">      htmlmin(&#123;</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">        minifyJS: <span class="literal">true</span>,</span><br><span class="line">        minifyCSS: <span class="literal">true</span>,</span><br><span class="line">        minifyURLs: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 压缩css</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      minifycss(&#123;</span><br><span class="line">        compatibility: <span class="string">&#x27;ie8&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-js&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&#x27;./public/js/**/*.js&#x27;</span>)</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-images&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">&#x27;./public/images/**/*.*&#x27;</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">      imagemin(</span><br><span class="line">        [</span><br><span class="line">          imagemin.gifsicle(&#123; <span class="attr">optimizationLevel</span>: <span class="number">3</span> &#125;),</span><br><span class="line">          imagemin.jpegtran(&#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">          imagemin.optipng(&#123; <span class="attr">optimizationLevel</span>: <span class="number">7</span> &#125;),</span><br><span class="line">          imagemin.svgo()</span><br><span class="line">        ],</span><br><span class="line">        &#123; <span class="attr">verbose</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;./public/images&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.task(</span><br><span class="line">  <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">  gulp.parallel(<span class="string">&#x27;minify-html&#x27;</span>, <span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-js&#x27;</span>, <span class="string">&#x27;minify-images&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="部署上传"><a href="#部署上传" class="headerlink" title="部署上传"></a>部署上传</h2><ul><li>hexo clean</li><li>hexo g</li><li>gulp</li><li>hexo d</li></ul><p>在 gulp 的过程中可能会遇到问题，根据问题排除就可以了～，没啥大问题的。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github&amp;Coding分流</title>
      <link href="/posts/6c7c1a97/"/>
      <url>/posts/6c7c1a97/</url>
      
        <content type="html"><![CDATA[<p>我的博客搭建起来了，嗯，搭建博客的目的在于可以在自己解决问题的同时可以帮助到其他人，所以我百度搜索了一下自己的博客，然鹅，啥都没有，我就纳了闷了，当年那个博客咋就可以搜到的呢？？当时可把我牛逼坏了。这就是不做笔记的弊端啊～～其实当年的博客是在阿里云买的服务器，所以要方便的多，这个是在 Github 上托管的，就比较复杂了。</p><h2 id="分流部署"><a href="#分流部署" class="headerlink" title="分流部署"></a>分流部署</h2><p>因为 Github 是国外的，访问速度还是有些慢的，所以呢，想起之前朋友推荐的码云 Page，然后就也想在国内部署一套托管平台。查了些资料，发现 Coding 这个腾讯云开发平台不错，那就部署在这里吧。</p><a id="more"></a><h3 id="建设-Coding-仓库"><a href="#建设-Coding-仓库" class="headerlink" title="建设 Coding 仓库"></a>建设 Coding 仓库</h3><p>在<strong><span class="exturl" data-url="aHR0cHM6Ly9jb2RpbmcubmV0" title="https://coding.net">Coding 官网<i class="fa fa-external-link"></i></span></strong>注册账号，然后验证啥的，创建自己的仓库（注意和自己用户名一样），然后上传你的公钥，打开 Pages</p><p><img src="Coding%E6%89%93%E5%BC%80Pages.png" alt="Coding打开Pages"></p><p>在设置中绑定域名，打开 HTTPS 访问，添加 SSL 证书。</p><p><img src="CodingPages%E8%AE%BE%E7%BD%AE.png" alt="CodingPages设置"></p><h3 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h3><p>在项目配置文件_config.yml 下配置 repo，我的如下所示，注意：<strong>冒号后面有空格！</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repository:</span><br><span class="line">      github: git@github.com:DongpoXu/DongpoXu.github.io.git</span><br><span class="line">      coging: git@git.dev.tencent.com:DongpoXu/DongpoXu.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>然后 hexo g -d 部署一下～</p><p>这时候你会发现俩都可以访问了，但是！！！</p><h3 id="分流"><a href="#分流" class="headerlink" title="分流"></a>分流</h3><p>注意！！！有可能会<strong>被欺骗</strong>，打开调试页面。选择网络，然后刷新。</p><p><img src="%E6%9C%AA%E9%85%8D%E7%BD%AEDNS%E8%AE%BF%E9%97%AE%E9%A1%B5%E9%9D%A2.png" alt="未配置DNS访问页面"></p><p>注意右边的 server: Coding Pages，问题来了，你访问的时候到底是访问了 Github 还是 Coding 呢？？</p><p>这就需要我们再去做 DNS 解析了。需要配置默认 Coding，境外 Github。</p><p>打开域名解析界面，我的配置如下：</p><p><img src="%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png" alt="域名解析"></p><p>其中两个 IP 分别为 Coding 和 Github 的 IP。</p><h3 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h3><p>到此境内境外访问就分流了，通过开关 VPN 测试成功。</p><p>ฅ&gt;ω&lt;*ฅ<br>撒花~ ^_^ ~花撒</p><p>啪唧～～撒个屁，╭(°A°`)╮</p><p>百度收录了嘛，Google 收录了嘛，你能搜到了嘛！！！不能，详情就，且看下文吧。</p><h2 id="搜索引擎收录"><a href="#搜索引擎收录" class="headerlink" title="搜索引擎收录"></a>搜索引擎收录</h2><p>哦，百度不要我，完结</p><p>撒花~ ^_^ ~花撒</p><p>╭(°A°`)╮</p><p>哈哈哈，就是速度慢了点，耐性等一礼拜的，就 ok 了～+～+</p><p>详情见 <a href="../74300b65/">Hexo搜索引擎收录</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github&amp;Coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加页面崩溃欺骗</title>
      <link href="/posts/f4d63b4/"/>
      <url>/posts/f4d63b4/</url>
      
        <content type="html"><![CDATA[<p>偶然看到崩溃欺骗是从友链 <strong><span class="exturl" data-url="aHR0cDovL3d3dy5jZHV5emguY29tLw==" title="http://www.cduyzh.com/">Water Sister<i class="fa fa-external-link"></i></span></strong> 那里看到的，觉得这个页面好好玩，就想搞一个一样的。</p><h2 id="Just-Have-Fun-～"><a href="#Just-Have-Fun-～" class="headerlink" title="Just Have Fun ～"></a>Just Have Fun ～</h2><p>想法还是可以有的，检测页面是否被隐藏，然后修改 document.title 的值就好，但是！重要是但是，不是借口哈，实在是没摸清楚 Hexo 的结构，我想着说，你不能二话不说直接程序怼人家 js 里面吧。太过分了那就。</p><a id="more"></a><p>于是乎我去 <strong>Water Sister</strong> 的 Github 上 emmm 表示直接搜索，诶。。好像还真的是怼 js 里面了。</p><p>然后陷入了沉思。。。果然最开始想到的就是最直观的。</p><p>然后看到一个大神的页面也有这个效果 <span class="exturl" data-url="aHR0cHM6Ly9hc2RmdjE5MjkuZ2l0aHViLmlvLw==" title="https://asdfv1929.github.io/">asdfv1929 ‘s Home<i class="fa fa-external-link"></i></span>，于是乎，把他的方法扒下来了。</p><p>吼吼吼机智懒惰的我～</p><p>其实就两个步骤</p><h3 id="创建-JS-代码"><a href="#创建-JS-代码" class="headerlink" title="创建 JS 代码"></a>创建 JS 代码</h3><p>在 next/source/js/src 文件夹下创建 crash_cheat.js，添加代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> OriginTitle = <span class="built_in">document</span>.title</span><br><span class="line"><span class="keyword">var</span> titleTime</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">    $(<span class="string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).attr(<span class="string">&#x27;href&#x27;</span>, <span class="string">&#x27;/images/favicon-error.png&#x27;</span>)</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">&#x27;╭(°A°`)╮页面崩溃啦 ~&#x27;</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(titleTime)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).attr(<span class="string">&#x27;href&#x27;</span>, <span class="string">&#x27;/images/favicon.png&#x27;</span>)</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">&#x27;(ฅ&gt;ω&lt;*ฅ) 嗨~你好呀~&#x27;</span> + OriginTitle</span><br><span class="line">    titleTime = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.title = OriginTitle</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="引用-JS-代码"><a href="#引用-JS-代码" class="headerlink" title="引用 JS 代码"></a>引用 JS 代码</h3><p>在 next/layout_layout.swig 文件中，添加引用（<strong>注：在 swig 末尾添加</strong>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--崩溃欺骗--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/crash_cheat.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬取淘宝商品</title>
      <link href="/posts/8f666c53/"/>
      <url>/posts/8f666c53/</url>
      
        <content type="html"><![CDATA[<p>在学习 python 爬虫时，定向爬取淘宝的搜索界面，并没有爬取到数据，让我们来看看发生了什么？</p><h2 id="课程来源"><a href="#课程来源" class="headerlink" title="课程来源"></a>课程来源</h2><p><strong>慕课大学</strong> 北京理工大学国家精品课程 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL0JJVC0xMDAxODcwMDAx" title="https://www.icourse163.org/course/BIT-1001870001">《Python 网络爬虫与信息提取》<i class="fa fa-external-link"></i></span> 第三章</p><a id="more"></a><h2 id="淘宝商品比价定向爬虫"><a href="#淘宝商品比价定向爬虫" class="headerlink" title="淘宝商品比价定向爬虫"></a>淘宝商品比价定向爬虫</h2><h3 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h3><ul><li>目标：获取淘宝搜索页面的信息，提取其中的商品名称和价格</li><li>理解：淘宝的搜索接口以及翻页的处理</li></ul><h3 id="程序的结构设计"><a href="#程序的结构设计" class="headerlink" title="程序的结构设计"></a>程序的结构设计</h3><ol><li>提交商品搜索请求，循环获取页面</li><li>对于每个页面，提取商品名称和价格信息</li><li>将信息输出</li></ol><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><h3 id="爬取成功，数据有问题"><a href="#爬取成功，数据有问题" class="headerlink" title="爬取成功，数据有问题"></a>爬取成功，数据有问题</h3><p>打印 html 文件，返回如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">  TRLang = &#123;</span><br><span class="line"><span class="javascript">    ERROR_NICK_BLANK: <span class="string">&quot;请填写账户名&quot;</span>,</span></span><br><span class="line"><span class="javascript">    ERROR_PASSWORD_BLANK: <span class="string">&quot;请输入密码&quot;</span>,</span></span><br><span class="line"><span class="javascript">    ERROR_NICK_PASSWORD_BLANK: <span class="string">&quot;请输入账户名和密码&quot;</span>,</span></span><br><span class="line"><span class="javascript">    ERROR_CHECKCODE_BLANK: <span class="string">&quot;请输入验证码&quot;</span>,</span></span><br><span class="line"><span class="javascript">    TIPS_REMEMBER_PASSWORD: <span class="string">&quot;记住密码&quot;</span>,</span></span><br><span class="line"><span class="javascript">    TIPS_NOT_REMEMBER_PSW_ON_PUBLIC: <span class="string">&quot;不要在公共计算机记住密码，防止账户被盗&quot;</span></span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>觉得应该是用户并未登陆问题，应该是淘宝的反爬虫机制导致。</p><hr><h2 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h2><ol><li>登陆淘宝，打开开发者模式，例如 Chrome 右键检查</li><li>点选 NetWork，DOC，然后刷新页面，在 network 中选择 doc，在请求的 headers 中搜索 cookie</li><li>获取对应的 cookie 以及 user-agent</li><li>在代码中添加到 headers 里面</li></ol><p><img src="%E6%9F%A5%E8%AF%A2cookie.png" alt="查询cookie"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def getHTMLText(url):</span><br><span class="line">  kv = &#123;</span><br><span class="line">    <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;adsgadfafegadsgadsfaefasdfaewfadsfag&#x27;</span></span><br><span class="line">    <span class="string">&#x27;uaer-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(url, headers=kv, timeout=<span class="number">30</span>)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line">  except:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;gg&quot;</span></span><br></pre></td></tr></table></figure><h2 id="补充问题"><a href="#补充问题" class="headerlink" title="补充问题"></a>补充问题</h2><p><strong>2019-05-06 更新</strong>：还遇到了一种问题，就是在 url 为 http 时，即使添加了 cookie 和 user-agent 也无法获取信息。</p><p>猜测是因为重定向导致的问题。</p><p>首先简单介绍一下 requests 库的一个高级用法 Session 会话对象</p><p><strong>会话对象</strong>让你能够跨请求保持某些参数。它也会在同一个 Session 实例发出的所有请求之间保持 cookie。所以如果你向同一主机发送多个请求，底层的 TCP 连接将会被重用，从而带来显著的性能提升。(参见 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSFRUUF9wZXJzaXN0ZW50X2Nvbm5lY3Rpb24=" title="https://en.wikipedia.org/wiki/HTTP_persistent_connection">HTTP persistent connection<i class="fa fa-external-link"></i></span>).</p><p>这个问题经过观察发现，重定向之后 cookie 信息并没有被保存下来（返回的 html 还是让用户登陆），我们就需要用使用 Session 保存 cookie 信息。使用 Session 后，更新 cookie 并没有成功。</p><p>然后将矛头转向 cookie 去哪里了，发现问题是因为 requests 的 session 方法保持 cookie 只能保持 cookiejar 类型的 cookie，而我们手动构建的 cookie 是 dict 类型的，所以需要将 dict 转化为 cookiejar 类型。</p><p>查阅得方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将CookieJar转为字典：</span></span><br><span class="line">cookies = requests.utils.dict_from_cookiejar(r.cookies)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将字典转为CookieJar：</span></span><br><span class="line">cookies = requests.utils.cookiejar_from_dict(cookie_dict, cookiejar=<span class="literal">None</span>, overwrite=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#其中cookie_dict是要转换字典</span></span><br><span class="line">转换完之后就可以把它赋给cookies 并传入到session中了：</span><br><span class="line">s = requests.Session()</span><br><span class="line">s.cookies = cookies</span><br></pre></td></tr></table></figure><p>具体代码很简单，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cookie_dict = &#123;<span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;adgfadsgadsgasf&#x27;</span>&#125;</span><br><span class="line">cookies = requests.utils.cookiejar_from_dict(cookie_dict, cookiejar=<span class="literal">None</span>, overwrite=<span class="literal">True</span>)</span><br><span class="line">S = requests.Session()</span><br><span class="line">S.cookies = cookies;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = S.get(url, headers=headers, timeout=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><p><strong>补充</strong>：其实只要用 cookies 属性的 update 方法更新 cookie 就行了，如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cookie_dict = &#123;&quot;a&quot;:1&#125;</span><br><span class="line">s = requests.Session()</span><br><span class="line">s.cookies.update(cookie_dict)</span><br><span class="line">s.get(url)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>具体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cookie_dict = &#123;<span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;adsgadsgasd&#x27;</span>&#125;</span><br><span class="line">S = requests.Session()</span><br><span class="line">S.cookies.update(cookie_dict)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = S.get(url, headers=headers, timeout=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><p>之前的方法虽然也可以用，但相对比较繁琐。</p><p>感谢：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E1ODMxNzkvYXJ0aWNsZS9kZXRhaWxzLzc4OTA0NjQ1" title="https://blog.csdn.net/a583179/article/details/78904645">关于 requests 的 session 方法保持不了 cookie 的问题<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的那些事儿</title>
      <link href="/posts/5b1da34a/"/>
      <url>/posts/5b1da34a/</url>
      
        <content type="html"><![CDATA[<p>本文记录作者在使用 Hexo 写博客的过程中遇到的种种问题，做成 Hexo 的那些事儿集合，不定时更新</p><h2 id="配置问题"><a href="#配置问题" class="headerlink" title="配置问题"></a>配置问题</h2><p>先将常用的配置项总结一下</p><p>重要的配置文件有两个_config.yml，一个是主题配置文件，一个是系统配置文件。分别在根目录和 themes 目录下</p><a id="more"></a><ul><li>系统配置文件:<ul><li>title: 主题设置</li><li>subtitle: 小标题设置</li><li>author: 作者信息设置</li><li>language: 语言设置</li></ul></li><li>主题配置文件:<ul><li>favicon: 图标设置</li><li>footer: 页脚设置</li><li>menu: 菜单设置</li><li>scheme: 主题设置</li><li>sidebar: 侧边栏设置</li><li>auto_excerpt: 预览设置</li><li>baidu_analytics: 百度收录</li></ul></li></ul><p>这基本上就是常用的一些设置了。</p><h3 id="怎么修改模版主题内部的信息？"><a href="#怎么修改模版主题内部的信息？" class="headerlink" title="怎么修改模版主题内部的信息？"></a>怎么修改模版主题内部的信息？</h3><p>例如：标题，页脚信息，图标，语言等</p><p>我们首先要去查看对应主题的官方文档，文档一般都会有详细的介绍。</p><h3 id="怎么让文章只显示预览，不全文显示？"><a href="#怎么让文章只显示预览，不全文显示？" class="headerlink" title="怎么让文章只显示预览，不全文显示？"></a>怎么让文章只显示预览，不全文显示？</h3><p>两种方法：</p><ol><li>主题设置文件_config.yml 中 auto_excerpt 将其使能即可</li><li>使用&lt;!–more–&gt;作为文章分隔即可</li></ol><p>这两种方法在使用效果上是有不同的…</p><ul><li>第一种方法，会把所有的文本集中，不考虑内部换行结构等，全部作为预览显示。</li><li>第二种方法较好，会保留当前文本的内部结构，看起来更加整洁，并且预览内容可控制。</li></ul><h3 id="移动端怎么显示侧边栏？"><a href="#移动端怎么显示侧边栏？" class="headerlink" title="移动端怎么显示侧边栏？"></a>移动端怎么显示侧边栏？</h3><p>在 sidebar 配置项下，onmobile 配置为 true 即可</p><p><strong>注意</strong>：遇到问题，我设置了但是手机端显示不了，估计是分辨率导致的问题，留待解决。Chrome 调试下可以显示。</p><h2 id="功能扩展"><a href="#功能扩展" class="headerlink" title="功能扩展"></a>功能扩展</h2><h3 id="使用-LeanCloud-统计页面访问次数"><a href="#使用-LeanCloud-统计页面访问次数" class="headerlink" title="使用 LeanCloud 统计页面访问次数"></a>使用 LeanCloud 统计页面访问次数</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">本文环境：</span><br><span class="line">Hexo + Next v5.1.4</span><br></pre></td></tr></table></figure><p>在 Hexo 博客中，借助 LeanCloud 第三方服务来实现统计页数访问次数的功能。</p><h4 id="配置-LeanCloud"><a href="#配置-LeanCloud" class="headerlink" title="配置 LeanCloud"></a>配置 LeanCloud</h4><ul><li>进入 LeanCloud 官网<span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24v" title="https://leancloud.cn/">https://leancloud.cn/<i class="fa fa-external-link"></i></span>并注册账号，验证邮箱</li><li>创建应用：<strong>控制台 -&gt; 创建应用(开发版)</strong><ul><li>应用名称可以随意输入，后面还可以修改，我用的是 test；</li></ul></li><li>创建 Class：点击刚创建的 test 应用，创建一个 Class 表用来保存我们的博客访问数据。<ul><li>此处创建的 Class 名字必须为 <strong>Counter</strong>，用来保证与 NexT 主题的修改相兼容；</li><li>ACL 权限选择 <strong>无限制</strong>，避免后续因为权限的问题导致次数统计显示不正常。</li></ul></li></ul><p><img src="%E5%88%9B%E5%BB%BAClass.png" alt="创建Class"></p><p>创建 Class 完成之后，新创建的 Counter 表会显示在左侧，这时再切换到 test 应用的 <strong>设置 -&gt; 应用 Key</strong> 界面：</p><p><img src="%E5%A4%8D%E5%88%B6AppKey.png" alt="复制AppKey"></p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>把你的 AppID 和 AppKey 复制出来。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true # 这里要设置成 true</span><br><span class="line">  app_id: joaeddf4hsqudUUwx4gIvGF6-gzGzoHsz</span><br><span class="line">  app_key: E9UJsJpw1omCHuS22PdSpKoh</span><br></pre></td></tr></table></figure><p>这时再重新部署博客，就可以正常使用文章阅读量统计的功能了。</p><p>需要特别说明的是：<strong>记录文章访问量的唯一标识符是文章的发布日期和文章的标题，因此要确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。</strong></p><h3 id="添加-Fork-me-on-Github-图标～"><a href="#添加-Fork-me-on-Github-图标～" class="headerlink" title="添加 Fork me on Github 图标～"></a>添加 Fork me on Github 图标～</h3><p>偶然看到别人的博客角落有个彩带，写着 Fork me on Github，长这个样子。</p><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="ForkMe%E5%BD%A9%E5%B8%A6.png" alt="ForkMe彩带"></p><p>灰常羡慕，那我能怂嘛，当然要搞一个了～</p><p>于是乎，我找到了这俩网站，<strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuYmxvZy8yMDA4LTEyLTE5LWdpdGh1Yi1yaWJib25zLw==" title="https://github.blog/2008-12-19-github-ribbons/">彩带<i class="fa fa-external-link"></i></span></strong> 以及 <strong><span class="exturl" data-url="aHR0cDovL3Rob2xtYW4uY29tL2dpdGh1Yi1jb3JuZXJzLw==" title="http://tholman.com/github-corners/">章鱼猫<i class="fa fa-external-link"></i></span></strong>，需要大家自取哦～</p><h4 id="配置样式"><a href="#配置样式" class="headerlink" title="配置样式"></a>配置样式</h4><p>然后找一个自己喜欢的样式，复制代码到 themes/next/layout/_layout.swig 文件中，放在<strong>&lt;div class=”headband”&gt;</strong>的下面，样式啥的需要自己调整位置哦，吼猴～然后就大功告成了。</p><p><img src="Fork%E5%AE%8C%E6%88%90%E5%9B%BE.png" alt="Fork完成图"></p><h4 id="当当当，注意啦！！！"><a href="#当当当，注意啦！！！" class="headerlink" title="当当当，注意啦！！！"></a>当当当，注意啦！！！</h4><p>我发现一件尴尬的事情，这样设置完，在移动端，这个图标还是在，然后和下拉菜单冲突拉，好丑的。</p><p>所以，我们需要设置，在移动端不显示。</p><p>修改文件/themes/next/layout/_layout.swig 找到如下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">&quot;&#123;&#123; html_class | lower &#125;&#125;&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;&#123;&#123; config.language &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    &#123;% include &#x27;_partials/head.swig&#x27; %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% include &#x27;_third-party/analytics/index.swig&#x27; %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 head 标签里面添加样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.github-corner</span> &#123;</span></span><br><span class="line">    display: none;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">768px</span>) &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.github-corner</span> &#123;</span></span><br><span class="line">      display: inline;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后重启就好啦～</p><h3 id="添加站内搜索功能～"><a href="#添加站内搜索功能～" class="headerlink" title="添加站内搜索功能～"></a>添加站内搜索功能～</h3><p>诶诶，咋添加来着？？？emmmm…</p><p><img src="%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2.png" alt="站内搜索"></p><p>好像 npm 装个 插件就好了好像是～</p><h4 id="当当当当～安装插件"><a href="#当当当当～安装插件" class="headerlink" title="当当当当～安装插件"></a>当当当当～安装插件</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search</span><br><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>在你的 Hexo 目录下的_config.yml 中增加如下配置：</p><h4 id="打开-local-search"><a href="#打开-local-search" class="headerlink" title="打开 local_search"></a>打开 local_search</h4><p>local_search 下的 enable 设置为 true 即可</p><h3 id="短地址以及永久地址"><a href="#短地址以及永久地址" class="headerlink" title="短地址以及永久地址"></a>短地址以及永久地址</h3><p>每次从博客分享文章给别人都很苦恼，Hexo 默认生成的链接太长了，而且一旦文章名字改变，链接也跟着改变。有没有什么方法让地址尽量短小精悍，同时永久化呢？<br>感谢 <strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvemJvL2hleG8tYWJicmxpbms=" title="https://github.com/rozbo/hexo-abbrlink">rozbo/hexo-abbrlink<i class="fa fa-external-link"></i></span></strong>，完美解决。<br>使用方法也很简单：</p><p>npm install hexo-abbrlink –save</p><p>在 _config.yml 配置文件写入</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 更改 permalink 值</span><br><span class="line">permalink: posts/:abbrlink/</span><br><span class="line"># abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  #support crc16(default) and crc32</span><br><span class="line">  rep: hex    #support dec(default) and hex</span><br></pre></td></tr></table></figure><p><img src="%E7%9F%AD%E5%9C%B0%E5%9D%80before.png" alt="短地址before"><br><img src="%E7%9F%AD%E5%9C%B0%E5%9D%80after.png" alt="短地址after"></p><p><strong>注意啦～</strong>刚改完后，你的所有图片链接啥的都挂掉了，但是不要慌，先 hexo clean，然后重新部署一下就好啦</p><h3 id="封面模式"><a href="#封面模式" class="headerlink" title="封面模式"></a>封面模式</h3><p>推荐插件 hexo-less 类似于预览效果。</p><p>但是这个预览效果不影响章内䆟。只需在文章中写 &lt;!–less–&gt; 作为分割线，less 前的内容会作为摘要，但不作为文章内容的一部分。</p><p>如果你想让这篇文章在主页列表中，只显示一张美图，那这个方法就很完美了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客</title>
      <link href="/posts/178c0d2c/"/>
      <url>/posts/178c0d2c/</url>
      
        <content type="html"><![CDATA[<!-- <script type="text/javascript" src="/js/src/baidu.js"></script> --><p>Xu-Blog = Hexo + GithubPages + 个人域名</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正在使用 Hexo，本着“授人以鱼，不如授人以渔”的理念，将自己在使用 Hexo 搭建博客的过程整理成使用教程，分享给大家。</p><p>另外，个人成品小站 <a href="https://www.xudongpo.cn">xudongpo.cn</a> ，如果你也想亲力亲为经营一个属于自己的个人博客，那就继续往下看吧^_^</p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>Hexo</strong> 是一个快速、简洁且高效的博客框架。支持 Markdown 语法解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p><strong>GitHub</strong> 是一个面向开源及私有软件项目的托管平台，它提供的 GitHubPages 是一个静态站点托管服务。</p><h2 id="创建-Github-仓库"><a href="#创建-Github-仓库" class="headerlink" title="创建 Github 仓库"></a>创建 Github 仓库</h2><h3 id="创建-Github"><a href="#创建-Github" class="headerlink" title="创建 Github"></a>创建 Github</h3><p>假定已经有 Github 账户。</p><h3 id="创建-io-仓库"><a href="#创建-io-仓库" class="headerlink" title="创建 io 仓库"></a>创建 io 仓库</h3><ul><li>点击创建仓库<br><img src="新建仓库.png" style="height:200px;" alt="新建仓库"></img></li><li>项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选 Initialize this repository with a README</li><li>在建好的项目右侧有个 settings 按钮，点击它，向下拉到 GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。如果没有，你可以直接在浏览器输入自己仓库名，在浏览器进行访问，能访问成功说明也 OK。</li></ul><hr><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单。然而在安装前，先检查是否已安装下列应用程序：</p><ul><li>Node.js</li><li>Git</li></ul><p>分别输入 node -v 和 npm -v，会返回对应的版本。</p><p><img src="%E7%89%88%E6%9C%AC%E6%9F%A5%E8%AF%A2.png" alt="版本查询"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>如果您的电脑中已经安装上述必备程序，那么只需要使用 npm 即可完成 Hexo 的安装。</p><ul><li>npm install hexo -g</li><li>安装 Hexo 完成后，输入 hexo -v 检查 hexo 版本</li><li>在自己认为合适的地方创个文件夹，然后通过命令行进入到该文件夹里面</li><li>再执行下列命令，Hexo 将会初始化文件夹<ul><li>hexo init</li><li>npm install</li></ul></li></ul><p>此时，我们的环境基本就搭建完毕了</p><p>接下来我们输入 hexo g 生成博客所需文件</p><p>然后输入 hexo s 启动本地服务器，访问提示网址，博客页面展现出来了</p><hr><h2 id="发布博客到-Github"><a href="#发布博客到-Github" class="headerlink" title="发布博客到 Github"></a>发布博客到 Github</h2><ul><li>配置 Deployment，在其文件夹中，找到_config.yml 文件，修改 repo 值（在末尾）</li></ul><p><img src="配置repo.png" style="height:150px;" alt="配置repo"></img></p><ul><li>repo 值的获取位置，需要把 Clone 方式切换成 SSH 形式，然后复制地址就可以了</li></ul><p><img src="切换SSH.png" style="height:250px;" alt="切换SSH"></img></p><ul><li><p>在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git</p></li><li><p>使用命令 hexo d 就可以将博客页面部署到 Github 上了</p></li><li><p>部署成功后访问你的地址：<span class="exturl" data-url="aHR0cDovL2Rvbmdwb3h1LmdpdGh1Yi5pbw==" title="http://dongpoxu.github.io">http://dongpoxu.github.io<i class="fa fa-external-link"></i></span>。如果看到之前在本地部署一样的页面，说明我们就部署成功啦！</p></li></ul><h2 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h2><p>在<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=" title="https://hexo.io/themes/">Hexo 官网<i class="fa fa-external-link"></i></span>有很多主题供大家选择，并且每个主题都有自己对应的说明文档。</p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><ul><li>git 克隆主题<br><code>git clone &quot;https://github.com/iissnan/hexo-theme-next themes/next&quot;</code></li><li>修改博客根目录下的_config.yml 中的 theme 属性，将其设置为你下载下来的主题名。<ul><li>theme: zhutiming</li></ul></li><li>配置主题<ul><li>修改主题目录下的_config.yml 配置文件</li></ul></li><li>主题发布<ul><li>hexo clean</li><li>hexo g</li><li>hexo d</li></ul></li></ul><p>成功后再次访问地址，查看效果，页面会有缓存，需要多刷新几次才行。</p><hr><h2 id="绑定独立域名"><a href="#绑定独立域名" class="headerlink" title="绑定独立域名"></a>绑定独立域名</h2><p>因为 Hexo 个人博客是托管在 Github 之上，每次访问都要用 dongpoxu.github.io 这么一个长串的域名来访问，显得非常繁琐。<br>这个时候我们可以购买一个域名，设置 DNS 跳转，通过域名即可访问我们的个人博客。并且 Github pages 是支持域名绑定的。</p><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>阿里云，腾讯云啥的买个自己中意的域名</p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>Ping 以下自己的<span class="exturl" data-url="aHR0cDovL2Rvbmdwb3h1LmdpdGh1Yi5pbw==" title="http://dongpoxu.github.io">http://dongpoxu.github.io<i class="fa fa-external-link"></i></span>地址，获得对应的 IP 地址。</p><p>在域名解析控制台添加 CNAME 和 A 解析记录，使 www 网址和 @(即本身) 都指向自己的 Github page<br>按以下表格分别添加 A 和 CNAME 两条解析记录：</p><table><thead><tr><th>类型 type</th><th>主机 host</th><th>指向 points to</th><th>TTL(Time To Live)</th></tr></thead><tbody><tr><td>A</td><td>@</td><td>github page 的 IP 地址</td><td>600</td></tr><tr><td>CNAME</td><td>www</td><td>github page 的网址</td><td>600</td></tr><tr><td>A 记录：用来指定域名的 IPv4 地址，如要将域名指向一个 IP 地址，添加 A 记录<br>CNAME：如要将域名指向另一域名，再由该域名提供 ip，添加 CNAME 记录</td><td>www：解析后域名为 <span class="exturl" data-url="aHR0cDovL3d3dy55dWNpY2hldW5nLm1l" title="http://www.yucicheung.me">www.yucicheung.me<i class="fa fa-external-link"></i></span><br>@：解析主域名 yucicheung.me<br>*：泛解析，匹配其他所有域名，*.yucicheung.me</td><td>对于 A 记录:要指向 IP 地址<br>对于 CNAME:要指向一个域名</td><td>指地方 dns 缓存域名记录的时间,缓存失效后会再次获取<br>600:建议采用 600<br>60:如果经常修改 IP 可用(修改可快速生效),长期使用略影响解析速度<br>3600:如果 IP 极少变动(一年几次),可选择 3600,解析速度快</td></tr></tbody></table><p><img src="%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png" alt="域名解析"></p><h3 id="添加-github-仓库的域名解析记录"><a href="#添加-github-仓库的域名解析记录" class="headerlink" title="添加 github 仓库的域名解析记录"></a>添加 github 仓库的域名解析记录</h3><p>按以下命令在自己的 github 仓库中添加 CNAME 文件，其中填入购买的域名。或者在仓库的 settings 中设置 Custom Domain 设置好自己的域名，github 会自动添加 CNAME 文件。</p><p>~ touch CNAME<br>~ echo ‘yucicheung.me’&gt; CNAME</p><ul><li>稍等一下就可以通过域名访问 dongpoxu.github.io 了，但是这时只能通过 http 访问自定义域名而非 https</li></ul><h3 id="通过-HTTPS-访问自定义域名"><a href="#通过-HTTPS-访问自定义域名" class="headerlink" title="通过 HTTPS 访问自定义域名"></a>通过 HTTPS 访问自定义域名</h3><p>将 Settings 里面的 Enforce HTTPS 勾选就可以了</p><ul><li>设置完成后图</li></ul><p><img src="%E8%AE%BE%E7%BD%AE%E5%AE%8C%E6%88%90.png" alt="设置完成"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>第一篇文章，就 Hello World 吧</p><h2 id="何由"><a href="#何由" class="headerlink" title="何由"></a>何由</h2><p>为什么又要开始写博客了呢，读了研究生之后，工作说忙很忙，说闲很闲，所有的任务都需要自己给自己布置，第一年有课程还好，感觉不到什么。之后没课了，论文和项目占用的时间分布并不均匀，空闲的时间块有很多，总要去做点什么，才会让自己浮躁的心安定下来。</p><a id="more"></a><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>我接触<strong>前端</strong>是在我大三那年，经历了一系列大学生创新竞赛之后，身心俱疲（飞思卡尔和电赛这类，需要准备很久）。发现单片机嵌入式的学习带给我的快乐越来越少，来来回回就那些东西，慢慢的有些疲乏，于是在一堆书籍中找到了一本 HTML5 网页开发的书翻了翻。这本书在开始部分有很多网页链接，指向了几个很绚丽的页面。点进去一看，惊为天人，觉得这种东西非常人可为（虽然经过这么多年证实，我确实是个常人）。我就决定这东西，我要学，无论我长得多么粗糙，我也想设计很美的东西。</p><h2 id="缘灭"><a href="#缘灭" class="headerlink" title="缘灭"></a>缘灭</h2><p>我大学本科专业是电子信息工程，我自己额外还管理着一个千人社团-电子学会（虽说常驻人员其实就不到百人）。大三末正值新老届管理班子交替，要总和老师们开会，就在那些时间碎片中一点点把书啃完了。啃完就一个感觉，简单。不仅仅是难度低，更是觉得这个东西不可能做到我看到的那些界面，心智不坚定，一抖，去学 LabVIEW 了，因为可以做上位机供大家用（笑哭的表情给我一个）。</p><h2 id="再续"><a href="#再续" class="headerlink" title="再续"></a>再续</h2><p>再次回来学前端已经是两年后，研一。在一个作息极度奇怪但是很厉害的实验室。大家默默的奉行着一种，比比咱们谁走的晚～看咱谁来的也晚～（对，不是看谁来的早），老师会鼓励大家包宿学习，白天睡觉。有种用包宿来给自己证明自己很努力的感觉。然后一个比我大一届的学长，三高（高血脂，高血压，高血糖）。在那个环境中，我每天都是一个修补匠，哪里需要去哪里，帮这边写写上位机，帮那边画画机械图，然后再去那边偷偷学点，当时正好有个大神应老师要求帮实验室做个网站，我每天就去偷师，虽然大神用的 bootstrap 样式，并且做的也不好看，我依然觉得那是我在那个环境中看到的最棒的东西。我开始偷偷学了。</p><h2 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h2><p>在那个大家都夜里干活，白天睡觉的日子，我每天早上 6 点起来，那会还是冬天，东北的冬天早上 6 点是真的冷啊。然后赶到实验室，那会我们老师也刚回家，学长们准备收拾回去了。我找师兄接下当天的任务，比如，焊 35 块电路板并测试（PCB 的小板子，项目用）、去电子市场买元件、去建材市场买木材泡沫等等。基本风风火火干完也就晚上 6 点左右了。吃一大碗麻辣烫，往我们实验室旁边的精工间一坐，坐到师兄们晚上十点来，我十点回去睡觉（我常常因为过于变态而与他们格格不入），那个时间段那里是独属于我的静室，不会有人来打扰我，手机静音。先是跟着<span class="exturl" data-url="aHR0cDovL3d3dy53M3NjaG9vbC5jb20uY24v" title="http://www.w3school.com.cn/">W3School<i class="fa fa-external-link"></i></span>过了一遍 HTML 和 HTML5，然后看 CSS 和 CSS3，因为没人教，就去<span class="exturl" data-url="aHR0cHM6Ly93d3cuaW1vb2MuY29tLw==" title="https://www.imooc.com/">慕课网<i class="fa fa-external-link"></i></span>跟着别人的视频教程敲代码，还有<span class="exturl" data-url="aHR0cDovL3d3dy5ydW5vb2IuY29tLw==" title="http://www.runoob.com/">菜鸟学院<i class="fa fa-external-link"></i></span>，之后也会去<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==" title="https://github.com/">github<i class="fa fa-external-link"></i></span>上找一些别的前辈在学习前端过程中做的一些 Practice，然后一点点模仿着去做，这些网站都是我的启蒙老师，感谢软件社区的开源精神。</p><p>慢慢的学习走上了正规（算是吧，非科班的我就这么骗自己），买了很多很多书籍，吃了不少土。《HeadFirst 系列》的书籍去让我对这些的理解更透彻；《JS 高级程序设计》和《JS 权威指南》让我的基础越来越牢固；还有《深入浅出 Node.js》《了不起的 Nodejs》让我知道 JS 竟然还可以做服务端，《ES6 标准入门》《JavaScript 设计模式》让我对 JS 和 ES 有了全新的认识，太多书籍就不一一说了，之后写个完整的书籍介绍文章，给大家介绍介绍相关书籍。</p><p>然后有一天我在电脑端 copy 了一个动画效果（粒子吸附的效果）特别激动，想分享给大家，但是身边的小伙伴都不愿意动弹，整的我自己一个人想要炫耀的想法被浇灭了，我就想啊，要是有个属于我的网站大家都能访问该多好。那时我还是个小白，不知道域名这些都是啥，什么都不懂啊，我就在百度搜索：<strong>我写的页面，别人怎么看到</strong>，嗯，答案我很满意，大家的分享意识真的让我浑身舒畅，这也是我想要把自己会的分享出来的原因（虽然我废话比较多）。</p><p>我了解到了服务器，然后找上了阿里云，去他家首购 9.9 元一年的域名，半年的 ECS 实例套餐，这划算啊。立刻就买了一个，然后学习远程登陆 linux，学习 linux 指令，那会不懂那些，一通搜索，疯狂查询记录，后来才知道其实只是简单页面不需要安装什么数据库，只用 nodejs 启动一个服务，nginx 代理一下就可以了，那会也对 HTTP 啥的不清楚，总之小白一个吧，但是就那么吭哧吭哧做出来了，还特意做了 7 个页面，每个页面对应文件夹，大概写了一共 20 来个页面，就涉及到有些公共页面头，以及公共样式了，就学习 iframe，或者把页面转成 js 然后 js 引用，其中还特意给自己的爱情做了一个页面，用来记录，最后服务器到期了，爱情也到期了。</p><h2 id="停滞"><a href="#停滞" class="headerlink" title="停滞"></a>停滞</h2><p>研究生我的专业是：激光及其与物质相互作用。第一次读到这个专业，我心里就一句： mmp 这是啥东东？大概半年左右吧，我研一快结束了，我很困惑，我不知道学的这些有什么用，平时在实验室焊电路，画零件图，写上位机，所有的工作和毕业没有关系，我不知道该何去何从。我想重新考研，家里不同意啊，你辛辛苦苦考下来的怎么能放弃？其实也对，未来的人生中一定有很多很多我不想做但是选择了的，那你只能硬着头皮做下去啊，<strong>有的时候有得选，有的时候没得选</strong>。我很幸运，那个时候的我，有的选。我选择了直博，回到了本科在的电子信息工程，读了信息与通信工程。并没有什么好的，只是想让自己的工作生活更舒适一点，让自己有时间做自己喜欢的事情，想让自己未来的人生看起来不那么遗憾。转专业的过程很漫长，这中间停滞了很久很久没有写东西，没有做总结，每天都沉浸在，如果过不去该怎么办，如果那边不好怎么办，压力好大我未来该怎么办这一类没意义的问题上，还干过夜里 23:00 跑出寝室在外面马路上哭到第二天早上的经历（想想自己也是挺厉害的），所幸后来一切顺利，个人选择，与他人无关，只是我想要我想要的生活。</p><h2 id="重返"><a href="#重返" class="headerlink" title="重返"></a>重返</h2><p>去年放假，回家见以前的老同学，第一年有这么久的假期。见了很多初高中的伙伴，聊的十分热切，饭桌上恍然，已经九年了啊。他们还是能一眼就认出我，说我说话声音变了，个子还是那么高（还能缩嘛？？？哈哈），有个小伙伴后来我们私信的时候推荐了我 Hexo 和码云Page 做博客，我这才想起来，我曾经还做过博客呢啊，不如重拾当年的时光和梦想，万一哪天实现了呢？</p><hr><p>忙起来以后<br>所有繁琐的心思都会不见<br>闲了就学 饿了就吃 累了就睡<br>一切都井然有序<br>长春的春天真的很美<br>虽然有些冷 风很乱<br>但 云很美 天很蓝<br>万物都在复苏<br>你 我 也不例外</p><p>Hello World<br>你好，世界</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
